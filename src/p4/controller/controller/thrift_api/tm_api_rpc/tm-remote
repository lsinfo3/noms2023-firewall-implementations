#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.14.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:package_prefix=controller.thrift_api.
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from tm_api_rpc import tm
from tm_api_rpc.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  tm_ppg_t tm_allocate_ppg(tm_dev_t dev, tm_port_t port)')
    print('  void tm_free_ppg(tm_dev_t dev, tm_ppg_t ppg)')
    print('  tm_ppg_t tm_get_default_ppg(tm_dev_t dev, tm_port_t port)')
    print('  void tm_set_ppg_icos_mapping(tm_dev_t dev, tm_ppg_t ppg, tm_icos_t icos_map)')
    print('  void tm_enable_lossless_treatment(tm_dev_t dev, tm_ppg_t ppg)')
    print('  void tm_disable_lossless_treatment(tm_dev_t dev, tm_ppg_t ppg)')
    print('  void tm_set_ppg_app_pool_usage(tm_dev_t dev, tm_ppg_t ppg, tm_pool_t pool, tm_limit_t base_use_limit, tm_ppg_baf_t dynamic_baf, tm_limit_t hysteresis)')
    print('  void tm_disable_ppg_app_pool_usage(tm_dev_t dev, tm_pool_t pool, tm_ppg_t ppg)')
    print('  void tm_set_ppg_guaranteed_min_limit(tm_dev_t dev, tm_ppg_t ppg, tm_limit_t cells)')
    print('  void tm_set_ppg_skid_limit(tm_dev_t dev, tm_ppg_t ppg, tm_limit_t cells)')
    print('  void tm_set_guaranteed_min_skid_hysteresis(tm_dev_t dev, tm_ppg_t ppg, tm_limit_t cells)')
    print('  void tm_set_port_q_mapping(tm_dev_t dev, tm_port_t port, i16 q_count, tm_q_map_t q_map)')
    print('  void tm_set_q_app_pool_usage(tm_dev_t dev, tm_port_t port, tm_q_t q, tm_pool_t pool, tm_limit_t base_use_limit, tm_q_baf_t dynamic_baf, tm_limit_t hysteresis)')
    print('  void tm_disable_q_app_pool_usage(tm_dev_t dev, tm_port_t port, tm_q_t q)')
    print('  void tm_set_q_guaranteed_min_limit(tm_dev_t dev, tm_port_t port, tm_q_t q, tm_limit_t cells)')
    print('  void tm_set_q_color_limit(tm_dev_t dev, tm_port_t port, tm_q_t q, tm_color_t color, tm_limit_t cells)')
    print('  void tm_set_q_color_hysteresis(tm_dev_t dev, tm_port_t port, tm_q_t q, tm_color_t color, tm_limit_t cells)')
    print('  void tm_enable_q_tail_drop(tm_dev_t dev, tm_port_t port, tm_q_t q)')
    print('  void tm_disable_q_tail_drop(tm_dev_t dev, tm_port_t port, tm_q_t q)')
    print('  void tm_enable_q_color_drop(tm_dev_t dev, tm_port_t port, tm_q_t q)')
    print('  void tm_disable_q_color_drop(tm_dev_t dev, tm_port_t port, tm_q_t q)')
    print('  void tm_set_negative_mirror_dest(tm_dev_t dev, tm_pipe_t pipe, tm_port_t port, tm_q_t q)')
    print('  void tm_set_q_pfc_cos_mapping(tm_dev_t dev, tm_port_t port, tm_q_t q, tm_icos_t cos)')
    print('  void tm_set_app_pool_size(tm_dev_t dev, tm_pool_t pool, tm_cells_t cells)')
    print('  void tm_enable_app_pool_color_drop(tm_dev_t dev, tm_pool_t pool)')
    print('  void tm_disable_app_pool_color_drop(tm_dev_t dev, tm_pool_t pool)')
    print('  void tm_set_app_pool_color_drop_limit(tm_dev_t dev, tm_pool_t pool, tm_color_t color, tm_cells_t cells)')
    print('  void tm_set_app_pool_color_drop_hysteresis(tm_dev_t dev, tm_color_t color, tm_cells_t cells)')
    print('  void tm_set_app_pool_pfc_limit(tm_dev_t dev, tm_pool_t pool, tm_icos_t icos, tm_cells_t cells)')
    print('  void tm_set_skid_pool_size(tm_dev_t dev, tm_cells_t cells)')
    print('  void tm_set_skid_pool_hysteresis(tm_dev_t dev, tm_cells_t cells)')
    print('  void tm_set_negative_mirror_pool_size(tm_dev_t dev, tm_cells_t cells)')
    print('  void tm_set_uc_cut_through_pool_size(tm_dev_t dev, tm_cells_t cells)')
    print('  void tm_set_mc_cut_through_pool_size(tm_dev_t dev, tm_cells_t cells)')
    print('  void tm_set_egress_pipe_limit(tm_dev_t dev, tm_pipe_t pipe, tm_cells_t cells)')
    print('  void tm_set_egress_pipe_hysteresis(tm_dev_t dev, tm_pipe_t pipe, tm_cells_t cells)')
    print('  void tm_set_ingress_port_drop_limit(tm_dev_t dev, tm_port_t port, tm_cells_t cells)')
    print('  void tm_set_ingress_port_hysteresis(tm_dev_t dev, tm_port_t port, tm_cells_t cells)')
    print('  void tm_set_port_uc_cut_through_limit(tm_dev_t dev, tm_port_t port, tm_cells_t cells)')
    print('  void tm_set_port_flowcontrol_mode(tm_dev_t dev, tm_port_t port, tm_flow_ctrl_t fctype)')
    print('  void tm_set_port_pfc_cos_mapping(tm_dev_t dev, tm_port_t port, tm_pfc_cos_map_t cos_icos_map)')
    print('  void tm_set_cpuport(tm_dev_t dev, tm_port_t port)')
    print('  void tm_reset_cpuport(tm_dev_t dev)')
    print('  void tm_set_q_sched_priority(tm_dev_t dev, tm_port_t port, tm_q_t q, tm_sched_prio_t prio)')
    print('  void tm_set_q_dwrr_weight(tm_dev_t dev, tm_port_t port, tm_q_t q, i16 weight)')
    print('  void tm_set_q_shaping_rate(tm_dev_t dev, tm_port_t port, tm_q_t q, bool pps, tm_limit_t burstsize, tm_limit_t rate)')
    print('  void tm_set_q_guaranteed_rate(tm_dev_t dev, tm_port_t port, tm_q_t q, bool pps, tm_limit_t burstsize, tm_limit_t rate)')
    print('  void tm_set_q_remaining_bw_sched_priority(tm_dev_t dev, tm_port_t port, tm_q_t q, tm_sched_prio_t prio)')
    print('  void tm_sched_q_l1_set(tm_dev_t dev, tm_port_t port, tm_l1_node_t l1_node, tm_q_t q)')
    print('  void tm_sched_q_l1_reset(tm_dev_t dev, tm_port_t port, tm_q_t q)')
    print('  void tm_sched_l1_priority_set(tm_dev_t dev, tm_port_t port, tm_l1_node_t l1_node, tm_sched_prio_t priority)')
    print('  void tm_sched_l1_dwrr_weight_set(tm_dev_t dev, tm_port_t port, tm_l1_node_t l1_node, i16 weight)')
    print('  void tm_sched_l1_shaping_rate_set(tm_dev_t dev, tm_port_t port, tm_l1_node_t l1_node, bool pps, i32 burst_size, i32 rate)')
    print('  void tm_sched_l1_max_shaping_rate_enable(tm_dev_t dev, tm_port_t port, tm_l1_node_t l1_node)')
    print('  void tm_sched_l1_max_shaping_rate_disable(tm_dev_t dev, tm_port_t port, tm_l1_node_t l1_node)')
    print('  void tm_sched_l1_priority_prop_enable(tm_dev_t dev, tm_port_t port, tm_l1_node_t l1_node)')
    print('  void tm_sched_l1_priority_prop_disable(tm_dev_t dev, tm_port_t port, tm_l1_node_t l1_node)')
    print('  void tm_sched_l1_guaranteed_rate_set(tm_dev_t dev, tm_port_t port, tm_l1_node_t l1_node, bool pps, i32 burst_size, i32 rate)')
    print('  void tm_sched_l1_remaining_bw_priority_set(tm_dev_t dev, tm_port_t port, tm_l1_node_t l1_node, tm_sched_prio_t priority)')
    print('  void tm_sched_l1_guaranteed_rate_enable(tm_dev_t dev, tm_port_t port, tm_l1_node_t l1_node)')
    print('  void tm_sched_l1_guaranteed_rate_disable(tm_dev_t dev, tm_port_t port, tm_l1_node_t l1_node)')
    print('  void tm_sched_l1_enable(tm_dev_t dev, tm_port_t port, tm_l1_node_t l1_node)')
    print('  void tm_sched_l1_disable(tm_dev_t dev, tm_port_t port, tm_l1_node_t l1_node)')
    print('  void tm_sched_l1_free(tm_dev_t dev, tm_port_t port, tm_l1_node_t l1_node)')
    print('  void tm_set_port_shaping_rate(tm_dev_t dev, tm_port_t port, bool pps, tm_limit_t burstsize, tm_limit_t rate)')
    print('  void tm_set_shaper_pkt_ifg_compensation(tm_dev_t dev, tm_pipe_t pipe, i16 adjustment)')
    print('  void tm_enable_q_sched(tm_dev_t dev, tm_port_t port, tm_q_t q)')
    print('  void tm_disable_q_sched(tm_dev_t dev, tm_port_t port, tm_q_t q)')
    print('  void tm_enable_port_shaping(tm_dev_t dev, tm_port_t port)')
    print('  void tm_disable_port_shaping(tm_dev_t dev, tm_port_t port)')
    print('  void tm_enable_port_sched(tm_dev_t dev, tm_port_t port, tm_port_speed_t speed)')
    print('  void tm_disable_port_sched(tm_dev_t dev, tm_port_t port)')
    print('  void tm_enable_q_max_shaping_rate(tm_dev_t dev, tm_port_t port, tm_q_t q)')
    print('  void tm_disable_q_max_shaping_rate(tm_dev_t dev, tm_port_t port, tm_q_t q)')
    print('  void tm_enable_q_min_shaping_rate(tm_dev_t dev, tm_port_t port, tm_q_t q)')
    print('  void tm_disable_q_min_shaping_rate(tm_dev_t dev, tm_port_t port, tm_q_t q)')
    print('  void tm_complete_operations(tm_dev_t dev)')
    print('  void tm_set_timestamp_shift(tm_dev_t dev, i16 shift)')
    print('  tm_sched_prio_t tm_get_q_sched_priority(tm_dev_t dev, tm_port_t port, tm_q_t q)')
    print('  i16 tm_get_q_dwrr_weight(tm_dev_t dev, tm_port_t port, tm_q_t q)')
    print('  tm_shaper_rate_t tm_get_q_shaping_rate(tm_dev_t dev, tm_port_t port, tm_q_t q)')
    print('  tm_shaper_rate_t tm_get_q_guaranteed_rate(tm_dev_t dev, tm_port_t port, tm_q_t q)')
    print('  tm_sched_prio_t tm_get_q_remaining_bw_sched_priority(tm_dev_t dev, tm_port_t port, tm_q_t q)')
    print('  tm_shaper_rate_t tm_get_port_shaping_rate(tm_dev_t dev, tm_port_t port)')
    print('  i16 tm_get_shaper_pkt_ifg_compensation(tm_dev_t dev, tm_pipe_t pipe)')
    print('  tm_cells_t tm_get_egress_pipe_limit(tm_dev_t dev, tm_pipe_t pipe)')
    print('  tm_cells_t tm_get_egress_pipe_hysteresis(tm_dev_t dev, tm_pipe_t pipe)')
    print('  tm_q_map_t tm_get_port_q_mapping(tm_dev_t dev, tm_port_t port)')
    print('  tm_pool_usage_t tm_get_q_app_pool_usage(tm_dev_t dev, tm_port_t port, tm_q_t q)')
    print('  tm_cells_t tm_get_q_guaranteed_min_limit(tm_dev_t dev, tm_port_t port, tm_q_t q)')
    print('  tm_limit_t tm_get_q_color_limit(tm_dev_t dev, tm_port_t port, tm_q_t q, tm_color_t color)')
    print('  tm_limit_t tm_get_q_color_hysteresis(tm_dev_t dev, tm_port_t port, tm_q_t q, tm_color_t color)')
    print('  tm_cells_t tm_get_port_uc_cut_through_limit(tm_dev_t dev, tm_port_t port)')
    print('  i16 tm_get_total_ppg(tm_dev_t dev, tm_pipe_t pipe)')
    print('  i16 tm_get_unused_ppg_count(tm_dev_t dev, tm_pipe_t pipe)')
    print('  tm_pool_usage_t tm_get_ppg_app_pool_usage(tm_dev_t dev, tm_ppg_t ppg, tm_pool_t pool)')
    print('  tm_cells_t tm_get_ppg_guaranteed_min_limit(tm_dev_t dev, tm_ppg_t ppg)')
    print('  tm_cells_t tm_get_ppg_skid_limit(tm_dev_t dev, tm_ppg_t ppg)')
    print('  tm_cells_t tm_get_ppg_guaranteed_min_skid_hysteresis(tm_dev_t dev, tm_ppg_t ppg)')
    print('  tm_cells_t tm_get_app_pool_size(tm_dev_t dev, tm_pool_t pool)')
    print('  tm_cells_t tm_get_app_pool_color_drop_limit(tm_dev_t dev, tm_pool_t pool, tm_color_t color)')
    print('  tm_cells_t tm_get_app_pool_color_drop_hysteresis(tm_dev_t dev, tm_color_t color)')
    print('  tm_cells_t tm_get_app_pool_pfc_limit(tm_dev_t dev, tm_pool_t pool, tm_icos_t icos)')
    print('  tm_cells_t tm_get_skid_pool_size(tm_dev_t dev)')
    print('  tm_cells_t tm_get_skid_pool_hysteresis(tm_dev_t dev)')
    print('  tm_cells_t tm_get_negative_mirror_pool_size(tm_dev_t dev)')
    print('  tm_cells_t tm_get_uc_cut_through_pool_size(tm_dev_t dev, tm_pool_t pool)')
    print('  tm_cells_t tm_get_mc_cut_through_pool_size(tm_dev_t dev, tm_pool_t pool)')
    print('  tm_cells_t tm_get_ingress_port_drop_limit(tm_dev_t dev, tm_port_t port)')
    print('  tm_cells_t tm_get_ingress_port_hysteresis(tm_dev_t dev, tm_port_t port)')
    print('  tm_flow_ctrl_t tm_get_port_flowcontrol_mode(tm_dev_t dev, tm_port_t port)')
    print('  tm_pfc_cos_map_t tm_get_port_pfc_cos_mapping(tm_dev_t dev, tm_port_t port)')
    print('  i16 tm_get_ppg_icos_mapping(tm_dev_t dev, tm_ppg_t ppg)')
    print('  i16 tm_get_timestamp_shift(tm_dev_t dev)')
    print('  i64 tm_get_ppg_drop(tm_dev_t dev, tm_pipe_t pipe, tm_ppg_t ppg)')
    print('  i64 tm_get_q_drop(tm_dev_t dev, tm_pipe_t pipe, tm_port_t port, tm_q_t q)')
    print('  tm_ppg_usage_t tm_get_ppg_usage(tm_dev_t dev, tm_pipe_t pipe, tm_ppg_t ppg)')
    print('  tm_usage_t tm_get_q_usage(tm_dev_t dev, tm_pipe_t pipe, tm_port_t port, tm_q_t q)')
    print('  tm_usage_t tm_get_pool_usage(tm_dev_t dev, tm_pool_t pool)')
    print('  void tm_set_ut_mode_as_model(tm_dev_t dev)')
    print('  void tm_set_ut_mode_as_asic(tm_dev_t dev)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = tm.Client(protocol)
transport.open()

if cmd == 'tm_allocate_ppg':
    if len(args) != 2:
        print('tm_allocate_ppg requires 2 args')
        sys.exit(1)
    pp.pprint(client.tm_allocate_ppg(eval(args[0]), eval(args[1]),))

elif cmd == 'tm_free_ppg':
    if len(args) != 2:
        print('tm_free_ppg requires 2 args')
        sys.exit(1)
    pp.pprint(client.tm_free_ppg(eval(args[0]), eval(args[1]),))

elif cmd == 'tm_get_default_ppg':
    if len(args) != 2:
        print('tm_get_default_ppg requires 2 args')
        sys.exit(1)
    pp.pprint(client.tm_get_default_ppg(eval(args[0]), eval(args[1]),))

elif cmd == 'tm_set_ppg_icos_mapping':
    if len(args) != 3:
        print('tm_set_ppg_icos_mapping requires 3 args')
        sys.exit(1)
    pp.pprint(client.tm_set_ppg_icos_mapping(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'tm_enable_lossless_treatment':
    if len(args) != 2:
        print('tm_enable_lossless_treatment requires 2 args')
        sys.exit(1)
    pp.pprint(client.tm_enable_lossless_treatment(eval(args[0]), eval(args[1]),))

elif cmd == 'tm_disable_lossless_treatment':
    if len(args) != 2:
        print('tm_disable_lossless_treatment requires 2 args')
        sys.exit(1)
    pp.pprint(client.tm_disable_lossless_treatment(eval(args[0]), eval(args[1]),))

elif cmd == 'tm_set_ppg_app_pool_usage':
    if len(args) != 6:
        print('tm_set_ppg_app_pool_usage requires 6 args')
        sys.exit(1)
    pp.pprint(client.tm_set_ppg_app_pool_usage(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]),))

elif cmd == 'tm_disable_ppg_app_pool_usage':
    if len(args) != 3:
        print('tm_disable_ppg_app_pool_usage requires 3 args')
        sys.exit(1)
    pp.pprint(client.tm_disable_ppg_app_pool_usage(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'tm_set_ppg_guaranteed_min_limit':
    if len(args) != 3:
        print('tm_set_ppg_guaranteed_min_limit requires 3 args')
        sys.exit(1)
    pp.pprint(client.tm_set_ppg_guaranteed_min_limit(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'tm_set_ppg_skid_limit':
    if len(args) != 3:
        print('tm_set_ppg_skid_limit requires 3 args')
        sys.exit(1)
    pp.pprint(client.tm_set_ppg_skid_limit(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'tm_set_guaranteed_min_skid_hysteresis':
    if len(args) != 3:
        print('tm_set_guaranteed_min_skid_hysteresis requires 3 args')
        sys.exit(1)
    pp.pprint(client.tm_set_guaranteed_min_skid_hysteresis(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'tm_set_port_q_mapping':
    if len(args) != 4:
        print('tm_set_port_q_mapping requires 4 args')
        sys.exit(1)
    pp.pprint(client.tm_set_port_q_mapping(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'tm_set_q_app_pool_usage':
    if len(args) != 7:
        print('tm_set_q_app_pool_usage requires 7 args')
        sys.exit(1)
    pp.pprint(client.tm_set_q_app_pool_usage(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]), eval(args[6]),))

elif cmd == 'tm_disable_q_app_pool_usage':
    if len(args) != 3:
        print('tm_disable_q_app_pool_usage requires 3 args')
        sys.exit(1)
    pp.pprint(client.tm_disable_q_app_pool_usage(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'tm_set_q_guaranteed_min_limit':
    if len(args) != 4:
        print('tm_set_q_guaranteed_min_limit requires 4 args')
        sys.exit(1)
    pp.pprint(client.tm_set_q_guaranteed_min_limit(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'tm_set_q_color_limit':
    if len(args) != 5:
        print('tm_set_q_color_limit requires 5 args')
        sys.exit(1)
    pp.pprint(client.tm_set_q_color_limit(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'tm_set_q_color_hysteresis':
    if len(args) != 5:
        print('tm_set_q_color_hysteresis requires 5 args')
        sys.exit(1)
    pp.pprint(client.tm_set_q_color_hysteresis(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'tm_enable_q_tail_drop':
    if len(args) != 3:
        print('tm_enable_q_tail_drop requires 3 args')
        sys.exit(1)
    pp.pprint(client.tm_enable_q_tail_drop(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'tm_disable_q_tail_drop':
    if len(args) != 3:
        print('tm_disable_q_tail_drop requires 3 args')
        sys.exit(1)
    pp.pprint(client.tm_disable_q_tail_drop(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'tm_enable_q_color_drop':
    if len(args) != 3:
        print('tm_enable_q_color_drop requires 3 args')
        sys.exit(1)
    pp.pprint(client.tm_enable_q_color_drop(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'tm_disable_q_color_drop':
    if len(args) != 3:
        print('tm_disable_q_color_drop requires 3 args')
        sys.exit(1)
    pp.pprint(client.tm_disable_q_color_drop(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'tm_set_negative_mirror_dest':
    if len(args) != 4:
        print('tm_set_negative_mirror_dest requires 4 args')
        sys.exit(1)
    pp.pprint(client.tm_set_negative_mirror_dest(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'tm_set_q_pfc_cos_mapping':
    if len(args) != 4:
        print('tm_set_q_pfc_cos_mapping requires 4 args')
        sys.exit(1)
    pp.pprint(client.tm_set_q_pfc_cos_mapping(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'tm_set_app_pool_size':
    if len(args) != 3:
        print('tm_set_app_pool_size requires 3 args')
        sys.exit(1)
    pp.pprint(client.tm_set_app_pool_size(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'tm_enable_app_pool_color_drop':
    if len(args) != 2:
        print('tm_enable_app_pool_color_drop requires 2 args')
        sys.exit(1)
    pp.pprint(client.tm_enable_app_pool_color_drop(eval(args[0]), eval(args[1]),))

elif cmd == 'tm_disable_app_pool_color_drop':
    if len(args) != 2:
        print('tm_disable_app_pool_color_drop requires 2 args')
        sys.exit(1)
    pp.pprint(client.tm_disable_app_pool_color_drop(eval(args[0]), eval(args[1]),))

elif cmd == 'tm_set_app_pool_color_drop_limit':
    if len(args) != 4:
        print('tm_set_app_pool_color_drop_limit requires 4 args')
        sys.exit(1)
    pp.pprint(client.tm_set_app_pool_color_drop_limit(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'tm_set_app_pool_color_drop_hysteresis':
    if len(args) != 3:
        print('tm_set_app_pool_color_drop_hysteresis requires 3 args')
        sys.exit(1)
    pp.pprint(client.tm_set_app_pool_color_drop_hysteresis(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'tm_set_app_pool_pfc_limit':
    if len(args) != 4:
        print('tm_set_app_pool_pfc_limit requires 4 args')
        sys.exit(1)
    pp.pprint(client.tm_set_app_pool_pfc_limit(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'tm_set_skid_pool_size':
    if len(args) != 2:
        print('tm_set_skid_pool_size requires 2 args')
        sys.exit(1)
    pp.pprint(client.tm_set_skid_pool_size(eval(args[0]), eval(args[1]),))

elif cmd == 'tm_set_skid_pool_hysteresis':
    if len(args) != 2:
        print('tm_set_skid_pool_hysteresis requires 2 args')
        sys.exit(1)
    pp.pprint(client.tm_set_skid_pool_hysteresis(eval(args[0]), eval(args[1]),))

elif cmd == 'tm_set_negative_mirror_pool_size':
    if len(args) != 2:
        print('tm_set_negative_mirror_pool_size requires 2 args')
        sys.exit(1)
    pp.pprint(client.tm_set_negative_mirror_pool_size(eval(args[0]), eval(args[1]),))

elif cmd == 'tm_set_uc_cut_through_pool_size':
    if len(args) != 2:
        print('tm_set_uc_cut_through_pool_size requires 2 args')
        sys.exit(1)
    pp.pprint(client.tm_set_uc_cut_through_pool_size(eval(args[0]), eval(args[1]),))

elif cmd == 'tm_set_mc_cut_through_pool_size':
    if len(args) != 2:
        print('tm_set_mc_cut_through_pool_size requires 2 args')
        sys.exit(1)
    pp.pprint(client.tm_set_mc_cut_through_pool_size(eval(args[0]), eval(args[1]),))

elif cmd == 'tm_set_egress_pipe_limit':
    if len(args) != 3:
        print('tm_set_egress_pipe_limit requires 3 args')
        sys.exit(1)
    pp.pprint(client.tm_set_egress_pipe_limit(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'tm_set_egress_pipe_hysteresis':
    if len(args) != 3:
        print('tm_set_egress_pipe_hysteresis requires 3 args')
        sys.exit(1)
    pp.pprint(client.tm_set_egress_pipe_hysteresis(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'tm_set_ingress_port_drop_limit':
    if len(args) != 3:
        print('tm_set_ingress_port_drop_limit requires 3 args')
        sys.exit(1)
    pp.pprint(client.tm_set_ingress_port_drop_limit(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'tm_set_ingress_port_hysteresis':
    if len(args) != 3:
        print('tm_set_ingress_port_hysteresis requires 3 args')
        sys.exit(1)
    pp.pprint(client.tm_set_ingress_port_hysteresis(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'tm_set_port_uc_cut_through_limit':
    if len(args) != 3:
        print('tm_set_port_uc_cut_through_limit requires 3 args')
        sys.exit(1)
    pp.pprint(client.tm_set_port_uc_cut_through_limit(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'tm_set_port_flowcontrol_mode':
    if len(args) != 3:
        print('tm_set_port_flowcontrol_mode requires 3 args')
        sys.exit(1)
    pp.pprint(client.tm_set_port_flowcontrol_mode(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'tm_set_port_pfc_cos_mapping':
    if len(args) != 3:
        print('tm_set_port_pfc_cos_mapping requires 3 args')
        sys.exit(1)
    pp.pprint(client.tm_set_port_pfc_cos_mapping(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'tm_set_cpuport':
    if len(args) != 2:
        print('tm_set_cpuport requires 2 args')
        sys.exit(1)
    pp.pprint(client.tm_set_cpuport(eval(args[0]), eval(args[1]),))

elif cmd == 'tm_reset_cpuport':
    if len(args) != 1:
        print('tm_reset_cpuport requires 1 args')
        sys.exit(1)
    pp.pprint(client.tm_reset_cpuport(eval(args[0]),))

elif cmd == 'tm_set_q_sched_priority':
    if len(args) != 4:
        print('tm_set_q_sched_priority requires 4 args')
        sys.exit(1)
    pp.pprint(client.tm_set_q_sched_priority(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'tm_set_q_dwrr_weight':
    if len(args) != 4:
        print('tm_set_q_dwrr_weight requires 4 args')
        sys.exit(1)
    pp.pprint(client.tm_set_q_dwrr_weight(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'tm_set_q_shaping_rate':
    if len(args) != 6:
        print('tm_set_q_shaping_rate requires 6 args')
        sys.exit(1)
    pp.pprint(client.tm_set_q_shaping_rate(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]),))

elif cmd == 'tm_set_q_guaranteed_rate':
    if len(args) != 6:
        print('tm_set_q_guaranteed_rate requires 6 args')
        sys.exit(1)
    pp.pprint(client.tm_set_q_guaranteed_rate(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]),))

elif cmd == 'tm_set_q_remaining_bw_sched_priority':
    if len(args) != 4:
        print('tm_set_q_remaining_bw_sched_priority requires 4 args')
        sys.exit(1)
    pp.pprint(client.tm_set_q_remaining_bw_sched_priority(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'tm_sched_q_l1_set':
    if len(args) != 4:
        print('tm_sched_q_l1_set requires 4 args')
        sys.exit(1)
    pp.pprint(client.tm_sched_q_l1_set(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'tm_sched_q_l1_reset':
    if len(args) != 3:
        print('tm_sched_q_l1_reset requires 3 args')
        sys.exit(1)
    pp.pprint(client.tm_sched_q_l1_reset(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'tm_sched_l1_priority_set':
    if len(args) != 4:
        print('tm_sched_l1_priority_set requires 4 args')
        sys.exit(1)
    pp.pprint(client.tm_sched_l1_priority_set(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'tm_sched_l1_dwrr_weight_set':
    if len(args) != 4:
        print('tm_sched_l1_dwrr_weight_set requires 4 args')
        sys.exit(1)
    pp.pprint(client.tm_sched_l1_dwrr_weight_set(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'tm_sched_l1_shaping_rate_set':
    if len(args) != 6:
        print('tm_sched_l1_shaping_rate_set requires 6 args')
        sys.exit(1)
    pp.pprint(client.tm_sched_l1_shaping_rate_set(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]),))

elif cmd == 'tm_sched_l1_max_shaping_rate_enable':
    if len(args) != 3:
        print('tm_sched_l1_max_shaping_rate_enable requires 3 args')
        sys.exit(1)
    pp.pprint(client.tm_sched_l1_max_shaping_rate_enable(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'tm_sched_l1_max_shaping_rate_disable':
    if len(args) != 3:
        print('tm_sched_l1_max_shaping_rate_disable requires 3 args')
        sys.exit(1)
    pp.pprint(client.tm_sched_l1_max_shaping_rate_disable(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'tm_sched_l1_priority_prop_enable':
    if len(args) != 3:
        print('tm_sched_l1_priority_prop_enable requires 3 args')
        sys.exit(1)
    pp.pprint(client.tm_sched_l1_priority_prop_enable(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'tm_sched_l1_priority_prop_disable':
    if len(args) != 3:
        print('tm_sched_l1_priority_prop_disable requires 3 args')
        sys.exit(1)
    pp.pprint(client.tm_sched_l1_priority_prop_disable(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'tm_sched_l1_guaranteed_rate_set':
    if len(args) != 6:
        print('tm_sched_l1_guaranteed_rate_set requires 6 args')
        sys.exit(1)
    pp.pprint(client.tm_sched_l1_guaranteed_rate_set(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]),))

elif cmd == 'tm_sched_l1_remaining_bw_priority_set':
    if len(args) != 4:
        print('tm_sched_l1_remaining_bw_priority_set requires 4 args')
        sys.exit(1)
    pp.pprint(client.tm_sched_l1_remaining_bw_priority_set(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'tm_sched_l1_guaranteed_rate_enable':
    if len(args) != 3:
        print('tm_sched_l1_guaranteed_rate_enable requires 3 args')
        sys.exit(1)
    pp.pprint(client.tm_sched_l1_guaranteed_rate_enable(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'tm_sched_l1_guaranteed_rate_disable':
    if len(args) != 3:
        print('tm_sched_l1_guaranteed_rate_disable requires 3 args')
        sys.exit(1)
    pp.pprint(client.tm_sched_l1_guaranteed_rate_disable(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'tm_sched_l1_enable':
    if len(args) != 3:
        print('tm_sched_l1_enable requires 3 args')
        sys.exit(1)
    pp.pprint(client.tm_sched_l1_enable(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'tm_sched_l1_disable':
    if len(args) != 3:
        print('tm_sched_l1_disable requires 3 args')
        sys.exit(1)
    pp.pprint(client.tm_sched_l1_disable(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'tm_sched_l1_free':
    if len(args) != 3:
        print('tm_sched_l1_free requires 3 args')
        sys.exit(1)
    pp.pprint(client.tm_sched_l1_free(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'tm_set_port_shaping_rate':
    if len(args) != 5:
        print('tm_set_port_shaping_rate requires 5 args')
        sys.exit(1)
    pp.pprint(client.tm_set_port_shaping_rate(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'tm_set_shaper_pkt_ifg_compensation':
    if len(args) != 3:
        print('tm_set_shaper_pkt_ifg_compensation requires 3 args')
        sys.exit(1)
    pp.pprint(client.tm_set_shaper_pkt_ifg_compensation(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'tm_enable_q_sched':
    if len(args) != 3:
        print('tm_enable_q_sched requires 3 args')
        sys.exit(1)
    pp.pprint(client.tm_enable_q_sched(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'tm_disable_q_sched':
    if len(args) != 3:
        print('tm_disable_q_sched requires 3 args')
        sys.exit(1)
    pp.pprint(client.tm_disable_q_sched(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'tm_enable_port_shaping':
    if len(args) != 2:
        print('tm_enable_port_shaping requires 2 args')
        sys.exit(1)
    pp.pprint(client.tm_enable_port_shaping(eval(args[0]), eval(args[1]),))

elif cmd == 'tm_disable_port_shaping':
    if len(args) != 2:
        print('tm_disable_port_shaping requires 2 args')
        sys.exit(1)
    pp.pprint(client.tm_disable_port_shaping(eval(args[0]), eval(args[1]),))

elif cmd == 'tm_enable_port_sched':
    if len(args) != 3:
        print('tm_enable_port_sched requires 3 args')
        sys.exit(1)
    pp.pprint(client.tm_enable_port_sched(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'tm_disable_port_sched':
    if len(args) != 2:
        print('tm_disable_port_sched requires 2 args')
        sys.exit(1)
    pp.pprint(client.tm_disable_port_sched(eval(args[0]), eval(args[1]),))

elif cmd == 'tm_enable_q_max_shaping_rate':
    if len(args) != 3:
        print('tm_enable_q_max_shaping_rate requires 3 args')
        sys.exit(1)
    pp.pprint(client.tm_enable_q_max_shaping_rate(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'tm_disable_q_max_shaping_rate':
    if len(args) != 3:
        print('tm_disable_q_max_shaping_rate requires 3 args')
        sys.exit(1)
    pp.pprint(client.tm_disable_q_max_shaping_rate(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'tm_enable_q_min_shaping_rate':
    if len(args) != 3:
        print('tm_enable_q_min_shaping_rate requires 3 args')
        sys.exit(1)
    pp.pprint(client.tm_enable_q_min_shaping_rate(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'tm_disable_q_min_shaping_rate':
    if len(args) != 3:
        print('tm_disable_q_min_shaping_rate requires 3 args')
        sys.exit(1)
    pp.pprint(client.tm_disable_q_min_shaping_rate(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'tm_complete_operations':
    if len(args) != 1:
        print('tm_complete_operations requires 1 args')
        sys.exit(1)
    pp.pprint(client.tm_complete_operations(eval(args[0]),))

elif cmd == 'tm_set_timestamp_shift':
    if len(args) != 2:
        print('tm_set_timestamp_shift requires 2 args')
        sys.exit(1)
    pp.pprint(client.tm_set_timestamp_shift(eval(args[0]), eval(args[1]),))

elif cmd == 'tm_get_q_sched_priority':
    if len(args) != 3:
        print('tm_get_q_sched_priority requires 3 args')
        sys.exit(1)
    pp.pprint(client.tm_get_q_sched_priority(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'tm_get_q_dwrr_weight':
    if len(args) != 3:
        print('tm_get_q_dwrr_weight requires 3 args')
        sys.exit(1)
    pp.pprint(client.tm_get_q_dwrr_weight(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'tm_get_q_shaping_rate':
    if len(args) != 3:
        print('tm_get_q_shaping_rate requires 3 args')
        sys.exit(1)
    pp.pprint(client.tm_get_q_shaping_rate(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'tm_get_q_guaranteed_rate':
    if len(args) != 3:
        print('tm_get_q_guaranteed_rate requires 3 args')
        sys.exit(1)
    pp.pprint(client.tm_get_q_guaranteed_rate(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'tm_get_q_remaining_bw_sched_priority':
    if len(args) != 3:
        print('tm_get_q_remaining_bw_sched_priority requires 3 args')
        sys.exit(1)
    pp.pprint(client.tm_get_q_remaining_bw_sched_priority(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'tm_get_port_shaping_rate':
    if len(args) != 2:
        print('tm_get_port_shaping_rate requires 2 args')
        sys.exit(1)
    pp.pprint(client.tm_get_port_shaping_rate(eval(args[0]), eval(args[1]),))

elif cmd == 'tm_get_shaper_pkt_ifg_compensation':
    if len(args) != 2:
        print('tm_get_shaper_pkt_ifg_compensation requires 2 args')
        sys.exit(1)
    pp.pprint(client.tm_get_shaper_pkt_ifg_compensation(eval(args[0]), eval(args[1]),))

elif cmd == 'tm_get_egress_pipe_limit':
    if len(args) != 2:
        print('tm_get_egress_pipe_limit requires 2 args')
        sys.exit(1)
    pp.pprint(client.tm_get_egress_pipe_limit(eval(args[0]), eval(args[1]),))

elif cmd == 'tm_get_egress_pipe_hysteresis':
    if len(args) != 2:
        print('tm_get_egress_pipe_hysteresis requires 2 args')
        sys.exit(1)
    pp.pprint(client.tm_get_egress_pipe_hysteresis(eval(args[0]), eval(args[1]),))

elif cmd == 'tm_get_port_q_mapping':
    if len(args) != 2:
        print('tm_get_port_q_mapping requires 2 args')
        sys.exit(1)
    pp.pprint(client.tm_get_port_q_mapping(eval(args[0]), eval(args[1]),))

elif cmd == 'tm_get_q_app_pool_usage':
    if len(args) != 3:
        print('tm_get_q_app_pool_usage requires 3 args')
        sys.exit(1)
    pp.pprint(client.tm_get_q_app_pool_usage(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'tm_get_q_guaranteed_min_limit':
    if len(args) != 3:
        print('tm_get_q_guaranteed_min_limit requires 3 args')
        sys.exit(1)
    pp.pprint(client.tm_get_q_guaranteed_min_limit(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'tm_get_q_color_limit':
    if len(args) != 4:
        print('tm_get_q_color_limit requires 4 args')
        sys.exit(1)
    pp.pprint(client.tm_get_q_color_limit(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'tm_get_q_color_hysteresis':
    if len(args) != 4:
        print('tm_get_q_color_hysteresis requires 4 args')
        sys.exit(1)
    pp.pprint(client.tm_get_q_color_hysteresis(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'tm_get_port_uc_cut_through_limit':
    if len(args) != 2:
        print('tm_get_port_uc_cut_through_limit requires 2 args')
        sys.exit(1)
    pp.pprint(client.tm_get_port_uc_cut_through_limit(eval(args[0]), eval(args[1]),))

elif cmd == 'tm_get_total_ppg':
    if len(args) != 2:
        print('tm_get_total_ppg requires 2 args')
        sys.exit(1)
    pp.pprint(client.tm_get_total_ppg(eval(args[0]), eval(args[1]),))

elif cmd == 'tm_get_unused_ppg_count':
    if len(args) != 2:
        print('tm_get_unused_ppg_count requires 2 args')
        sys.exit(1)
    pp.pprint(client.tm_get_unused_ppg_count(eval(args[0]), eval(args[1]),))

elif cmd == 'tm_get_ppg_app_pool_usage':
    if len(args) != 3:
        print('tm_get_ppg_app_pool_usage requires 3 args')
        sys.exit(1)
    pp.pprint(client.tm_get_ppg_app_pool_usage(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'tm_get_ppg_guaranteed_min_limit':
    if len(args) != 2:
        print('tm_get_ppg_guaranteed_min_limit requires 2 args')
        sys.exit(1)
    pp.pprint(client.tm_get_ppg_guaranteed_min_limit(eval(args[0]), eval(args[1]),))

elif cmd == 'tm_get_ppg_skid_limit':
    if len(args) != 2:
        print('tm_get_ppg_skid_limit requires 2 args')
        sys.exit(1)
    pp.pprint(client.tm_get_ppg_skid_limit(eval(args[0]), eval(args[1]),))

elif cmd == 'tm_get_ppg_guaranteed_min_skid_hysteresis':
    if len(args) != 2:
        print('tm_get_ppg_guaranteed_min_skid_hysteresis requires 2 args')
        sys.exit(1)
    pp.pprint(client.tm_get_ppg_guaranteed_min_skid_hysteresis(eval(args[0]), eval(args[1]),))

elif cmd == 'tm_get_app_pool_size':
    if len(args) != 2:
        print('tm_get_app_pool_size requires 2 args')
        sys.exit(1)
    pp.pprint(client.tm_get_app_pool_size(eval(args[0]), eval(args[1]),))

elif cmd == 'tm_get_app_pool_color_drop_limit':
    if len(args) != 3:
        print('tm_get_app_pool_color_drop_limit requires 3 args')
        sys.exit(1)
    pp.pprint(client.tm_get_app_pool_color_drop_limit(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'tm_get_app_pool_color_drop_hysteresis':
    if len(args) != 2:
        print('tm_get_app_pool_color_drop_hysteresis requires 2 args')
        sys.exit(1)
    pp.pprint(client.tm_get_app_pool_color_drop_hysteresis(eval(args[0]), eval(args[1]),))

elif cmd == 'tm_get_app_pool_pfc_limit':
    if len(args) != 3:
        print('tm_get_app_pool_pfc_limit requires 3 args')
        sys.exit(1)
    pp.pprint(client.tm_get_app_pool_pfc_limit(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'tm_get_skid_pool_size':
    if len(args) != 1:
        print('tm_get_skid_pool_size requires 1 args')
        sys.exit(1)
    pp.pprint(client.tm_get_skid_pool_size(eval(args[0]),))

elif cmd == 'tm_get_skid_pool_hysteresis':
    if len(args) != 1:
        print('tm_get_skid_pool_hysteresis requires 1 args')
        sys.exit(1)
    pp.pprint(client.tm_get_skid_pool_hysteresis(eval(args[0]),))

elif cmd == 'tm_get_negative_mirror_pool_size':
    if len(args) != 1:
        print('tm_get_negative_mirror_pool_size requires 1 args')
        sys.exit(1)
    pp.pprint(client.tm_get_negative_mirror_pool_size(eval(args[0]),))

elif cmd == 'tm_get_uc_cut_through_pool_size':
    if len(args) != 2:
        print('tm_get_uc_cut_through_pool_size requires 2 args')
        sys.exit(1)
    pp.pprint(client.tm_get_uc_cut_through_pool_size(eval(args[0]), eval(args[1]),))

elif cmd == 'tm_get_mc_cut_through_pool_size':
    if len(args) != 2:
        print('tm_get_mc_cut_through_pool_size requires 2 args')
        sys.exit(1)
    pp.pprint(client.tm_get_mc_cut_through_pool_size(eval(args[0]), eval(args[1]),))

elif cmd == 'tm_get_ingress_port_drop_limit':
    if len(args) != 2:
        print('tm_get_ingress_port_drop_limit requires 2 args')
        sys.exit(1)
    pp.pprint(client.tm_get_ingress_port_drop_limit(eval(args[0]), eval(args[1]),))

elif cmd == 'tm_get_ingress_port_hysteresis':
    if len(args) != 2:
        print('tm_get_ingress_port_hysteresis requires 2 args')
        sys.exit(1)
    pp.pprint(client.tm_get_ingress_port_hysteresis(eval(args[0]), eval(args[1]),))

elif cmd == 'tm_get_port_flowcontrol_mode':
    if len(args) != 2:
        print('tm_get_port_flowcontrol_mode requires 2 args')
        sys.exit(1)
    pp.pprint(client.tm_get_port_flowcontrol_mode(eval(args[0]), eval(args[1]),))

elif cmd == 'tm_get_port_pfc_cos_mapping':
    if len(args) != 2:
        print('tm_get_port_pfc_cos_mapping requires 2 args')
        sys.exit(1)
    pp.pprint(client.tm_get_port_pfc_cos_mapping(eval(args[0]), eval(args[1]),))

elif cmd == 'tm_get_ppg_icos_mapping':
    if len(args) != 2:
        print('tm_get_ppg_icos_mapping requires 2 args')
        sys.exit(1)
    pp.pprint(client.tm_get_ppg_icos_mapping(eval(args[0]), eval(args[1]),))

elif cmd == 'tm_get_timestamp_shift':
    if len(args) != 1:
        print('tm_get_timestamp_shift requires 1 args')
        sys.exit(1)
    pp.pprint(client.tm_get_timestamp_shift(eval(args[0]),))

elif cmd == 'tm_get_ppg_drop':
    if len(args) != 3:
        print('tm_get_ppg_drop requires 3 args')
        sys.exit(1)
    pp.pprint(client.tm_get_ppg_drop(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'tm_get_q_drop':
    if len(args) != 4:
        print('tm_get_q_drop requires 4 args')
        sys.exit(1)
    pp.pprint(client.tm_get_q_drop(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'tm_get_ppg_usage':
    if len(args) != 3:
        print('tm_get_ppg_usage requires 3 args')
        sys.exit(1)
    pp.pprint(client.tm_get_ppg_usage(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'tm_get_q_usage':
    if len(args) != 4:
        print('tm_get_q_usage requires 4 args')
        sys.exit(1)
    pp.pprint(client.tm_get_q_usage(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'tm_get_pool_usage':
    if len(args) != 2:
        print('tm_get_pool_usage requires 2 args')
        sys.exit(1)
    pp.pprint(client.tm_get_pool_usage(eval(args[0]), eval(args[1]),))

elif cmd == 'tm_set_ut_mode_as_model':
    if len(args) != 1:
        print('tm_set_ut_mode_as_model requires 1 args')
        sys.exit(1)
    pp.pprint(client.tm_set_ut_mode_as_model(eval(args[0]),))

elif cmd == 'tm_set_ut_mode_as_asic':
    if len(args) != 1:
        print('tm_set_ut_mode_as_asic requires 1 args')
        sys.exit(1)
    pp.pprint(client.tm_set_ut_mode_as_asic(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
