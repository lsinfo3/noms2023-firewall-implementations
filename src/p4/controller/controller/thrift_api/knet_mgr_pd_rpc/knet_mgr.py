#
# Autogenerated by Thrift Compiler (0.14.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:package_prefix=controller.thrift_api.
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    def knet_cpuif_ndev_add(self, cpuif_netdev_name):
        """
        Parameters:
         - cpuif_netdev_name

        """
        pass

    def knet_cpuif_ndev_delete(self, knet_cpuif_id):
        """
        Parameters:
         - knet_cpuif_id

        """
        pass

    def knet_hostif_kndev_add(self, knet_cpuif_id, hostif_name):
        """
        Parameters:
         - knet_cpuif_id
         - hostif_name

        """
        pass

    def knet_hostif_kndev_delete(self, knet_cpuif_id, knet_hostif_id):
        """
        Parameters:
         - knet_cpuif_id
         - knet_hostif_id

        """
        pass

    def knet_rx_filter_add(self, knet_cpuif_id, rx_filter):
        """
        Parameters:
         - knet_cpuif_id
         - rx_filter

        """
        pass

    def knet_rx_filter_delete(self, knet_cpuif_id, filter_id):
        """
        Parameters:
         - knet_cpuif_id
         - filter_id

        """
        pass

    def knet_rx_filter_get(self, knet_cpuif_id, filter_id, rx_mutation_count):
        """
        Parameters:
         - knet_cpuif_id
         - filter_id
         - rx_mutation_count

        """
        pass

    def knet_tx_action_add(self, knet_cpuif_id, knet_hostif_id, tx_action):
        """
        Parameters:
         - knet_cpuif_id
         - knet_hostif_id
         - tx_action

        """
        pass

    def knet_tx_action_delete(self, knet_cpuif_id, knet_hostif_id):
        """
        Parameters:
         - knet_cpuif_id
         - knet_hostif_id

        """
        pass

    def knet_get_cpuif_cnt(self):
        pass

    def knet_get_hostif_cnt(self, knet_cpuif_id):
        """
        Parameters:
         - knet_cpuif_id

        """
        pass

    def knet_get_rx_filter_cnt(self, knet_cpuif_id):
        """
        Parameters:
         - knet_cpuif_id

        """
        pass

    def knet_get_rx_mutation_cnt(self, knet_cpuif_id, filter_id):
        """
        Parameters:
         - knet_cpuif_id
         - filter_id

        """
        pass

    def knet_get_tx_mutation_cnt(self, knet_cpuif_id, hostif_id):
        """
        Parameters:
         - knet_cpuif_id
         - hostif_id

        """
        pass

    def knet_rx_filter_list_get(self, knet_cpuif_id, filter_count):
        """
        Parameters:
         - knet_cpuif_id
         - filter_count

        """
        pass

    def knet_cpuif_list_get(self, cpuif_count):
        """
        Parameters:
         - cpuif_count

        """
        pass

    def knet_hostif_list_get(self, knet_cpuif_id, hostif_count):
        """
        Parameters:
         - knet_cpuif_id
         - hostif_count

        """
        pass

    def knet_tx_action_get(self, knet_cpuif_id, knet_hostif_id, tx_mutation_count):
        """
        Parameters:
         - knet_cpuif_id
         - knet_hostif_id
         - tx_mutation_count

        """
        pass

    def knet_module_is_inited(self):
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def knet_cpuif_ndev_add(self, cpuif_netdev_name):
        """
        Parameters:
         - cpuif_netdev_name

        """
        self.send_knet_cpuif_ndev_add(cpuif_netdev_name)
        return self.recv_knet_cpuif_ndev_add()

    def send_knet_cpuif_ndev_add(self, cpuif_netdev_name):
        self._oprot.writeMessageBegin('knet_cpuif_ndev_add', TMessageType.CALL, self._seqid)
        args = knet_cpuif_ndev_add_args()
        args.cpuif_netdev_name = cpuif_netdev_name
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_knet_cpuif_ndev_add(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = knet_cpuif_ndev_add_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "knet_cpuif_ndev_add failed: unknown result")

    def knet_cpuif_ndev_delete(self, knet_cpuif_id):
        """
        Parameters:
         - knet_cpuif_id

        """
        self.send_knet_cpuif_ndev_delete(knet_cpuif_id)
        return self.recv_knet_cpuif_ndev_delete()

    def send_knet_cpuif_ndev_delete(self, knet_cpuif_id):
        self._oprot.writeMessageBegin('knet_cpuif_ndev_delete', TMessageType.CALL, self._seqid)
        args = knet_cpuif_ndev_delete_args()
        args.knet_cpuif_id = knet_cpuif_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_knet_cpuif_ndev_delete(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = knet_cpuif_ndev_delete_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "knet_cpuif_ndev_delete failed: unknown result")

    def knet_hostif_kndev_add(self, knet_cpuif_id, hostif_name):
        """
        Parameters:
         - knet_cpuif_id
         - hostif_name

        """
        self.send_knet_hostif_kndev_add(knet_cpuif_id, hostif_name)
        return self.recv_knet_hostif_kndev_add()

    def send_knet_hostif_kndev_add(self, knet_cpuif_id, hostif_name):
        self._oprot.writeMessageBegin('knet_hostif_kndev_add', TMessageType.CALL, self._seqid)
        args = knet_hostif_kndev_add_args()
        args.knet_cpuif_id = knet_cpuif_id
        args.hostif_name = hostif_name
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_knet_hostif_kndev_add(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = knet_hostif_kndev_add_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "knet_hostif_kndev_add failed: unknown result")

    def knet_hostif_kndev_delete(self, knet_cpuif_id, knet_hostif_id):
        """
        Parameters:
         - knet_cpuif_id
         - knet_hostif_id

        """
        self.send_knet_hostif_kndev_delete(knet_cpuif_id, knet_hostif_id)
        return self.recv_knet_hostif_kndev_delete()

    def send_knet_hostif_kndev_delete(self, knet_cpuif_id, knet_hostif_id):
        self._oprot.writeMessageBegin('knet_hostif_kndev_delete', TMessageType.CALL, self._seqid)
        args = knet_hostif_kndev_delete_args()
        args.knet_cpuif_id = knet_cpuif_id
        args.knet_hostif_id = knet_hostif_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_knet_hostif_kndev_delete(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = knet_hostif_kndev_delete_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "knet_hostif_kndev_delete failed: unknown result")

    def knet_rx_filter_add(self, knet_cpuif_id, rx_filter):
        """
        Parameters:
         - knet_cpuif_id
         - rx_filter

        """
        self.send_knet_rx_filter_add(knet_cpuif_id, rx_filter)
        return self.recv_knet_rx_filter_add()

    def send_knet_rx_filter_add(self, knet_cpuif_id, rx_filter):
        self._oprot.writeMessageBegin('knet_rx_filter_add', TMessageType.CALL, self._seqid)
        args = knet_rx_filter_add_args()
        args.knet_cpuif_id = knet_cpuif_id
        args.rx_filter = rx_filter
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_knet_rx_filter_add(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = knet_rx_filter_add_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "knet_rx_filter_add failed: unknown result")

    def knet_rx_filter_delete(self, knet_cpuif_id, filter_id):
        """
        Parameters:
         - knet_cpuif_id
         - filter_id

        """
        self.send_knet_rx_filter_delete(knet_cpuif_id, filter_id)
        return self.recv_knet_rx_filter_delete()

    def send_knet_rx_filter_delete(self, knet_cpuif_id, filter_id):
        self._oprot.writeMessageBegin('knet_rx_filter_delete', TMessageType.CALL, self._seqid)
        args = knet_rx_filter_delete_args()
        args.knet_cpuif_id = knet_cpuif_id
        args.filter_id = filter_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_knet_rx_filter_delete(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = knet_rx_filter_delete_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "knet_rx_filter_delete failed: unknown result")

    def knet_rx_filter_get(self, knet_cpuif_id, filter_id, rx_mutation_count):
        """
        Parameters:
         - knet_cpuif_id
         - filter_id
         - rx_mutation_count

        """
        self.send_knet_rx_filter_get(knet_cpuif_id, filter_id, rx_mutation_count)
        return self.recv_knet_rx_filter_get()

    def send_knet_rx_filter_get(self, knet_cpuif_id, filter_id, rx_mutation_count):
        self._oprot.writeMessageBegin('knet_rx_filter_get', TMessageType.CALL, self._seqid)
        args = knet_rx_filter_get_args()
        args.knet_cpuif_id = knet_cpuif_id
        args.filter_id = filter_id
        args.rx_mutation_count = rx_mutation_count
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_knet_rx_filter_get(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = knet_rx_filter_get_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "knet_rx_filter_get failed: unknown result")

    def knet_tx_action_add(self, knet_cpuif_id, knet_hostif_id, tx_action):
        """
        Parameters:
         - knet_cpuif_id
         - knet_hostif_id
         - tx_action

        """
        self.send_knet_tx_action_add(knet_cpuif_id, knet_hostif_id, tx_action)
        return self.recv_knet_tx_action_add()

    def send_knet_tx_action_add(self, knet_cpuif_id, knet_hostif_id, tx_action):
        self._oprot.writeMessageBegin('knet_tx_action_add', TMessageType.CALL, self._seqid)
        args = knet_tx_action_add_args()
        args.knet_cpuif_id = knet_cpuif_id
        args.knet_hostif_id = knet_hostif_id
        args.tx_action = tx_action
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_knet_tx_action_add(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = knet_tx_action_add_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "knet_tx_action_add failed: unknown result")

    def knet_tx_action_delete(self, knet_cpuif_id, knet_hostif_id):
        """
        Parameters:
         - knet_cpuif_id
         - knet_hostif_id

        """
        self.send_knet_tx_action_delete(knet_cpuif_id, knet_hostif_id)
        return self.recv_knet_tx_action_delete()

    def send_knet_tx_action_delete(self, knet_cpuif_id, knet_hostif_id):
        self._oprot.writeMessageBegin('knet_tx_action_delete', TMessageType.CALL, self._seqid)
        args = knet_tx_action_delete_args()
        args.knet_cpuif_id = knet_cpuif_id
        args.knet_hostif_id = knet_hostif_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_knet_tx_action_delete(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = knet_tx_action_delete_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "knet_tx_action_delete failed: unknown result")

    def knet_get_cpuif_cnt(self):
        self.send_knet_get_cpuif_cnt()
        return self.recv_knet_get_cpuif_cnt()

    def send_knet_get_cpuif_cnt(self):
        self._oprot.writeMessageBegin('knet_get_cpuif_cnt', TMessageType.CALL, self._seqid)
        args = knet_get_cpuif_cnt_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_knet_get_cpuif_cnt(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = knet_get_cpuif_cnt_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "knet_get_cpuif_cnt failed: unknown result")

    def knet_get_hostif_cnt(self, knet_cpuif_id):
        """
        Parameters:
         - knet_cpuif_id

        """
        self.send_knet_get_hostif_cnt(knet_cpuif_id)
        return self.recv_knet_get_hostif_cnt()

    def send_knet_get_hostif_cnt(self, knet_cpuif_id):
        self._oprot.writeMessageBegin('knet_get_hostif_cnt', TMessageType.CALL, self._seqid)
        args = knet_get_hostif_cnt_args()
        args.knet_cpuif_id = knet_cpuif_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_knet_get_hostif_cnt(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = knet_get_hostif_cnt_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "knet_get_hostif_cnt failed: unknown result")

    def knet_get_rx_filter_cnt(self, knet_cpuif_id):
        """
        Parameters:
         - knet_cpuif_id

        """
        self.send_knet_get_rx_filter_cnt(knet_cpuif_id)
        return self.recv_knet_get_rx_filter_cnt()

    def send_knet_get_rx_filter_cnt(self, knet_cpuif_id):
        self._oprot.writeMessageBegin('knet_get_rx_filter_cnt', TMessageType.CALL, self._seqid)
        args = knet_get_rx_filter_cnt_args()
        args.knet_cpuif_id = knet_cpuif_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_knet_get_rx_filter_cnt(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = knet_get_rx_filter_cnt_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "knet_get_rx_filter_cnt failed: unknown result")

    def knet_get_rx_mutation_cnt(self, knet_cpuif_id, filter_id):
        """
        Parameters:
         - knet_cpuif_id
         - filter_id

        """
        self.send_knet_get_rx_mutation_cnt(knet_cpuif_id, filter_id)
        return self.recv_knet_get_rx_mutation_cnt()

    def send_knet_get_rx_mutation_cnt(self, knet_cpuif_id, filter_id):
        self._oprot.writeMessageBegin('knet_get_rx_mutation_cnt', TMessageType.CALL, self._seqid)
        args = knet_get_rx_mutation_cnt_args()
        args.knet_cpuif_id = knet_cpuif_id
        args.filter_id = filter_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_knet_get_rx_mutation_cnt(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = knet_get_rx_mutation_cnt_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "knet_get_rx_mutation_cnt failed: unknown result")

    def knet_get_tx_mutation_cnt(self, knet_cpuif_id, hostif_id):
        """
        Parameters:
         - knet_cpuif_id
         - hostif_id

        """
        self.send_knet_get_tx_mutation_cnt(knet_cpuif_id, hostif_id)
        return self.recv_knet_get_tx_mutation_cnt()

    def send_knet_get_tx_mutation_cnt(self, knet_cpuif_id, hostif_id):
        self._oprot.writeMessageBegin('knet_get_tx_mutation_cnt', TMessageType.CALL, self._seqid)
        args = knet_get_tx_mutation_cnt_args()
        args.knet_cpuif_id = knet_cpuif_id
        args.hostif_id = hostif_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_knet_get_tx_mutation_cnt(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = knet_get_tx_mutation_cnt_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "knet_get_tx_mutation_cnt failed: unknown result")

    def knet_rx_filter_list_get(self, knet_cpuif_id, filter_count):
        """
        Parameters:
         - knet_cpuif_id
         - filter_count

        """
        self.send_knet_rx_filter_list_get(knet_cpuif_id, filter_count)
        return self.recv_knet_rx_filter_list_get()

    def send_knet_rx_filter_list_get(self, knet_cpuif_id, filter_count):
        self._oprot.writeMessageBegin('knet_rx_filter_list_get', TMessageType.CALL, self._seqid)
        args = knet_rx_filter_list_get_args()
        args.knet_cpuif_id = knet_cpuif_id
        args.filter_count = filter_count
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_knet_rx_filter_list_get(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = knet_rx_filter_list_get_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "knet_rx_filter_list_get failed: unknown result")

    def knet_cpuif_list_get(self, cpuif_count):
        """
        Parameters:
         - cpuif_count

        """
        self.send_knet_cpuif_list_get(cpuif_count)
        return self.recv_knet_cpuif_list_get()

    def send_knet_cpuif_list_get(self, cpuif_count):
        self._oprot.writeMessageBegin('knet_cpuif_list_get', TMessageType.CALL, self._seqid)
        args = knet_cpuif_list_get_args()
        args.cpuif_count = cpuif_count
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_knet_cpuif_list_get(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = knet_cpuif_list_get_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "knet_cpuif_list_get failed: unknown result")

    def knet_hostif_list_get(self, knet_cpuif_id, hostif_count):
        """
        Parameters:
         - knet_cpuif_id
         - hostif_count

        """
        self.send_knet_hostif_list_get(knet_cpuif_id, hostif_count)
        return self.recv_knet_hostif_list_get()

    def send_knet_hostif_list_get(self, knet_cpuif_id, hostif_count):
        self._oprot.writeMessageBegin('knet_hostif_list_get', TMessageType.CALL, self._seqid)
        args = knet_hostif_list_get_args()
        args.knet_cpuif_id = knet_cpuif_id
        args.hostif_count = hostif_count
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_knet_hostif_list_get(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = knet_hostif_list_get_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "knet_hostif_list_get failed: unknown result")

    def knet_tx_action_get(self, knet_cpuif_id, knet_hostif_id, tx_mutation_count):
        """
        Parameters:
         - knet_cpuif_id
         - knet_hostif_id
         - tx_mutation_count

        """
        self.send_knet_tx_action_get(knet_cpuif_id, knet_hostif_id, tx_mutation_count)
        return self.recv_knet_tx_action_get()

    def send_knet_tx_action_get(self, knet_cpuif_id, knet_hostif_id, tx_mutation_count):
        self._oprot.writeMessageBegin('knet_tx_action_get', TMessageType.CALL, self._seqid)
        args = knet_tx_action_get_args()
        args.knet_cpuif_id = knet_cpuif_id
        args.knet_hostif_id = knet_hostif_id
        args.tx_mutation_count = tx_mutation_count
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_knet_tx_action_get(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = knet_tx_action_get_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "knet_tx_action_get failed: unknown result")

    def knet_module_is_inited(self):
        self.send_knet_module_is_inited()
        return self.recv_knet_module_is_inited()

    def send_knet_module_is_inited(self):
        self._oprot.writeMessageBegin('knet_module_is_inited', TMessageType.CALL, self._seqid)
        args = knet_module_is_inited_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_knet_module_is_inited(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = knet_module_is_inited_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "knet_module_is_inited failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["knet_cpuif_ndev_add"] = Processor.process_knet_cpuif_ndev_add
        self._processMap["knet_cpuif_ndev_delete"] = Processor.process_knet_cpuif_ndev_delete
        self._processMap["knet_hostif_kndev_add"] = Processor.process_knet_hostif_kndev_add
        self._processMap["knet_hostif_kndev_delete"] = Processor.process_knet_hostif_kndev_delete
        self._processMap["knet_rx_filter_add"] = Processor.process_knet_rx_filter_add
        self._processMap["knet_rx_filter_delete"] = Processor.process_knet_rx_filter_delete
        self._processMap["knet_rx_filter_get"] = Processor.process_knet_rx_filter_get
        self._processMap["knet_tx_action_add"] = Processor.process_knet_tx_action_add
        self._processMap["knet_tx_action_delete"] = Processor.process_knet_tx_action_delete
        self._processMap["knet_get_cpuif_cnt"] = Processor.process_knet_get_cpuif_cnt
        self._processMap["knet_get_hostif_cnt"] = Processor.process_knet_get_hostif_cnt
        self._processMap["knet_get_rx_filter_cnt"] = Processor.process_knet_get_rx_filter_cnt
        self._processMap["knet_get_rx_mutation_cnt"] = Processor.process_knet_get_rx_mutation_cnt
        self._processMap["knet_get_tx_mutation_cnt"] = Processor.process_knet_get_tx_mutation_cnt
        self._processMap["knet_rx_filter_list_get"] = Processor.process_knet_rx_filter_list_get
        self._processMap["knet_cpuif_list_get"] = Processor.process_knet_cpuif_list_get
        self._processMap["knet_hostif_list_get"] = Processor.process_knet_hostif_list_get
        self._processMap["knet_tx_action_get"] = Processor.process_knet_tx_action_get
        self._processMap["knet_module_is_inited"] = Processor.process_knet_module_is_inited
        self._on_message_begin = None

    def on_message_begin(self, func):
        self._on_message_begin = func

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if self._on_message_begin:
            self._on_message_begin(name, type, seqid)
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_knet_cpuif_ndev_add(self, seqid, iprot, oprot):
        args = knet_cpuif_ndev_add_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = knet_cpuif_ndev_add_result()
        try:
            result.success = self._handler.knet_cpuif_ndev_add(args.cpuif_netdev_name)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidKnetOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("knet_cpuif_ndev_add", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_knet_cpuif_ndev_delete(self, seqid, iprot, oprot):
        args = knet_cpuif_ndev_delete_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = knet_cpuif_ndev_delete_result()
        try:
            result.success = self._handler.knet_cpuif_ndev_delete(args.knet_cpuif_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidKnetOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("knet_cpuif_ndev_delete", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_knet_hostif_kndev_add(self, seqid, iprot, oprot):
        args = knet_hostif_kndev_add_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = knet_hostif_kndev_add_result()
        try:
            result.success = self._handler.knet_hostif_kndev_add(args.knet_cpuif_id, args.hostif_name)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidKnetOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("knet_hostif_kndev_add", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_knet_hostif_kndev_delete(self, seqid, iprot, oprot):
        args = knet_hostif_kndev_delete_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = knet_hostif_kndev_delete_result()
        try:
            result.success = self._handler.knet_hostif_kndev_delete(args.knet_cpuif_id, args.knet_hostif_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidKnetOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("knet_hostif_kndev_delete", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_knet_rx_filter_add(self, seqid, iprot, oprot):
        args = knet_rx_filter_add_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = knet_rx_filter_add_result()
        try:
            result.success = self._handler.knet_rx_filter_add(args.knet_cpuif_id, args.rx_filter)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidKnetOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("knet_rx_filter_add", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_knet_rx_filter_delete(self, seqid, iprot, oprot):
        args = knet_rx_filter_delete_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = knet_rx_filter_delete_result()
        try:
            result.success = self._handler.knet_rx_filter_delete(args.knet_cpuif_id, args.filter_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidKnetOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("knet_rx_filter_delete", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_knet_rx_filter_get(self, seqid, iprot, oprot):
        args = knet_rx_filter_get_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = knet_rx_filter_get_result()
        try:
            result.success = self._handler.knet_rx_filter_get(args.knet_cpuif_id, args.filter_id, args.rx_mutation_count)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidKnetOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("knet_rx_filter_get", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_knet_tx_action_add(self, seqid, iprot, oprot):
        args = knet_tx_action_add_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = knet_tx_action_add_result()
        try:
            result.success = self._handler.knet_tx_action_add(args.knet_cpuif_id, args.knet_hostif_id, args.tx_action)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidKnetOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("knet_tx_action_add", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_knet_tx_action_delete(self, seqid, iprot, oprot):
        args = knet_tx_action_delete_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = knet_tx_action_delete_result()
        try:
            result.success = self._handler.knet_tx_action_delete(args.knet_cpuif_id, args.knet_hostif_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidKnetOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("knet_tx_action_delete", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_knet_get_cpuif_cnt(self, seqid, iprot, oprot):
        args = knet_get_cpuif_cnt_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = knet_get_cpuif_cnt_result()
        try:
            result.success = self._handler.knet_get_cpuif_cnt()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidKnetOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("knet_get_cpuif_cnt", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_knet_get_hostif_cnt(self, seqid, iprot, oprot):
        args = knet_get_hostif_cnt_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = knet_get_hostif_cnt_result()
        try:
            result.success = self._handler.knet_get_hostif_cnt(args.knet_cpuif_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidKnetOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("knet_get_hostif_cnt", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_knet_get_rx_filter_cnt(self, seqid, iprot, oprot):
        args = knet_get_rx_filter_cnt_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = knet_get_rx_filter_cnt_result()
        try:
            result.success = self._handler.knet_get_rx_filter_cnt(args.knet_cpuif_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidKnetOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("knet_get_rx_filter_cnt", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_knet_get_rx_mutation_cnt(self, seqid, iprot, oprot):
        args = knet_get_rx_mutation_cnt_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = knet_get_rx_mutation_cnt_result()
        try:
            result.success = self._handler.knet_get_rx_mutation_cnt(args.knet_cpuif_id, args.filter_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidKnetOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("knet_get_rx_mutation_cnt", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_knet_get_tx_mutation_cnt(self, seqid, iprot, oprot):
        args = knet_get_tx_mutation_cnt_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = knet_get_tx_mutation_cnt_result()
        try:
            result.success = self._handler.knet_get_tx_mutation_cnt(args.knet_cpuif_id, args.hostif_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidKnetOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("knet_get_tx_mutation_cnt", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_knet_rx_filter_list_get(self, seqid, iprot, oprot):
        args = knet_rx_filter_list_get_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = knet_rx_filter_list_get_result()
        try:
            result.success = self._handler.knet_rx_filter_list_get(args.knet_cpuif_id, args.filter_count)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidKnetOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("knet_rx_filter_list_get", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_knet_cpuif_list_get(self, seqid, iprot, oprot):
        args = knet_cpuif_list_get_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = knet_cpuif_list_get_result()
        try:
            result.success = self._handler.knet_cpuif_list_get(args.cpuif_count)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidKnetOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("knet_cpuif_list_get", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_knet_hostif_list_get(self, seqid, iprot, oprot):
        args = knet_hostif_list_get_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = knet_hostif_list_get_result()
        try:
            result.success = self._handler.knet_hostif_list_get(args.knet_cpuif_id, args.hostif_count)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidKnetOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("knet_hostif_list_get", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_knet_tx_action_get(self, seqid, iprot, oprot):
        args = knet_tx_action_get_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = knet_tx_action_get_result()
        try:
            result.success = self._handler.knet_tx_action_get(args.knet_cpuif_id, args.knet_hostif_id, args.tx_mutation_count)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidKnetOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("knet_tx_action_get", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_knet_module_is_inited(self, seqid, iprot, oprot):
        args = knet_module_is_inited_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = knet_module_is_inited_result()
        try:
            result.success = self._handler.knet_module_is_inited()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("knet_module_is_inited", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class knet_cpuif_ndev_add_args(object):
    """
    Attributes:
     - cpuif_netdev_name

    """


    def __init__(self, cpuif_netdev_name=None,):
        self.cpuif_netdev_name = cpuif_netdev_name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.cpuif_netdev_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('knet_cpuif_ndev_add_args')
        if self.cpuif_netdev_name is not None:
            oprot.writeFieldBegin('cpuif_netdev_name', TType.STRING, 1)
            oprot.writeString(self.cpuif_netdev_name.encode('utf-8') if sys.version_info[0] == 2 else self.cpuif_netdev_name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(knet_cpuif_ndev_add_args)
knet_cpuif_ndev_add_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'cpuif_netdev_name', 'UTF8', None, ),  # 1
)


class knet_cpuif_ndev_add_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = knet_cpuif_res_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidKnetOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('knet_cpuif_ndev_add_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(knet_cpuif_ndev_add_result)
knet_cpuif_ndev_add_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [knet_cpuif_res_t, None], None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidKnetOperation, None], None, ),  # 1
)


class knet_cpuif_ndev_delete_args(object):
    """
    Attributes:
     - knet_cpuif_id

    """


    def __init__(self, knet_cpuif_id=None,):
        self.knet_cpuif_id = knet_cpuif_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.knet_cpuif_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('knet_cpuif_ndev_delete_args')
        if self.knet_cpuif_id is not None:
            oprot.writeFieldBegin('knet_cpuif_id', TType.I64, 1)
            oprot.writeI64(self.knet_cpuif_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(knet_cpuif_ndev_delete_args)
knet_cpuif_ndev_delete_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'knet_cpuif_id', None, None, ),  # 1
)


class knet_cpuif_ndev_delete_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidKnetOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('knet_cpuif_ndev_delete_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(knet_cpuif_ndev_delete_result)
knet_cpuif_ndev_delete_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidKnetOperation, None], None, ),  # 1
)


class knet_hostif_kndev_add_args(object):
    """
    Attributes:
     - knet_cpuif_id
     - hostif_name

    """


    def __init__(self, knet_cpuif_id=None, hostif_name=None,):
        self.knet_cpuif_id = knet_cpuif_id
        self.hostif_name = hostif_name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.knet_cpuif_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.hostif_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('knet_hostif_kndev_add_args')
        if self.knet_cpuif_id is not None:
            oprot.writeFieldBegin('knet_cpuif_id', TType.I64, 1)
            oprot.writeI64(self.knet_cpuif_id)
            oprot.writeFieldEnd()
        if self.hostif_name is not None:
            oprot.writeFieldBegin('hostif_name', TType.STRING, 2)
            oprot.writeString(self.hostif_name.encode('utf-8') if sys.version_info[0] == 2 else self.hostif_name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(knet_hostif_kndev_add_args)
knet_hostif_kndev_add_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'knet_cpuif_id', None, None, ),  # 1
    (2, TType.STRING, 'hostif_name', 'UTF8', None, ),  # 2
)


class knet_hostif_kndev_add_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = knet_hostif_kndev_res_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidKnetOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('knet_hostif_kndev_add_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(knet_hostif_kndev_add_result)
knet_hostif_kndev_add_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [knet_hostif_kndev_res_t, None], None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidKnetOperation, None], None, ),  # 1
)


class knet_hostif_kndev_delete_args(object):
    """
    Attributes:
     - knet_cpuif_id
     - knet_hostif_id

    """


    def __init__(self, knet_cpuif_id=None, knet_hostif_id=None,):
        self.knet_cpuif_id = knet_cpuif_id
        self.knet_hostif_id = knet_hostif_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.knet_cpuif_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.knet_hostif_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('knet_hostif_kndev_delete_args')
        if self.knet_cpuif_id is not None:
            oprot.writeFieldBegin('knet_cpuif_id', TType.I64, 1)
            oprot.writeI64(self.knet_cpuif_id)
            oprot.writeFieldEnd()
        if self.knet_hostif_id is not None:
            oprot.writeFieldBegin('knet_hostif_id', TType.I64, 2)
            oprot.writeI64(self.knet_hostif_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(knet_hostif_kndev_delete_args)
knet_hostif_kndev_delete_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'knet_cpuif_id', None, None, ),  # 1
    (2, TType.I64, 'knet_hostif_id', None, None, ),  # 2
)


class knet_hostif_kndev_delete_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidKnetOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('knet_hostif_kndev_delete_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(knet_hostif_kndev_delete_result)
knet_hostif_kndev_delete_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidKnetOperation, None], None, ),  # 1
)


class knet_rx_filter_add_args(object):
    """
    Attributes:
     - knet_cpuif_id
     - rx_filter

    """


    def __init__(self, knet_cpuif_id=None, rx_filter=None,):
        self.knet_cpuif_id = knet_cpuif_id
        self.rx_filter = rx_filter

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.knet_cpuif_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.rx_filter = knet_rx_filter_t()
                    self.rx_filter.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('knet_rx_filter_add_args')
        if self.knet_cpuif_id is not None:
            oprot.writeFieldBegin('knet_cpuif_id', TType.I64, 1)
            oprot.writeI64(self.knet_cpuif_id)
            oprot.writeFieldEnd()
        if self.rx_filter is not None:
            oprot.writeFieldBegin('rx_filter', TType.STRUCT, 2)
            self.rx_filter.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(knet_rx_filter_add_args)
knet_rx_filter_add_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'knet_cpuif_id', None, None, ),  # 1
    (2, TType.STRUCT, 'rx_filter', [knet_rx_filter_t, None], None, ),  # 2
)


class knet_rx_filter_add_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = knet_filter_res_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidKnetOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('knet_rx_filter_add_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(knet_rx_filter_add_result)
knet_rx_filter_add_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [knet_filter_res_t, None], None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidKnetOperation, None], None, ),  # 1
)


class knet_rx_filter_delete_args(object):
    """
    Attributes:
     - knet_cpuif_id
     - filter_id

    """


    def __init__(self, knet_cpuif_id=None, filter_id=None,):
        self.knet_cpuif_id = knet_cpuif_id
        self.filter_id = filter_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.knet_cpuif_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.filter_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('knet_rx_filter_delete_args')
        if self.knet_cpuif_id is not None:
            oprot.writeFieldBegin('knet_cpuif_id', TType.I64, 1)
            oprot.writeI64(self.knet_cpuif_id)
            oprot.writeFieldEnd()
        if self.filter_id is not None:
            oprot.writeFieldBegin('filter_id', TType.I64, 2)
            oprot.writeI64(self.filter_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(knet_rx_filter_delete_args)
knet_rx_filter_delete_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'knet_cpuif_id', None, None, ),  # 1
    (2, TType.I64, 'filter_id', None, None, ),  # 2
)


class knet_rx_filter_delete_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidKnetOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('knet_rx_filter_delete_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(knet_rx_filter_delete_result)
knet_rx_filter_delete_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidKnetOperation, None], None, ),  # 1
)


class knet_rx_filter_get_args(object):
    """
    Attributes:
     - knet_cpuif_id
     - filter_id
     - rx_mutation_count

    """


    def __init__(self, knet_cpuif_id=None, filter_id=None, rx_mutation_count=None,):
        self.knet_cpuif_id = knet_cpuif_id
        self.filter_id = filter_id
        self.rx_mutation_count = rx_mutation_count

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.knet_cpuif_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.filter_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I16:
                    self.rx_mutation_count = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('knet_rx_filter_get_args')
        if self.knet_cpuif_id is not None:
            oprot.writeFieldBegin('knet_cpuif_id', TType.I64, 1)
            oprot.writeI64(self.knet_cpuif_id)
            oprot.writeFieldEnd()
        if self.filter_id is not None:
            oprot.writeFieldBegin('filter_id', TType.I64, 2)
            oprot.writeI64(self.filter_id)
            oprot.writeFieldEnd()
        if self.rx_mutation_count is not None:
            oprot.writeFieldBegin('rx_mutation_count', TType.I16, 3)
            oprot.writeI16(self.rx_mutation_count)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(knet_rx_filter_get_args)
knet_rx_filter_get_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'knet_cpuif_id', None, None, ),  # 1
    (2, TType.I64, 'filter_id', None, None, ),  # 2
    (3, TType.I16, 'rx_mutation_count', None, None, ),  # 3
)


class knet_rx_filter_get_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = knet_rx_filter_res_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidKnetOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('knet_rx_filter_get_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(knet_rx_filter_get_result)
knet_rx_filter_get_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [knet_rx_filter_res_t, None], None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidKnetOperation, None], None, ),  # 1
)


class knet_tx_action_add_args(object):
    """
    Attributes:
     - knet_cpuif_id
     - knet_hostif_id
     - tx_action

    """


    def __init__(self, knet_cpuif_id=None, knet_hostif_id=None, tx_action=None,):
        self.knet_cpuif_id = knet_cpuif_id
        self.knet_hostif_id = knet_hostif_id
        self.tx_action = tx_action

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.knet_cpuif_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.knet_hostif_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.tx_action = knet_tx_action_t()
                    self.tx_action.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('knet_tx_action_add_args')
        if self.knet_cpuif_id is not None:
            oprot.writeFieldBegin('knet_cpuif_id', TType.I64, 1)
            oprot.writeI64(self.knet_cpuif_id)
            oprot.writeFieldEnd()
        if self.knet_hostif_id is not None:
            oprot.writeFieldBegin('knet_hostif_id', TType.I64, 2)
            oprot.writeI64(self.knet_hostif_id)
            oprot.writeFieldEnd()
        if self.tx_action is not None:
            oprot.writeFieldBegin('tx_action', TType.STRUCT, 3)
            self.tx_action.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(knet_tx_action_add_args)
knet_tx_action_add_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'knet_cpuif_id', None, None, ),  # 1
    (2, TType.I64, 'knet_hostif_id', None, None, ),  # 2
    (3, TType.STRUCT, 'tx_action', [knet_tx_action_t, None], None, ),  # 3
)


class knet_tx_action_add_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidKnetOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('knet_tx_action_add_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(knet_tx_action_add_result)
knet_tx_action_add_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidKnetOperation, None], None, ),  # 1
)


class knet_tx_action_delete_args(object):
    """
    Attributes:
     - knet_cpuif_id
     - knet_hostif_id

    """


    def __init__(self, knet_cpuif_id=None, knet_hostif_id=None,):
        self.knet_cpuif_id = knet_cpuif_id
        self.knet_hostif_id = knet_hostif_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.knet_cpuif_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.knet_hostif_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('knet_tx_action_delete_args')
        if self.knet_cpuif_id is not None:
            oprot.writeFieldBegin('knet_cpuif_id', TType.I64, 1)
            oprot.writeI64(self.knet_cpuif_id)
            oprot.writeFieldEnd()
        if self.knet_hostif_id is not None:
            oprot.writeFieldBegin('knet_hostif_id', TType.I64, 2)
            oprot.writeI64(self.knet_hostif_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(knet_tx_action_delete_args)
knet_tx_action_delete_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'knet_cpuif_id', None, None, ),  # 1
    (2, TType.I64, 'knet_hostif_id', None, None, ),  # 2
)


class knet_tx_action_delete_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidKnetOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('knet_tx_action_delete_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(knet_tx_action_delete_result)
knet_tx_action_delete_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidKnetOperation, None], None, ),  # 1
)


class knet_get_cpuif_cnt_args(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('knet_get_cpuif_cnt_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(knet_get_cpuif_cnt_args)
knet_get_cpuif_cnt_args.thrift_spec = (
)


class knet_get_cpuif_cnt_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = knet_count_res_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidKnetOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('knet_get_cpuif_cnt_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(knet_get_cpuif_cnt_result)
knet_get_cpuif_cnt_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [knet_count_res_t, None], None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidKnetOperation, None], None, ),  # 1
)


class knet_get_hostif_cnt_args(object):
    """
    Attributes:
     - knet_cpuif_id

    """


    def __init__(self, knet_cpuif_id=None,):
        self.knet_cpuif_id = knet_cpuif_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.knet_cpuif_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('knet_get_hostif_cnt_args')
        if self.knet_cpuif_id is not None:
            oprot.writeFieldBegin('knet_cpuif_id', TType.I64, 1)
            oprot.writeI64(self.knet_cpuif_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(knet_get_hostif_cnt_args)
knet_get_hostif_cnt_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'knet_cpuif_id', None, None, ),  # 1
)


class knet_get_hostif_cnt_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = knet_count_res_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidKnetOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('knet_get_hostif_cnt_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(knet_get_hostif_cnt_result)
knet_get_hostif_cnt_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [knet_count_res_t, None], None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidKnetOperation, None], None, ),  # 1
)


class knet_get_rx_filter_cnt_args(object):
    """
    Attributes:
     - knet_cpuif_id

    """


    def __init__(self, knet_cpuif_id=None,):
        self.knet_cpuif_id = knet_cpuif_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.knet_cpuif_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('knet_get_rx_filter_cnt_args')
        if self.knet_cpuif_id is not None:
            oprot.writeFieldBegin('knet_cpuif_id', TType.I64, 1)
            oprot.writeI64(self.knet_cpuif_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(knet_get_rx_filter_cnt_args)
knet_get_rx_filter_cnt_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'knet_cpuif_id', None, None, ),  # 1
)


class knet_get_rx_filter_cnt_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = knet_count_res_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidKnetOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('knet_get_rx_filter_cnt_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(knet_get_rx_filter_cnt_result)
knet_get_rx_filter_cnt_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [knet_count_res_t, None], None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidKnetOperation, None], None, ),  # 1
)


class knet_get_rx_mutation_cnt_args(object):
    """
    Attributes:
     - knet_cpuif_id
     - filter_id

    """


    def __init__(self, knet_cpuif_id=None, filter_id=None,):
        self.knet_cpuif_id = knet_cpuif_id
        self.filter_id = filter_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.knet_cpuif_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.filter_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('knet_get_rx_mutation_cnt_args')
        if self.knet_cpuif_id is not None:
            oprot.writeFieldBegin('knet_cpuif_id', TType.I64, 1)
            oprot.writeI64(self.knet_cpuif_id)
            oprot.writeFieldEnd()
        if self.filter_id is not None:
            oprot.writeFieldBegin('filter_id', TType.I64, 2)
            oprot.writeI64(self.filter_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(knet_get_rx_mutation_cnt_args)
knet_get_rx_mutation_cnt_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'knet_cpuif_id', None, None, ),  # 1
    (2, TType.I64, 'filter_id', None, None, ),  # 2
)


class knet_get_rx_mutation_cnt_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = knet_count_res_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidKnetOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('knet_get_rx_mutation_cnt_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(knet_get_rx_mutation_cnt_result)
knet_get_rx_mutation_cnt_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [knet_count_res_t, None], None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidKnetOperation, None], None, ),  # 1
)


class knet_get_tx_mutation_cnt_args(object):
    """
    Attributes:
     - knet_cpuif_id
     - hostif_id

    """


    def __init__(self, knet_cpuif_id=None, hostif_id=None,):
        self.knet_cpuif_id = knet_cpuif_id
        self.hostif_id = hostif_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.knet_cpuif_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.hostif_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('knet_get_tx_mutation_cnt_args')
        if self.knet_cpuif_id is not None:
            oprot.writeFieldBegin('knet_cpuif_id', TType.I64, 1)
            oprot.writeI64(self.knet_cpuif_id)
            oprot.writeFieldEnd()
        if self.hostif_id is not None:
            oprot.writeFieldBegin('hostif_id', TType.I64, 2)
            oprot.writeI64(self.hostif_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(knet_get_tx_mutation_cnt_args)
knet_get_tx_mutation_cnt_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'knet_cpuif_id', None, None, ),  # 1
    (2, TType.I64, 'hostif_id', None, None, ),  # 2
)


class knet_get_tx_mutation_cnt_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = knet_count_res_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidKnetOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('knet_get_tx_mutation_cnt_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(knet_get_tx_mutation_cnt_result)
knet_get_tx_mutation_cnt_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [knet_count_res_t, None], None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidKnetOperation, None], None, ),  # 1
)


class knet_rx_filter_list_get_args(object):
    """
    Attributes:
     - knet_cpuif_id
     - filter_count

    """


    def __init__(self, knet_cpuif_id=None, filter_count=None,):
        self.knet_cpuif_id = knet_cpuif_id
        self.filter_count = filter_count

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.knet_cpuif_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I16:
                    self.filter_count = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('knet_rx_filter_list_get_args')
        if self.knet_cpuif_id is not None:
            oprot.writeFieldBegin('knet_cpuif_id', TType.I64, 1)
            oprot.writeI64(self.knet_cpuif_id)
            oprot.writeFieldEnd()
        if self.filter_count is not None:
            oprot.writeFieldBegin('filter_count', TType.I16, 2)
            oprot.writeI16(self.filter_count)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(knet_rx_filter_list_get_args)
knet_rx_filter_list_get_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'knet_cpuif_id', None, None, ),  # 1
    (2, TType.I16, 'filter_count', None, None, ),  # 2
)


class knet_rx_filter_list_get_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = knet_filter_list_res_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidKnetOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('knet_rx_filter_list_get_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(knet_rx_filter_list_get_result)
knet_rx_filter_list_get_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [knet_filter_list_res_t, None], None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidKnetOperation, None], None, ),  # 1
)


class knet_cpuif_list_get_args(object):
    """
    Attributes:
     - cpuif_count

    """


    def __init__(self, cpuif_count=None,):
        self.cpuif_count = cpuif_count

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.cpuif_count = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('knet_cpuif_list_get_args')
        if self.cpuif_count is not None:
            oprot.writeFieldBegin('cpuif_count', TType.I16, 1)
            oprot.writeI16(self.cpuif_count)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(knet_cpuif_list_get_args)
knet_cpuif_list_get_args.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'cpuif_count', None, None, ),  # 1
)


class knet_cpuif_list_get_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = knet_cpuif_list_res_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidKnetOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('knet_cpuif_list_get_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(knet_cpuif_list_get_result)
knet_cpuif_list_get_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [knet_cpuif_list_res_t, None], None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidKnetOperation, None], None, ),  # 1
)


class knet_hostif_list_get_args(object):
    """
    Attributes:
     - knet_cpuif_id
     - hostif_count

    """


    def __init__(self, knet_cpuif_id=None, hostif_count=None,):
        self.knet_cpuif_id = knet_cpuif_id
        self.hostif_count = hostif_count

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.knet_cpuif_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I16:
                    self.hostif_count = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('knet_hostif_list_get_args')
        if self.knet_cpuif_id is not None:
            oprot.writeFieldBegin('knet_cpuif_id', TType.I64, 1)
            oprot.writeI64(self.knet_cpuif_id)
            oprot.writeFieldEnd()
        if self.hostif_count is not None:
            oprot.writeFieldBegin('hostif_count', TType.I16, 2)
            oprot.writeI16(self.hostif_count)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(knet_hostif_list_get_args)
knet_hostif_list_get_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'knet_cpuif_id', None, None, ),  # 1
    (2, TType.I16, 'hostif_count', None, None, ),  # 2
)


class knet_hostif_list_get_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = knet_hostif_list_res_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidKnetOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('knet_hostif_list_get_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(knet_hostif_list_get_result)
knet_hostif_list_get_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [knet_hostif_list_res_t, None], None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidKnetOperation, None], None, ),  # 1
)


class knet_tx_action_get_args(object):
    """
    Attributes:
     - knet_cpuif_id
     - knet_hostif_id
     - tx_mutation_count

    """


    def __init__(self, knet_cpuif_id=None, knet_hostif_id=None, tx_mutation_count=None,):
        self.knet_cpuif_id = knet_cpuif_id
        self.knet_hostif_id = knet_hostif_id
        self.tx_mutation_count = tx_mutation_count

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.knet_cpuif_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.knet_hostif_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I16:
                    self.tx_mutation_count = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('knet_tx_action_get_args')
        if self.knet_cpuif_id is not None:
            oprot.writeFieldBegin('knet_cpuif_id', TType.I64, 1)
            oprot.writeI64(self.knet_cpuif_id)
            oprot.writeFieldEnd()
        if self.knet_hostif_id is not None:
            oprot.writeFieldBegin('knet_hostif_id', TType.I64, 2)
            oprot.writeI64(self.knet_hostif_id)
            oprot.writeFieldEnd()
        if self.tx_mutation_count is not None:
            oprot.writeFieldBegin('tx_mutation_count', TType.I16, 3)
            oprot.writeI16(self.tx_mutation_count)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(knet_tx_action_get_args)
knet_tx_action_get_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'knet_cpuif_id', None, None, ),  # 1
    (2, TType.I64, 'knet_hostif_id', None, None, ),  # 2
    (3, TType.I16, 'tx_mutation_count', None, None, ),  # 3
)


class knet_tx_action_get_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = knet_tx_action_res_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidKnetOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('knet_tx_action_get_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(knet_tx_action_get_result)
knet_tx_action_get_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [knet_tx_action_res_t, None], None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidKnetOperation, None], None, ),  # 1
)


class knet_module_is_inited_args(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('knet_module_is_inited_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(knet_module_is_inited_args)
knet_module_is_inited_args.thrift_spec = (
)


class knet_module_is_inited_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('knet_module_is_inited_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(knet_module_is_inited_result)
knet_module_is_inited_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
)
fix_spec(all_structs)
del all_structs
