#
# Autogenerated by Thrift Compiler (0.14.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:package_prefix=controller.thrift_api.
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    def devport_mgr_add_port(self, dev_id, port_id, port_speeds, port_fec_types):
        """
        Parameters:
         - dev_id
         - port_id
         - port_speeds
         - port_fec_types

        """
        pass

    def devport_mgr_add_port_with_lanes(self, dev_id, port_id, port_speeds, port_lanes, port_fec_types):
        """
        Parameters:
         - dev_id
         - port_id
         - port_speeds
         - port_lanes
         - port_fec_types

        """
        pass

    def devport_mgr_remove_port(self, dev_id, port_id):
        """
        Parameters:
         - dev_id
         - port_id

        """
        pass

    def devport_mgr_port_ca_get(self, dev_id, port_id):
        """
        Parameters:
         - dev_id
         - port_id

        """
        pass

    def devport_mgr_serdes_ca_get(self, dev_id, port_id):
        """
        Parameters:
         - dev_id
         - port_id

        """
        pass

    def devport_mgr_set_copy_to_cpu(self, dev_id, enable, pport):
        """
        Parameters:
         - dev_id
         - enable
         - pport

        """
        pass

    def devport_mgr_pcie_cpu_port_get(self, dev_id):
        """
        Parameters:
         - dev_id

        """
        pass

    def devport_mgr_eth_cpu_port_get(self, dev_id):
        """
        Parameters:
         - dev_id

        """
        pass

    def devport_mgr_warm_init_begin(self, dev_id, warm_init_mode, serdes_upgrade_mode, upgrade_agents):
        """
        Parameters:
         - dev_id
         - warm_init_mode
         - serdes_upgrade_mode
         - upgrade_agents

        """
        pass

    def devport_mgr_warm_init_end(self, dev_id):
        """
        Parameters:
         - dev_id

        """
        pass

    def devport_mgr_get_parser_id(self, dev_id, port_id):
        """
        Parameters:
         - dev_id
         - port_id

        """
        pass

    def devport_mgr_get_pipe_id(self, dev_id, port_id):
        """
        Parameters:
         - dev_id
         - port_id

        """
        pass

    def devport_mgr_set_virtual_dev_slave_mode(self, dev_id):
        """
        Parameters:
         - dev_id

        """
        pass

    def devport_mgr_get_clock_speed(self, dev_id):
        """
        Parameters:
         - dev_id

        """
        pass

    def devport_mgr_lrt_dr_timeout_set(self, dev_id, timeout_ms):
        """
        Parameters:
         - dev_id
         - timeout_ms

        """
        pass

    def devport_mgr_lrt_dr_timeout_get(self, dev_id):
        """
        Parameters:
         - dev_id

        """
        pass

    def devport_mgr_register_for_error_events(self, dev_id):
        """
        Parameters:
         - dev_id

        """
        pass

    def devport_mgr_get_error_events(self, dev_id):
        """
        Parameters:
         - dev_id

        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def devport_mgr_add_port(self, dev_id, port_id, port_speeds, port_fec_types):
        """
        Parameters:
         - dev_id
         - port_id
         - port_speeds
         - port_fec_types

        """
        self.send_devport_mgr_add_port(dev_id, port_id, port_speeds, port_fec_types)
        self.recv_devport_mgr_add_port()

    def send_devport_mgr_add_port(self, dev_id, port_id, port_speeds, port_fec_types):
        self._oprot.writeMessageBegin('devport_mgr_add_port', TMessageType.CALL, self._seqid)
        args = devport_mgr_add_port_args()
        args.dev_id = dev_id
        args.port_id = port_id
        args.port_speeds = port_speeds
        args.port_fec_types = port_fec_types
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_devport_mgr_add_port(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = devport_mgr_add_port_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.ouch is not None:
            raise result.ouch
        return

    def devport_mgr_add_port_with_lanes(self, dev_id, port_id, port_speeds, port_lanes, port_fec_types):
        """
        Parameters:
         - dev_id
         - port_id
         - port_speeds
         - port_lanes
         - port_fec_types

        """
        self.send_devport_mgr_add_port_with_lanes(dev_id, port_id, port_speeds, port_lanes, port_fec_types)
        self.recv_devport_mgr_add_port_with_lanes()

    def send_devport_mgr_add_port_with_lanes(self, dev_id, port_id, port_speeds, port_lanes, port_fec_types):
        self._oprot.writeMessageBegin('devport_mgr_add_port_with_lanes', TMessageType.CALL, self._seqid)
        args = devport_mgr_add_port_with_lanes_args()
        args.dev_id = dev_id
        args.port_id = port_id
        args.port_speeds = port_speeds
        args.port_lanes = port_lanes
        args.port_fec_types = port_fec_types
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_devport_mgr_add_port_with_lanes(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = devport_mgr_add_port_with_lanes_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.ouch is not None:
            raise result.ouch
        return

    def devport_mgr_remove_port(self, dev_id, port_id):
        """
        Parameters:
         - dev_id
         - port_id

        """
        self.send_devport_mgr_remove_port(dev_id, port_id)
        self.recv_devport_mgr_remove_port()

    def send_devport_mgr_remove_port(self, dev_id, port_id):
        self._oprot.writeMessageBegin('devport_mgr_remove_port', TMessageType.CALL, self._seqid)
        args = devport_mgr_remove_port_args()
        args.dev_id = dev_id
        args.port_id = port_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_devport_mgr_remove_port(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = devport_mgr_remove_port_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.ouch is not None:
            raise result.ouch
        return

    def devport_mgr_port_ca_get(self, dev_id, port_id):
        """
        Parameters:
         - dev_id
         - port_id

        """
        self.send_devport_mgr_port_ca_get(dev_id, port_id)
        return self.recv_devport_mgr_port_ca_get()

    def send_devport_mgr_port_ca_get(self, dev_id, port_id):
        self._oprot.writeMessageBegin('devport_mgr_port_ca_get', TMessageType.CALL, self._seqid)
        args = devport_mgr_port_ca_get_args()
        args.dev_id = dev_id
        args.port_id = port_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_devport_mgr_port_ca_get(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = devport_mgr_port_ca_get_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "devport_mgr_port_ca_get failed: unknown result")

    def devport_mgr_serdes_ca_get(self, dev_id, port_id):
        """
        Parameters:
         - dev_id
         - port_id

        """
        self.send_devport_mgr_serdes_ca_get(dev_id, port_id)
        return self.recv_devport_mgr_serdes_ca_get()

    def send_devport_mgr_serdes_ca_get(self, dev_id, port_id):
        self._oprot.writeMessageBegin('devport_mgr_serdes_ca_get', TMessageType.CALL, self._seqid)
        args = devport_mgr_serdes_ca_get_args()
        args.dev_id = dev_id
        args.port_id = port_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_devport_mgr_serdes_ca_get(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = devport_mgr_serdes_ca_get_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "devport_mgr_serdes_ca_get failed: unknown result")

    def devport_mgr_set_copy_to_cpu(self, dev_id, enable, pport):
        """
        Parameters:
         - dev_id
         - enable
         - pport

        """
        self.send_devport_mgr_set_copy_to_cpu(dev_id, enable, pport)
        self.recv_devport_mgr_set_copy_to_cpu()

    def send_devport_mgr_set_copy_to_cpu(self, dev_id, enable, pport):
        self._oprot.writeMessageBegin('devport_mgr_set_copy_to_cpu', TMessageType.CALL, self._seqid)
        args = devport_mgr_set_copy_to_cpu_args()
        args.dev_id = dev_id
        args.enable = enable
        args.pport = pport
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_devport_mgr_set_copy_to_cpu(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = devport_mgr_set_copy_to_cpu_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.ouch is not None:
            raise result.ouch
        return

    def devport_mgr_pcie_cpu_port_get(self, dev_id):
        """
        Parameters:
         - dev_id

        """
        self.send_devport_mgr_pcie_cpu_port_get(dev_id)
        return self.recv_devport_mgr_pcie_cpu_port_get()

    def send_devport_mgr_pcie_cpu_port_get(self, dev_id):
        self._oprot.writeMessageBegin('devport_mgr_pcie_cpu_port_get', TMessageType.CALL, self._seqid)
        args = devport_mgr_pcie_cpu_port_get_args()
        args.dev_id = dev_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_devport_mgr_pcie_cpu_port_get(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = devport_mgr_pcie_cpu_port_get_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "devport_mgr_pcie_cpu_port_get failed: unknown result")

    def devport_mgr_eth_cpu_port_get(self, dev_id):
        """
        Parameters:
         - dev_id

        """
        self.send_devport_mgr_eth_cpu_port_get(dev_id)
        return self.recv_devport_mgr_eth_cpu_port_get()

    def send_devport_mgr_eth_cpu_port_get(self, dev_id):
        self._oprot.writeMessageBegin('devport_mgr_eth_cpu_port_get', TMessageType.CALL, self._seqid)
        args = devport_mgr_eth_cpu_port_get_args()
        args.dev_id = dev_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_devport_mgr_eth_cpu_port_get(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = devport_mgr_eth_cpu_port_get_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "devport_mgr_eth_cpu_port_get failed: unknown result")

    def devport_mgr_warm_init_begin(self, dev_id, warm_init_mode, serdes_upgrade_mode, upgrade_agents):
        """
        Parameters:
         - dev_id
         - warm_init_mode
         - serdes_upgrade_mode
         - upgrade_agents

        """
        self.send_devport_mgr_warm_init_begin(dev_id, warm_init_mode, serdes_upgrade_mode, upgrade_agents)
        self.recv_devport_mgr_warm_init_begin()

    def send_devport_mgr_warm_init_begin(self, dev_id, warm_init_mode, serdes_upgrade_mode, upgrade_agents):
        self._oprot.writeMessageBegin('devport_mgr_warm_init_begin', TMessageType.CALL, self._seqid)
        args = devport_mgr_warm_init_begin_args()
        args.dev_id = dev_id
        args.warm_init_mode = warm_init_mode
        args.serdes_upgrade_mode = serdes_upgrade_mode
        args.upgrade_agents = upgrade_agents
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_devport_mgr_warm_init_begin(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = devport_mgr_warm_init_begin_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.ouch is not None:
            raise result.ouch
        return

    def devport_mgr_warm_init_end(self, dev_id):
        """
        Parameters:
         - dev_id

        """
        self.send_devport_mgr_warm_init_end(dev_id)
        self.recv_devport_mgr_warm_init_end()

    def send_devport_mgr_warm_init_end(self, dev_id):
        self._oprot.writeMessageBegin('devport_mgr_warm_init_end', TMessageType.CALL, self._seqid)
        args = devport_mgr_warm_init_end_args()
        args.dev_id = dev_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_devport_mgr_warm_init_end(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = devport_mgr_warm_init_end_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.ouch is not None:
            raise result.ouch
        return

    def devport_mgr_get_parser_id(self, dev_id, port_id):
        """
        Parameters:
         - dev_id
         - port_id

        """
        self.send_devport_mgr_get_parser_id(dev_id, port_id)
        return self.recv_devport_mgr_get_parser_id()

    def send_devport_mgr_get_parser_id(self, dev_id, port_id):
        self._oprot.writeMessageBegin('devport_mgr_get_parser_id', TMessageType.CALL, self._seqid)
        args = devport_mgr_get_parser_id_args()
        args.dev_id = dev_id
        args.port_id = port_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_devport_mgr_get_parser_id(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = devport_mgr_get_parser_id_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "devport_mgr_get_parser_id failed: unknown result")

    def devport_mgr_get_pipe_id(self, dev_id, port_id):
        """
        Parameters:
         - dev_id
         - port_id

        """
        self.send_devport_mgr_get_pipe_id(dev_id, port_id)
        return self.recv_devport_mgr_get_pipe_id()

    def send_devport_mgr_get_pipe_id(self, dev_id, port_id):
        self._oprot.writeMessageBegin('devport_mgr_get_pipe_id', TMessageType.CALL, self._seqid)
        args = devport_mgr_get_pipe_id_args()
        args.dev_id = dev_id
        args.port_id = port_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_devport_mgr_get_pipe_id(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = devport_mgr_get_pipe_id_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "devport_mgr_get_pipe_id failed: unknown result")

    def devport_mgr_set_virtual_dev_slave_mode(self, dev_id):
        """
        Parameters:
         - dev_id

        """
        self.send_devport_mgr_set_virtual_dev_slave_mode(dev_id)
        self.recv_devport_mgr_set_virtual_dev_slave_mode()

    def send_devport_mgr_set_virtual_dev_slave_mode(self, dev_id):
        self._oprot.writeMessageBegin('devport_mgr_set_virtual_dev_slave_mode', TMessageType.CALL, self._seqid)
        args = devport_mgr_set_virtual_dev_slave_mode_args()
        args.dev_id = dev_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_devport_mgr_set_virtual_dev_slave_mode(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = devport_mgr_set_virtual_dev_slave_mode_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.ouch is not None:
            raise result.ouch
        return

    def devport_mgr_get_clock_speed(self, dev_id):
        """
        Parameters:
         - dev_id

        """
        self.send_devport_mgr_get_clock_speed(dev_id)
        return self.recv_devport_mgr_get_clock_speed()

    def send_devport_mgr_get_clock_speed(self, dev_id):
        self._oprot.writeMessageBegin('devport_mgr_get_clock_speed', TMessageType.CALL, self._seqid)
        args = devport_mgr_get_clock_speed_args()
        args.dev_id = dev_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_devport_mgr_get_clock_speed(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = devport_mgr_get_clock_speed_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "devport_mgr_get_clock_speed failed: unknown result")

    def devport_mgr_lrt_dr_timeout_set(self, dev_id, timeout_ms):
        """
        Parameters:
         - dev_id
         - timeout_ms

        """
        self.send_devport_mgr_lrt_dr_timeout_set(dev_id, timeout_ms)
        self.recv_devport_mgr_lrt_dr_timeout_set()

    def send_devport_mgr_lrt_dr_timeout_set(self, dev_id, timeout_ms):
        self._oprot.writeMessageBegin('devport_mgr_lrt_dr_timeout_set', TMessageType.CALL, self._seqid)
        args = devport_mgr_lrt_dr_timeout_set_args()
        args.dev_id = dev_id
        args.timeout_ms = timeout_ms
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_devport_mgr_lrt_dr_timeout_set(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = devport_mgr_lrt_dr_timeout_set_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.ouch is not None:
            raise result.ouch
        return

    def devport_mgr_lrt_dr_timeout_get(self, dev_id):
        """
        Parameters:
         - dev_id

        """
        self.send_devport_mgr_lrt_dr_timeout_get(dev_id)
        return self.recv_devport_mgr_lrt_dr_timeout_get()

    def send_devport_mgr_lrt_dr_timeout_get(self, dev_id):
        self._oprot.writeMessageBegin('devport_mgr_lrt_dr_timeout_get', TMessageType.CALL, self._seqid)
        args = devport_mgr_lrt_dr_timeout_get_args()
        args.dev_id = dev_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_devport_mgr_lrt_dr_timeout_get(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = devport_mgr_lrt_dr_timeout_get_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "devport_mgr_lrt_dr_timeout_get failed: unknown result")

    def devport_mgr_register_for_error_events(self, dev_id):
        """
        Parameters:
         - dev_id

        """
        self.send_devport_mgr_register_for_error_events(dev_id)
        self.recv_devport_mgr_register_for_error_events()

    def send_devport_mgr_register_for_error_events(self, dev_id):
        self._oprot.writeMessageBegin('devport_mgr_register_for_error_events', TMessageType.CALL, self._seqid)
        args = devport_mgr_register_for_error_events_args()
        args.dev_id = dev_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_devport_mgr_register_for_error_events(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = devport_mgr_register_for_error_events_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.ouch is not None:
            raise result.ouch
        return

    def devport_mgr_get_error_events(self, dev_id):
        """
        Parameters:
         - dev_id

        """
        self.send_devport_mgr_get_error_events(dev_id)
        return self.recv_devport_mgr_get_error_events()

    def send_devport_mgr_get_error_events(self, dev_id):
        self._oprot.writeMessageBegin('devport_mgr_get_error_events', TMessageType.CALL, self._seqid)
        args = devport_mgr_get_error_events_args()
        args.dev_id = dev_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_devport_mgr_get_error_events(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = devport_mgr_get_error_events_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "devport_mgr_get_error_events failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["devport_mgr_add_port"] = Processor.process_devport_mgr_add_port
        self._processMap["devport_mgr_add_port_with_lanes"] = Processor.process_devport_mgr_add_port_with_lanes
        self._processMap["devport_mgr_remove_port"] = Processor.process_devport_mgr_remove_port
        self._processMap["devport_mgr_port_ca_get"] = Processor.process_devport_mgr_port_ca_get
        self._processMap["devport_mgr_serdes_ca_get"] = Processor.process_devport_mgr_serdes_ca_get
        self._processMap["devport_mgr_set_copy_to_cpu"] = Processor.process_devport_mgr_set_copy_to_cpu
        self._processMap["devport_mgr_pcie_cpu_port_get"] = Processor.process_devport_mgr_pcie_cpu_port_get
        self._processMap["devport_mgr_eth_cpu_port_get"] = Processor.process_devport_mgr_eth_cpu_port_get
        self._processMap["devport_mgr_warm_init_begin"] = Processor.process_devport_mgr_warm_init_begin
        self._processMap["devport_mgr_warm_init_end"] = Processor.process_devport_mgr_warm_init_end
        self._processMap["devport_mgr_get_parser_id"] = Processor.process_devport_mgr_get_parser_id
        self._processMap["devport_mgr_get_pipe_id"] = Processor.process_devport_mgr_get_pipe_id
        self._processMap["devport_mgr_set_virtual_dev_slave_mode"] = Processor.process_devport_mgr_set_virtual_dev_slave_mode
        self._processMap["devport_mgr_get_clock_speed"] = Processor.process_devport_mgr_get_clock_speed
        self._processMap["devport_mgr_lrt_dr_timeout_set"] = Processor.process_devport_mgr_lrt_dr_timeout_set
        self._processMap["devport_mgr_lrt_dr_timeout_get"] = Processor.process_devport_mgr_lrt_dr_timeout_get
        self._processMap["devport_mgr_register_for_error_events"] = Processor.process_devport_mgr_register_for_error_events
        self._processMap["devport_mgr_get_error_events"] = Processor.process_devport_mgr_get_error_events
        self._on_message_begin = None

    def on_message_begin(self, func):
        self._on_message_begin = func

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if self._on_message_begin:
            self._on_message_begin(name, type, seqid)
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_devport_mgr_add_port(self, seqid, iprot, oprot):
        args = devport_mgr_add_port_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = devport_mgr_add_port_result()
        try:
            self._handler.devport_mgr_add_port(args.dev_id, args.port_id, args.port_speeds, args.port_fec_types)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidDevportMgrOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("devport_mgr_add_port", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_devport_mgr_add_port_with_lanes(self, seqid, iprot, oprot):
        args = devport_mgr_add_port_with_lanes_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = devport_mgr_add_port_with_lanes_result()
        try:
            self._handler.devport_mgr_add_port_with_lanes(args.dev_id, args.port_id, args.port_speeds, args.port_lanes, args.port_fec_types)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidDevportMgrOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("devport_mgr_add_port_with_lanes", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_devport_mgr_remove_port(self, seqid, iprot, oprot):
        args = devport_mgr_remove_port_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = devport_mgr_remove_port_result()
        try:
            self._handler.devport_mgr_remove_port(args.dev_id, args.port_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidDevportMgrOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("devport_mgr_remove_port", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_devport_mgr_port_ca_get(self, seqid, iprot, oprot):
        args = devport_mgr_port_ca_get_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = devport_mgr_port_ca_get_result()
        try:
            result.success = self._handler.devport_mgr_port_ca_get(args.dev_id, args.port_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidDevportMgrOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("devport_mgr_port_ca_get", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_devport_mgr_serdes_ca_get(self, seqid, iprot, oprot):
        args = devport_mgr_serdes_ca_get_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = devport_mgr_serdes_ca_get_result()
        try:
            result.success = self._handler.devport_mgr_serdes_ca_get(args.dev_id, args.port_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidDevportMgrOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("devport_mgr_serdes_ca_get", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_devport_mgr_set_copy_to_cpu(self, seqid, iprot, oprot):
        args = devport_mgr_set_copy_to_cpu_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = devport_mgr_set_copy_to_cpu_result()
        try:
            self._handler.devport_mgr_set_copy_to_cpu(args.dev_id, args.enable, args.pport)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidDevportMgrOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("devport_mgr_set_copy_to_cpu", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_devport_mgr_pcie_cpu_port_get(self, seqid, iprot, oprot):
        args = devport_mgr_pcie_cpu_port_get_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = devport_mgr_pcie_cpu_port_get_result()
        try:
            result.success = self._handler.devport_mgr_pcie_cpu_port_get(args.dev_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidDevportMgrOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("devport_mgr_pcie_cpu_port_get", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_devport_mgr_eth_cpu_port_get(self, seqid, iprot, oprot):
        args = devport_mgr_eth_cpu_port_get_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = devport_mgr_eth_cpu_port_get_result()
        try:
            result.success = self._handler.devport_mgr_eth_cpu_port_get(args.dev_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidDevportMgrOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("devport_mgr_eth_cpu_port_get", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_devport_mgr_warm_init_begin(self, seqid, iprot, oprot):
        args = devport_mgr_warm_init_begin_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = devport_mgr_warm_init_begin_result()
        try:
            self._handler.devport_mgr_warm_init_begin(args.dev_id, args.warm_init_mode, args.serdes_upgrade_mode, args.upgrade_agents)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidDevportMgrOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("devport_mgr_warm_init_begin", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_devport_mgr_warm_init_end(self, seqid, iprot, oprot):
        args = devport_mgr_warm_init_end_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = devport_mgr_warm_init_end_result()
        try:
            self._handler.devport_mgr_warm_init_end(args.dev_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidDevportMgrOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("devport_mgr_warm_init_end", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_devport_mgr_get_parser_id(self, seqid, iprot, oprot):
        args = devport_mgr_get_parser_id_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = devport_mgr_get_parser_id_result()
        try:
            result.success = self._handler.devport_mgr_get_parser_id(args.dev_id, args.port_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidDevportMgrOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("devport_mgr_get_parser_id", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_devport_mgr_get_pipe_id(self, seqid, iprot, oprot):
        args = devport_mgr_get_pipe_id_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = devport_mgr_get_pipe_id_result()
        try:
            result.success = self._handler.devport_mgr_get_pipe_id(args.dev_id, args.port_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidDevportMgrOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("devport_mgr_get_pipe_id", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_devport_mgr_set_virtual_dev_slave_mode(self, seqid, iprot, oprot):
        args = devport_mgr_set_virtual_dev_slave_mode_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = devport_mgr_set_virtual_dev_slave_mode_result()
        try:
            self._handler.devport_mgr_set_virtual_dev_slave_mode(args.dev_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidDevportMgrOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("devport_mgr_set_virtual_dev_slave_mode", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_devport_mgr_get_clock_speed(self, seqid, iprot, oprot):
        args = devport_mgr_get_clock_speed_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = devport_mgr_get_clock_speed_result()
        try:
            result.success = self._handler.devport_mgr_get_clock_speed(args.dev_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidDevportMgrOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("devport_mgr_get_clock_speed", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_devport_mgr_lrt_dr_timeout_set(self, seqid, iprot, oprot):
        args = devport_mgr_lrt_dr_timeout_set_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = devport_mgr_lrt_dr_timeout_set_result()
        try:
            self._handler.devport_mgr_lrt_dr_timeout_set(args.dev_id, args.timeout_ms)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidDevportMgrOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("devport_mgr_lrt_dr_timeout_set", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_devport_mgr_lrt_dr_timeout_get(self, seqid, iprot, oprot):
        args = devport_mgr_lrt_dr_timeout_get_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = devport_mgr_lrt_dr_timeout_get_result()
        try:
            result.success = self._handler.devport_mgr_lrt_dr_timeout_get(args.dev_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidDevportMgrOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("devport_mgr_lrt_dr_timeout_get", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_devport_mgr_register_for_error_events(self, seqid, iprot, oprot):
        args = devport_mgr_register_for_error_events_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = devport_mgr_register_for_error_events_result()
        try:
            self._handler.devport_mgr_register_for_error_events(args.dev_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidDevportMgrOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("devport_mgr_register_for_error_events", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_devport_mgr_get_error_events(self, seqid, iprot, oprot):
        args = devport_mgr_get_error_events_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = devport_mgr_get_error_events_result()
        try:
            result.success = self._handler.devport_mgr_get_error_events(args.dev_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("devport_mgr_get_error_events", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class devport_mgr_add_port_args(object):
    """
    Attributes:
     - dev_id
     - port_id
     - port_speeds
     - port_fec_types

    """


    def __init__(self, dev_id=None, port_id=None, port_speeds=None, port_fec_types=None,):
        self.dev_id = dev_id
        self.port_id = port_id
        self.port_speeds = port_speeds
        self.port_fec_types = port_fec_types

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.port_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.port_speeds = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.port_fec_types = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('devport_mgr_add_port_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.port_id is not None:
            oprot.writeFieldBegin('port_id', TType.I32, 2)
            oprot.writeI32(self.port_id)
            oprot.writeFieldEnd()
        if self.port_speeds is not None:
            oprot.writeFieldBegin('port_speeds', TType.I32, 3)
            oprot.writeI32(self.port_speeds)
            oprot.writeFieldEnd()
        if self.port_fec_types is not None:
            oprot.writeFieldBegin('port_fec_types', TType.I32, 4)
            oprot.writeI32(self.port_fec_types)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(devport_mgr_add_port_args)
devport_mgr_add_port_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'port_id', None, None, ),  # 2
    (3, TType.I32, 'port_speeds', None, None, ),  # 3
    (4, TType.I32, 'port_fec_types', None, None, ),  # 4
)


class devport_mgr_add_port_result(object):
    """
    Attributes:
     - ouch

    """


    def __init__(self, ouch=None,):
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidDevportMgrOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('devport_mgr_add_port_result')
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(devport_mgr_add_port_result)
devport_mgr_add_port_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'ouch', [InvalidDevportMgrOperation, None], None, ),  # 1
)


class devport_mgr_add_port_with_lanes_args(object):
    """
    Attributes:
     - dev_id
     - port_id
     - port_speeds
     - port_lanes
     - port_fec_types

    """


    def __init__(self, dev_id=None, port_id=None, port_speeds=None, port_lanes=None, port_fec_types=None,):
        self.dev_id = dev_id
        self.port_id = port_id
        self.port_speeds = port_speeds
        self.port_lanes = port_lanes
        self.port_fec_types = port_fec_types

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.port_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.port_speeds = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.port_lanes = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.port_fec_types = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('devport_mgr_add_port_with_lanes_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.port_id is not None:
            oprot.writeFieldBegin('port_id', TType.I32, 2)
            oprot.writeI32(self.port_id)
            oprot.writeFieldEnd()
        if self.port_speeds is not None:
            oprot.writeFieldBegin('port_speeds', TType.I32, 3)
            oprot.writeI32(self.port_speeds)
            oprot.writeFieldEnd()
        if self.port_lanes is not None:
            oprot.writeFieldBegin('port_lanes', TType.I32, 4)
            oprot.writeI32(self.port_lanes)
            oprot.writeFieldEnd()
        if self.port_fec_types is not None:
            oprot.writeFieldBegin('port_fec_types', TType.I32, 5)
            oprot.writeI32(self.port_fec_types)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(devport_mgr_add_port_with_lanes_args)
devport_mgr_add_port_with_lanes_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'port_id', None, None, ),  # 2
    (3, TType.I32, 'port_speeds', None, None, ),  # 3
    (4, TType.I32, 'port_lanes', None, None, ),  # 4
    (5, TType.I32, 'port_fec_types', None, None, ),  # 5
)


class devport_mgr_add_port_with_lanes_result(object):
    """
    Attributes:
     - ouch

    """


    def __init__(self, ouch=None,):
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidDevportMgrOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('devport_mgr_add_port_with_lanes_result')
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(devport_mgr_add_port_with_lanes_result)
devport_mgr_add_port_with_lanes_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'ouch', [InvalidDevportMgrOperation, None], None, ),  # 1
)


class devport_mgr_remove_port_args(object):
    """
    Attributes:
     - dev_id
     - port_id

    """


    def __init__(self, dev_id=None, port_id=None,):
        self.dev_id = dev_id
        self.port_id = port_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.port_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('devport_mgr_remove_port_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.port_id is not None:
            oprot.writeFieldBegin('port_id', TType.I32, 2)
            oprot.writeI32(self.port_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(devport_mgr_remove_port_args)
devport_mgr_remove_port_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'port_id', None, None, ),  # 2
)


class devport_mgr_remove_port_result(object):
    """
    Attributes:
     - ouch

    """


    def __init__(self, ouch=None,):
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidDevportMgrOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('devport_mgr_remove_port_result')
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(devport_mgr_remove_port_result)
devport_mgr_remove_port_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'ouch', [InvalidDevportMgrOperation, None], None, ),  # 1
)


class devport_mgr_port_ca_get_args(object):
    """
    Attributes:
     - dev_id
     - port_id

    """


    def __init__(self, dev_id=None, port_id=None,):
        self.dev_id = dev_id
        self.port_id = port_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.port_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('devport_mgr_port_ca_get_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.port_id is not None:
            oprot.writeFieldBegin('port_id', TType.I32, 2)
            oprot.writeI32(self.port_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(devport_mgr_port_ca_get_args)
devport_mgr_port_ca_get_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'port_id', None, None, ),  # 2
)


class devport_mgr_port_ca_get_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidDevportMgrOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('devport_mgr_port_ca_get_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(devport_mgr_port_ca_get_result)
devport_mgr_port_ca_get_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidDevportMgrOperation, None], None, ),  # 1
)


class devport_mgr_serdes_ca_get_args(object):
    """
    Attributes:
     - dev_id
     - port_id

    """


    def __init__(self, dev_id=None, port_id=None,):
        self.dev_id = dev_id
        self.port_id = port_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.port_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('devport_mgr_serdes_ca_get_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.port_id is not None:
            oprot.writeFieldBegin('port_id', TType.I32, 2)
            oprot.writeI32(self.port_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(devport_mgr_serdes_ca_get_args)
devport_mgr_serdes_ca_get_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'port_id', None, None, ),  # 2
)


class devport_mgr_serdes_ca_get_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidDevportMgrOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('devport_mgr_serdes_ca_get_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(devport_mgr_serdes_ca_get_result)
devport_mgr_serdes_ca_get_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidDevportMgrOperation, None], None, ),  # 1
)


class devport_mgr_set_copy_to_cpu_args(object):
    """
    Attributes:
     - dev_id
     - enable
     - pport

    """


    def __init__(self, dev_id=None, enable=None, pport=None,):
        self.dev_id = dev_id
        self.enable = enable
        self.pport = pport

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BYTE:
                    self.enable = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I16:
                    self.pport = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('devport_mgr_set_copy_to_cpu_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.enable is not None:
            oprot.writeFieldBegin('enable', TType.BYTE, 2)
            oprot.writeByte(self.enable)
            oprot.writeFieldEnd()
        if self.pport is not None:
            oprot.writeFieldBegin('pport', TType.I16, 3)
            oprot.writeI16(self.pport)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(devport_mgr_set_copy_to_cpu_args)
devport_mgr_set_copy_to_cpu_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.BYTE, 'enable', None, None, ),  # 2
    (3, TType.I16, 'pport', None, None, ),  # 3
)


class devport_mgr_set_copy_to_cpu_result(object):
    """
    Attributes:
     - ouch

    """


    def __init__(self, ouch=None,):
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidDevportMgrOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('devport_mgr_set_copy_to_cpu_result')
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(devport_mgr_set_copy_to_cpu_result)
devport_mgr_set_copy_to_cpu_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'ouch', [InvalidDevportMgrOperation, None], None, ),  # 1
)


class devport_mgr_pcie_cpu_port_get_args(object):
    """
    Attributes:
     - dev_id

    """


    def __init__(self, dev_id=None,):
        self.dev_id = dev_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('devport_mgr_pcie_cpu_port_get_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(devport_mgr_pcie_cpu_port_get_args)
devport_mgr_pcie_cpu_port_get_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
)


class devport_mgr_pcie_cpu_port_get_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidDevportMgrOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('devport_mgr_pcie_cpu_port_get_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(devport_mgr_pcie_cpu_port_get_result)
devport_mgr_pcie_cpu_port_get_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidDevportMgrOperation, None], None, ),  # 1
)


class devport_mgr_eth_cpu_port_get_args(object):
    """
    Attributes:
     - dev_id

    """


    def __init__(self, dev_id=None,):
        self.dev_id = dev_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('devport_mgr_eth_cpu_port_get_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(devport_mgr_eth_cpu_port_get_args)
devport_mgr_eth_cpu_port_get_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
)


class devport_mgr_eth_cpu_port_get_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidDevportMgrOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('devport_mgr_eth_cpu_port_get_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(devport_mgr_eth_cpu_port_get_result)
devport_mgr_eth_cpu_port_get_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidDevportMgrOperation, None], None, ),  # 1
)


class devport_mgr_warm_init_begin_args(object):
    """
    Attributes:
     - dev_id
     - warm_init_mode
     - serdes_upgrade_mode
     - upgrade_agents

    """


    def __init__(self, dev_id=None, warm_init_mode=None, serdes_upgrade_mode=None, upgrade_agents=None,):
        self.dev_id = dev_id
        self.warm_init_mode = warm_init_mode
        self.serdes_upgrade_mode = serdes_upgrade_mode
        self.upgrade_agents = upgrade_agents

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.warm_init_mode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.serdes_upgrade_mode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.upgrade_agents = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('devport_mgr_warm_init_begin_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.warm_init_mode is not None:
            oprot.writeFieldBegin('warm_init_mode', TType.I32, 2)
            oprot.writeI32(self.warm_init_mode)
            oprot.writeFieldEnd()
        if self.serdes_upgrade_mode is not None:
            oprot.writeFieldBegin('serdes_upgrade_mode', TType.I32, 3)
            oprot.writeI32(self.serdes_upgrade_mode)
            oprot.writeFieldEnd()
        if self.upgrade_agents is not None:
            oprot.writeFieldBegin('upgrade_agents', TType.BOOL, 4)
            oprot.writeBool(self.upgrade_agents)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(devport_mgr_warm_init_begin_args)
devport_mgr_warm_init_begin_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'warm_init_mode', None, None, ),  # 2
    (3, TType.I32, 'serdes_upgrade_mode', None, None, ),  # 3
    (4, TType.BOOL, 'upgrade_agents', None, None, ),  # 4
)


class devport_mgr_warm_init_begin_result(object):
    """
    Attributes:
     - ouch

    """


    def __init__(self, ouch=None,):
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidDevportMgrOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('devport_mgr_warm_init_begin_result')
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(devport_mgr_warm_init_begin_result)
devport_mgr_warm_init_begin_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'ouch', [InvalidDevportMgrOperation, None], None, ),  # 1
)


class devport_mgr_warm_init_end_args(object):
    """
    Attributes:
     - dev_id

    """


    def __init__(self, dev_id=None,):
        self.dev_id = dev_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('devport_mgr_warm_init_end_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(devport_mgr_warm_init_end_args)
devport_mgr_warm_init_end_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
)


class devport_mgr_warm_init_end_result(object):
    """
    Attributes:
     - ouch

    """


    def __init__(self, ouch=None,):
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidDevportMgrOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('devport_mgr_warm_init_end_result')
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(devport_mgr_warm_init_end_result)
devport_mgr_warm_init_end_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'ouch', [InvalidDevportMgrOperation, None], None, ),  # 1
)


class devport_mgr_get_parser_id_args(object):
    """
    Attributes:
     - dev_id
     - port_id

    """


    def __init__(self, dev_id=None, port_id=None,):
        self.dev_id = dev_id
        self.port_id = port_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.port_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('devport_mgr_get_parser_id_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.port_id is not None:
            oprot.writeFieldBegin('port_id', TType.I32, 2)
            oprot.writeI32(self.port_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(devport_mgr_get_parser_id_args)
devport_mgr_get_parser_id_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'port_id', None, None, ),  # 2
)


class devport_mgr_get_parser_id_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidDevportMgrOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('devport_mgr_get_parser_id_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(devport_mgr_get_parser_id_result)
devport_mgr_get_parser_id_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidDevportMgrOperation, None], None, ),  # 1
)


class devport_mgr_get_pipe_id_args(object):
    """
    Attributes:
     - dev_id
     - port_id

    """


    def __init__(self, dev_id=None, port_id=None,):
        self.dev_id = dev_id
        self.port_id = port_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.port_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('devport_mgr_get_pipe_id_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.port_id is not None:
            oprot.writeFieldBegin('port_id', TType.I32, 2)
            oprot.writeI32(self.port_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(devport_mgr_get_pipe_id_args)
devport_mgr_get_pipe_id_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'port_id', None, None, ),  # 2
)


class devport_mgr_get_pipe_id_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidDevportMgrOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('devport_mgr_get_pipe_id_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(devport_mgr_get_pipe_id_result)
devport_mgr_get_pipe_id_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidDevportMgrOperation, None], None, ),  # 1
)


class devport_mgr_set_virtual_dev_slave_mode_args(object):
    """
    Attributes:
     - dev_id

    """


    def __init__(self, dev_id=None,):
        self.dev_id = dev_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('devport_mgr_set_virtual_dev_slave_mode_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(devport_mgr_set_virtual_dev_slave_mode_args)
devport_mgr_set_virtual_dev_slave_mode_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
)


class devport_mgr_set_virtual_dev_slave_mode_result(object):
    """
    Attributes:
     - ouch

    """


    def __init__(self, ouch=None,):
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidDevportMgrOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('devport_mgr_set_virtual_dev_slave_mode_result')
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(devport_mgr_set_virtual_dev_slave_mode_result)
devport_mgr_set_virtual_dev_slave_mode_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'ouch', [InvalidDevportMgrOperation, None], None, ),  # 1
)


class devport_mgr_get_clock_speed_args(object):
    """
    Attributes:
     - dev_id

    """


    def __init__(self, dev_id=None,):
        self.dev_id = dev_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('devport_mgr_get_clock_speed_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(devport_mgr_get_clock_speed_args)
devport_mgr_get_clock_speed_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
)


class devport_mgr_get_clock_speed_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = clock_speed()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidDevportMgrOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('devport_mgr_get_clock_speed_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(devport_mgr_get_clock_speed_result)
devport_mgr_get_clock_speed_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [clock_speed, None], None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidDevportMgrOperation, None], None, ),  # 1
)


class devport_mgr_lrt_dr_timeout_set_args(object):
    """
    Attributes:
     - dev_id
     - timeout_ms

    """


    def __init__(self, dev_id=None, timeout_ms=None,):
        self.dev_id = dev_id
        self.timeout_ms = timeout_ms

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.timeout_ms = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('devport_mgr_lrt_dr_timeout_set_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.timeout_ms is not None:
            oprot.writeFieldBegin('timeout_ms', TType.I32, 2)
            oprot.writeI32(self.timeout_ms)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(devport_mgr_lrt_dr_timeout_set_args)
devport_mgr_lrt_dr_timeout_set_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'timeout_ms', None, None, ),  # 2
)


class devport_mgr_lrt_dr_timeout_set_result(object):
    """
    Attributes:
     - ouch

    """


    def __init__(self, ouch=None,):
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidDevportMgrOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('devport_mgr_lrt_dr_timeout_set_result')
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(devport_mgr_lrt_dr_timeout_set_result)
devport_mgr_lrt_dr_timeout_set_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'ouch', [InvalidDevportMgrOperation, None], None, ),  # 1
)


class devport_mgr_lrt_dr_timeout_get_args(object):
    """
    Attributes:
     - dev_id

    """


    def __init__(self, dev_id=None,):
        self.dev_id = dev_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('devport_mgr_lrt_dr_timeout_get_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(devport_mgr_lrt_dr_timeout_get_args)
devport_mgr_lrt_dr_timeout_get_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
)


class devport_mgr_lrt_dr_timeout_get_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidDevportMgrOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('devport_mgr_lrt_dr_timeout_get_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(devport_mgr_lrt_dr_timeout_get_result)
devport_mgr_lrt_dr_timeout_get_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidDevportMgrOperation, None], None, ),  # 1
)


class devport_mgr_register_for_error_events_args(object):
    """
    Attributes:
     - dev_id

    """


    def __init__(self, dev_id=None,):
        self.dev_id = dev_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('devport_mgr_register_for_error_events_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(devport_mgr_register_for_error_events_args)
devport_mgr_register_for_error_events_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
)


class devport_mgr_register_for_error_events_result(object):
    """
    Attributes:
     - ouch

    """


    def __init__(self, ouch=None,):
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidDevportMgrOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('devport_mgr_register_for_error_events_result')
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(devport_mgr_register_for_error_events_result)
devport_mgr_register_for_error_events_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'ouch', [InvalidDevportMgrOperation, None], None, ),  # 1
)


class devport_mgr_get_error_events_args(object):
    """
    Attributes:
     - dev_id

    """


    def __init__(self, dev_id=None,):
        self.dev_id = dev_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('devport_mgr_get_error_events_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(devport_mgr_get_error_events_args)
devport_mgr_get_error_events_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
)


class devport_mgr_get_error_events_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = error_event_record()
                        _elem5.read(iprot)
                        self.success.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('devport_mgr_get_error_events_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter6 in self.success:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(devport_mgr_get_error_events_result)
devport_mgr_get_error_events_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [error_event_record, None], False), None, ),  # 0
)
fix_spec(all_structs)
del all_structs
