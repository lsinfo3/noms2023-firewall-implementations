#
# Autogenerated by Thrift Compiler (0.14.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:package_prefix=controller.thrift_api.
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import controller.thrift_api.res_pd_rpc.ttypes

from thrift.transport import TTransport
all_structs = []


class dev_init_mode(object):
    DEV_INIT_COLD = 0
    DEV_WARM_INIT_FAST_RECFG = 1
    DEV_WARM_INIT_HITLESS = 2
    DEV_WARM_INIT_FAST_RECFG_QUICK = 3

    _VALUES_TO_NAMES = {
        0: "DEV_INIT_COLD",
        1: "DEV_WARM_INIT_FAST_RECFG",
        2: "DEV_WARM_INIT_HITLESS",
        3: "DEV_WARM_INIT_FAST_RECFG_QUICK",
    }

    _NAMES_TO_VALUES = {
        "DEV_INIT_COLD": 0,
        "DEV_WARM_INIT_FAST_RECFG": 1,
        "DEV_WARM_INIT_HITLESS": 2,
        "DEV_WARM_INIT_FAST_RECFG_QUICK": 3,
    }


class dev_serdes_upgrade_mode(object):
    DEV_SERDES_UPD_NONE = 0
    DEV_SERDES_UPD_FORCED_PORT_RECFG = 1
    DEV_SERDES_UPD_DEFERRED_PORT_RECFG = 2

    _VALUES_TO_NAMES = {
        0: "DEV_SERDES_UPD_NONE",
        1: "DEV_SERDES_UPD_FORCED_PORT_RECFG",
        2: "DEV_SERDES_UPD_DEFERRED_PORT_RECFG",
    }

    _NAMES_TO_VALUES = {
        "DEV_SERDES_UPD_NONE": 0,
        "DEV_SERDES_UPD_FORCED_PORT_RECFG": 1,
        "DEV_SERDES_UPD_DEFERRED_PORT_RECFG": 2,
    }


class dev_port_corrective_action(object):
    HA_CA_PORT_NONE = 0
    HA_CA_PORT_ADD = 1
    HA_CA_PORT_ENABLE = 2
    HA_CA_PORT_ADD_THEN_ENABLE = 3
    HA_CA_PORT_FLAP = 4
    HA_CA_PORT_DISABLE = 5
    HA_CA_PORT_DELETE_THEN_ADD = 6
    HA_CA_PORT_DELETE_THEN_ADD_THEN_ENABLE = 7
    HA_CA_PORT_DELETE = 8
    HA_CA_PORT_MAX = 9

    _VALUES_TO_NAMES = {
        0: "HA_CA_PORT_NONE",
        1: "HA_CA_PORT_ADD",
        2: "HA_CA_PORT_ENABLE",
        3: "HA_CA_PORT_ADD_THEN_ENABLE",
        4: "HA_CA_PORT_FLAP",
        5: "HA_CA_PORT_DISABLE",
        6: "HA_CA_PORT_DELETE_THEN_ADD",
        7: "HA_CA_PORT_DELETE_THEN_ADD_THEN_ENABLE",
        8: "HA_CA_PORT_DELETE",
        9: "HA_CA_PORT_MAX",
    }

    _NAMES_TO_VALUES = {
        "HA_CA_PORT_NONE": 0,
        "HA_CA_PORT_ADD": 1,
        "HA_CA_PORT_ENABLE": 2,
        "HA_CA_PORT_ADD_THEN_ENABLE": 3,
        "HA_CA_PORT_FLAP": 4,
        "HA_CA_PORT_DISABLE": 5,
        "HA_CA_PORT_DELETE_THEN_ADD": 6,
        "HA_CA_PORT_DELETE_THEN_ADD_THEN_ENABLE": 7,
        "HA_CA_PORT_DELETE": 8,
        "HA_CA_PORT_MAX": 9,
    }


class bf_error_sev_level(object):
    BF_ERR_SEV_CORRECTABLE = 0
    BF_ERR_SEV_NON_CORRECTABLE = 1
    BF_ERR_SEV_FATAL = 2

    _VALUES_TO_NAMES = {
        0: "BF_ERR_SEV_CORRECTABLE",
        1: "BF_ERR_SEV_NON_CORRECTABLE",
        2: "BF_ERR_SEV_FATAL",
    }

    _NAMES_TO_VALUES = {
        "BF_ERR_SEV_CORRECTABLE": 0,
        "BF_ERR_SEV_NON_CORRECTABLE": 1,
        "BF_ERR_SEV_FATAL": 2,
    }


class bf_error_type(object):
    BF_ERR_TYPE_GENERIC = 0
    BF_ERR_TYPE_SINGLE_BIT_ECC = 1
    BF_ERR_TYPE_MULTI_BIT_ECC = 2
    BF_ERR_TYPE_PARITY = 3
    BF_ERR_TYPE_OVERFLOW = 4
    BF_ERR_TYPE_UNDERFLOW = 5

    _VALUES_TO_NAMES = {
        0: "BF_ERR_TYPE_GENERIC",
        1: "BF_ERR_TYPE_SINGLE_BIT_ECC",
        2: "BF_ERR_TYPE_MULTI_BIT_ECC",
        3: "BF_ERR_TYPE_PARITY",
        4: "BF_ERR_TYPE_OVERFLOW",
        5: "BF_ERR_TYPE_UNDERFLOW",
    }

    _NAMES_TO_VALUES = {
        "BF_ERR_TYPE_GENERIC": 0,
        "BF_ERR_TYPE_SINGLE_BIT_ECC": 1,
        "BF_ERR_TYPE_MULTI_BIT_ECC": 2,
        "BF_ERR_TYPE_PARITY": 3,
        "BF_ERR_TYPE_OVERFLOW": 4,
        "BF_ERR_TYPE_UNDERFLOW": 5,
    }


class bf_error_block(object):
    BF_ERR_BLK_NONE = 0
    BF_ERR_BLK_MAU = 1
    BF_ERR_BLK_TCAM = 2
    BF_ERR_BLK_SRAM = 3
    BF_ERR_BLK_MAP_RAM = 4
    BF_ERR_BLK_STATS = 5
    BF_ERR_BLK_METERS = 6
    BF_ERR_BLK_SYNTH2PORT = 7
    BF_ERR_BLK_SELECTOR_ALU = 8
    BF_ERR_BLK_IMEM = 9
    BF_ERR_BLK_MIRROR = 10
    BF_ERR_BLK_TM_PRE = 11
    BF_ERR_BLK_TM_WAC = 12
    BF_ERR_BLK_TM_QAC = 13
    BF_ERR_BLK_TM_CLC = 14
    BF_ERR_BLK_TM_PEX = 15
    BF_ERR_BLK_TM_QLC = 16
    BF_ERR_BLK_TM_PRC = 17
    BF_ERR_BLK_TM_PSC = 18
    BF_ERR_BLK_TM_CAA = 19
    BF_ERR_BLK_TM_SCH = 20
    BF_ERR_BLK_PRSR = 21
    BF_ERR_BLK_DEPRSR = 22
    BF_ERR_BLK_PKTGEN = 23
    BF_ERR_BLK_GFM = 24
    BF_ERR_BLK_DMA = 25

    _VALUES_TO_NAMES = {
        0: "BF_ERR_BLK_NONE",
        1: "BF_ERR_BLK_MAU",
        2: "BF_ERR_BLK_TCAM",
        3: "BF_ERR_BLK_SRAM",
        4: "BF_ERR_BLK_MAP_RAM",
        5: "BF_ERR_BLK_STATS",
        6: "BF_ERR_BLK_METERS",
        7: "BF_ERR_BLK_SYNTH2PORT",
        8: "BF_ERR_BLK_SELECTOR_ALU",
        9: "BF_ERR_BLK_IMEM",
        10: "BF_ERR_BLK_MIRROR",
        11: "BF_ERR_BLK_TM_PRE",
        12: "BF_ERR_BLK_TM_WAC",
        13: "BF_ERR_BLK_TM_QAC",
        14: "BF_ERR_BLK_TM_CLC",
        15: "BF_ERR_BLK_TM_PEX",
        16: "BF_ERR_BLK_TM_QLC",
        17: "BF_ERR_BLK_TM_PRC",
        18: "BF_ERR_BLK_TM_PSC",
        19: "BF_ERR_BLK_TM_CAA",
        20: "BF_ERR_BLK_TM_SCH",
        21: "BF_ERR_BLK_PRSR",
        22: "BF_ERR_BLK_DEPRSR",
        23: "BF_ERR_BLK_PKTGEN",
        24: "BF_ERR_BLK_GFM",
        25: "BF_ERR_BLK_DMA",
    }

    _NAMES_TO_VALUES = {
        "BF_ERR_BLK_NONE": 0,
        "BF_ERR_BLK_MAU": 1,
        "BF_ERR_BLK_TCAM": 2,
        "BF_ERR_BLK_SRAM": 3,
        "BF_ERR_BLK_MAP_RAM": 4,
        "BF_ERR_BLK_STATS": 5,
        "BF_ERR_BLK_METERS": 6,
        "BF_ERR_BLK_SYNTH2PORT": 7,
        "BF_ERR_BLK_SELECTOR_ALU": 8,
        "BF_ERR_BLK_IMEM": 9,
        "BF_ERR_BLK_MIRROR": 10,
        "BF_ERR_BLK_TM_PRE": 11,
        "BF_ERR_BLK_TM_WAC": 12,
        "BF_ERR_BLK_TM_QAC": 13,
        "BF_ERR_BLK_TM_CLC": 14,
        "BF_ERR_BLK_TM_PEX": 15,
        "BF_ERR_BLK_TM_QLC": 16,
        "BF_ERR_BLK_TM_PRC": 17,
        "BF_ERR_BLK_TM_PSC": 18,
        "BF_ERR_BLK_TM_CAA": 19,
        "BF_ERR_BLK_TM_SCH": 20,
        "BF_ERR_BLK_PRSR": 21,
        "BF_ERR_BLK_DEPRSR": 22,
        "BF_ERR_BLK_PKTGEN": 23,
        "BF_ERR_BLK_GFM": 24,
        "BF_ERR_BLK_DMA": 25,
    }


class bf_error_block_location(object):
    BF_ERR_LOC_NONE = 0
    BF_ERR_LOC_MAU_IDLETIME = 1
    BF_ERR_LOC_MAU_STATEFUL_LOG = 2
    BF_ERR_LOC_SELECTOR_ALU_ST_MINMAX = 3
    BF_ERR_LOC_SELECTOR_ALU_DEV_BY0 = 4
    BF_ERR_LOC_SELECTOR_ALU_SALU_PRED = 5
    BF_ERR_LOC_MIRR_POINTER_FIFO = 6
    BF_ERR_LOC_MIRR_IG = 7
    BF_ERR_LOC_MIRR_EG = 8
    BF_ERR_LOC_MIRR_OUT_DESC = 9
    BF_ERR_LOC_MIRR_DATA_BUFFER = 10
    BF_ERR_LOC_MIRR_DROP_NEG = 11
    BF_ERR_LOC_MIRR_DROP_COAL = 12
    BF_ERR_LOC_MIRR_IG_DIS_SESS = 13
    BF_ERR_LOC_MIRR_EG_DIS_SESS = 14
    BF_ERR_LOC_MIRR_OUT = 15
    BF_ERR_LOC_MIRR_CRC12 = 16
    BF_ERR_LOC_MIRR_SESSION = 17
    BF_ERR_LOC_MIRR_S2P_CREDIT = 18
    BF_ERR_LOC_MIRR_IDPRSR_SOPEOP_MISMATCH = 19
    BF_ERR_LOC_MIRR_EDPRSR_SOPEOP_MISMATCH = 20
    BF_ERR_LOC_MIRR_DATA_MEM = 21
    BF_ERR_LOC_TM_PRE_FIFO = 22
    BF_ERR_LOC_TM_PRE_MIT = 23
    BF_ERR_LOC_TM_PRE_LIT0_BM = 24
    BF_ERR_LOC_TM_PRE_LIT1_BM = 25
    BF_ERR_LOC_TM_PRE_LIT0_NP = 26
    BF_ERR_LOC_TM_PRE_LIT1_NP = 27
    BF_ERR_LOC_TM_PRE_PMT0 = 28
    BF_ERR_LOC_TM_PRE_PMT1 = 29
    BF_ERR_LOC_TM_PRE_RDM = 30
    BF_ERR_LOC_TM_PRE_BANKID_MEM = 31
    BF_ERR_LOC_TM_WAC_PPG_MAP = 32
    BF_ERR_LOC_TM_WAC_DROP_CNT = 33
    BF_ERR_LOC_TM_WAC_PFC_VIS = 34
    BF_ERR_LOC_TM_WAC_SCH_FCR = 35
    BF_ERR_LOC_TM_WAC_QID_MAP = 36
    BF_ERR_LOC_TM_WAC_WAC2QAC = 37
    BF_ERR_LOC_TM_QAC_QUE_DROP = 38
    BF_ERR_LOC_TM_QAC_PORT_DROP = 39
    BF_ERR_LOC_TM_QAC_QID_MAP = 40
    BF_ERR_LOC_TM_QAC_QAC2PRC = 41
    BF_ERR_LOC_TM_QAC_PRC2PSC = 42
    BF_ERR_LOC_TM_CLC_ENQ_FIFO = 43
    BF_ERR_LOC_TM_CLC_QAC_FIFO = 44
    BF_ERR_LOC_TM_CLC_PH_FIFO = 45
    BF_ERR_LOC_TM_CLC_QAC_PH_FIFO = 46
    BF_ERR_LOC_TM_PEX_CLM = 47
    BF_ERR_LOC_TM_PEX_PH_FIFO = 48
    BF_ERR_LOC_TM_PEX_META_FIFO = 49
    BF_ERR_LOC_TM_PEX_PH_AFIFO = 50
    BF_ERR_LOC_TM_PEX_DISCARD_FIFO = 51
    BF_ERR_LOC_TM_QLC_QLM = 52
    BF_ERR_LOC_TM_QLC_SCHDEQ = 53
    BF_ERR_LOC_TM_QLC_PH_FIFO = 54
    BF_ERR_LOC_TM_PRC_T3 = 55
    BF_ERR_LOC_TM_PSC_PSM = 56
    BF_ERR_LOC_TM_PSC_COMM = 57
    BF_ERR_LOC_TM_CAA = 58
    BF_ERR_LOC_TM_SCH_TDM = 59
    BF_ERR_LOC_TM_SCH_UPD_WAC = 60
    BF_ERR_LOC_TM_SCH_UPD_EDPRSR_ADVFC = 61
    BF_ERR_LOC_TM_SCH_Q_MINRATE = 62
    BF_ERR_LOC_TM_SCH_Q_EXCRATE = 63
    BF_ERR_LOC_TM_SCH_Q_MAXRATE = 64
    BF_ERR_LOC_TM_SCH_L1_MINRATE = 65
    BF_ERR_LOC_TM_SCH_L1_EXCRATE = 66
    BF_ERR_LOC_TM_SCH_L1_MAXRATE = 67
    BF_ERR_LOC_TM_SCH_P_MAXRATE = 68
    BF_ERR_LOC_TM_SCH_UPD_PEX = 69
    BF_ERR_LOC_TM_SCH_UPD_EDPRSR = 70
    BF_ERR_LOC_TM_SCH_PEX_CREDIT = 71
    BF_ERR_LOC_TM_SCH_PEX_MAC_CREDIT = 72
    BF_ERR_LOC_TM_SCH_Q_WATCHDOG = 73
    BF_ERR_LOC_PRSR_ACT_RAM = 74
    BF_ERR_LOC_PRSR_INP_BUFF = 75
    BF_ERR_LOC_PRSR_OUT_FIFO = 76
    BF_ERR_LOC_PRSR_TCAM_PARITY = 77
    BF_ERR_LOC_PRSR_CSUM = 78
    BF_ERR_LOC_DEPRSR_PIPE_VEC_TBL0 = 79
    BF_ERR_LOC_DEPRSR_PIPE_VEC_TBL1 = 80
    BF_ERR_LOC_DEPRSR_MIRRTBL = 81
    BF_ERR_LOC_DEPRSR_IPKT_MAC = 82
    BF_ERR_LOC_DEPRSR_CMD_FIFO = 83
    BF_ERR_LOC_DEPRSR_CRED_ERR = 84
    BF_ERR_LOC_DEPRSR_PKTST = 85
    BF_ERR_LOC_DEPRSR_META_FIFO = 86
    BF_ERR_LOC_DEPRSR_PKTHDR = 87
    BF_ERR_LOC_DEPRSR_MIRRHDR = 88
    BF_ERR_LOC_DEPRSR_DATAST = 89
    BF_ERR_LOC_DEPRSR_PKTDATA = 90
    BF_ERR_LOC_DEPRSR_TMSCH = 91
    BF_ERR_LOC_DEPRSR_ARB_FIFO = 92
    BF_ERR_LOC_DEPRSR_CTL_CHAN = 93
    BF_ERR_LOC_PKTGEN_BUFFER = 94
    BF_ERR_LOC_PKTGEN_PFC = 95
    BF_ERR_LOC_PKTGEN_TBC_FIFO = 96
    BF_ERR_LOC_PKTGEN_ETH_CPU_FIFO = 97
    BF_ERR_LOC_PKTGEN_EBUF_P0_FIFO = 98
    BF_ERR_LOC_PKTGEN_EBUF_P1_FIFO = 99
    BF_ERR_LOC_PKTGEN_EBUF_P2_FIFO = 100
    BF_ERR_LOC_PKTGEN_EBUF_P3_FIFO = 101
    BF_ERR_LOC_PKTGEN_APP_EVT = 102
    BF_ERR_LOC_PKTGEN_IPB_CHNL_SEQ = 103
    BF_ERR_LOC_PKTGEN_ETH_CPU_TBC_SAMECHNL = 104
    BF_ERR_LOC_PKTGEN_ETH_PORT_FIFO = 105
    BF_ERR_LOC_PKTGEN_PHASE0 = 106
    BF_ERR_LOC_GFM_INGRESS = 107
    BF_ERR_LOC_GFM_EGRESS = 108
    BF_ERR_LOC_DMA_PBC = 109
    BF_ERR_LOC_DMA_CBC = 110
    BF_ERR_LOC_DMA_MBC = 111

    _VALUES_TO_NAMES = {
        0: "BF_ERR_LOC_NONE",
        1: "BF_ERR_LOC_MAU_IDLETIME",
        2: "BF_ERR_LOC_MAU_STATEFUL_LOG",
        3: "BF_ERR_LOC_SELECTOR_ALU_ST_MINMAX",
        4: "BF_ERR_LOC_SELECTOR_ALU_DEV_BY0",
        5: "BF_ERR_LOC_SELECTOR_ALU_SALU_PRED",
        6: "BF_ERR_LOC_MIRR_POINTER_FIFO",
        7: "BF_ERR_LOC_MIRR_IG",
        8: "BF_ERR_LOC_MIRR_EG",
        9: "BF_ERR_LOC_MIRR_OUT_DESC",
        10: "BF_ERR_LOC_MIRR_DATA_BUFFER",
        11: "BF_ERR_LOC_MIRR_DROP_NEG",
        12: "BF_ERR_LOC_MIRR_DROP_COAL",
        13: "BF_ERR_LOC_MIRR_IG_DIS_SESS",
        14: "BF_ERR_LOC_MIRR_EG_DIS_SESS",
        15: "BF_ERR_LOC_MIRR_OUT",
        16: "BF_ERR_LOC_MIRR_CRC12",
        17: "BF_ERR_LOC_MIRR_SESSION",
        18: "BF_ERR_LOC_MIRR_S2P_CREDIT",
        19: "BF_ERR_LOC_MIRR_IDPRSR_SOPEOP_MISMATCH",
        20: "BF_ERR_LOC_MIRR_EDPRSR_SOPEOP_MISMATCH",
        21: "BF_ERR_LOC_MIRR_DATA_MEM",
        22: "BF_ERR_LOC_TM_PRE_FIFO",
        23: "BF_ERR_LOC_TM_PRE_MIT",
        24: "BF_ERR_LOC_TM_PRE_LIT0_BM",
        25: "BF_ERR_LOC_TM_PRE_LIT1_BM",
        26: "BF_ERR_LOC_TM_PRE_LIT0_NP",
        27: "BF_ERR_LOC_TM_PRE_LIT1_NP",
        28: "BF_ERR_LOC_TM_PRE_PMT0",
        29: "BF_ERR_LOC_TM_PRE_PMT1",
        30: "BF_ERR_LOC_TM_PRE_RDM",
        31: "BF_ERR_LOC_TM_PRE_BANKID_MEM",
        32: "BF_ERR_LOC_TM_WAC_PPG_MAP",
        33: "BF_ERR_LOC_TM_WAC_DROP_CNT",
        34: "BF_ERR_LOC_TM_WAC_PFC_VIS",
        35: "BF_ERR_LOC_TM_WAC_SCH_FCR",
        36: "BF_ERR_LOC_TM_WAC_QID_MAP",
        37: "BF_ERR_LOC_TM_WAC_WAC2QAC",
        38: "BF_ERR_LOC_TM_QAC_QUE_DROP",
        39: "BF_ERR_LOC_TM_QAC_PORT_DROP",
        40: "BF_ERR_LOC_TM_QAC_QID_MAP",
        41: "BF_ERR_LOC_TM_QAC_QAC2PRC",
        42: "BF_ERR_LOC_TM_QAC_PRC2PSC",
        43: "BF_ERR_LOC_TM_CLC_ENQ_FIFO",
        44: "BF_ERR_LOC_TM_CLC_QAC_FIFO",
        45: "BF_ERR_LOC_TM_CLC_PH_FIFO",
        46: "BF_ERR_LOC_TM_CLC_QAC_PH_FIFO",
        47: "BF_ERR_LOC_TM_PEX_CLM",
        48: "BF_ERR_LOC_TM_PEX_PH_FIFO",
        49: "BF_ERR_LOC_TM_PEX_META_FIFO",
        50: "BF_ERR_LOC_TM_PEX_PH_AFIFO",
        51: "BF_ERR_LOC_TM_PEX_DISCARD_FIFO",
        52: "BF_ERR_LOC_TM_QLC_QLM",
        53: "BF_ERR_LOC_TM_QLC_SCHDEQ",
        54: "BF_ERR_LOC_TM_QLC_PH_FIFO",
        55: "BF_ERR_LOC_TM_PRC_T3",
        56: "BF_ERR_LOC_TM_PSC_PSM",
        57: "BF_ERR_LOC_TM_PSC_COMM",
        58: "BF_ERR_LOC_TM_CAA",
        59: "BF_ERR_LOC_TM_SCH_TDM",
        60: "BF_ERR_LOC_TM_SCH_UPD_WAC",
        61: "BF_ERR_LOC_TM_SCH_UPD_EDPRSR_ADVFC",
        62: "BF_ERR_LOC_TM_SCH_Q_MINRATE",
        63: "BF_ERR_LOC_TM_SCH_Q_EXCRATE",
        64: "BF_ERR_LOC_TM_SCH_Q_MAXRATE",
        65: "BF_ERR_LOC_TM_SCH_L1_MINRATE",
        66: "BF_ERR_LOC_TM_SCH_L1_EXCRATE",
        67: "BF_ERR_LOC_TM_SCH_L1_MAXRATE",
        68: "BF_ERR_LOC_TM_SCH_P_MAXRATE",
        69: "BF_ERR_LOC_TM_SCH_UPD_PEX",
        70: "BF_ERR_LOC_TM_SCH_UPD_EDPRSR",
        71: "BF_ERR_LOC_TM_SCH_PEX_CREDIT",
        72: "BF_ERR_LOC_TM_SCH_PEX_MAC_CREDIT",
        73: "BF_ERR_LOC_TM_SCH_Q_WATCHDOG",
        74: "BF_ERR_LOC_PRSR_ACT_RAM",
        75: "BF_ERR_LOC_PRSR_INP_BUFF",
        76: "BF_ERR_LOC_PRSR_OUT_FIFO",
        77: "BF_ERR_LOC_PRSR_TCAM_PARITY",
        78: "BF_ERR_LOC_PRSR_CSUM",
        79: "BF_ERR_LOC_DEPRSR_PIPE_VEC_TBL0",
        80: "BF_ERR_LOC_DEPRSR_PIPE_VEC_TBL1",
        81: "BF_ERR_LOC_DEPRSR_MIRRTBL",
        82: "BF_ERR_LOC_DEPRSR_IPKT_MAC",
        83: "BF_ERR_LOC_DEPRSR_CMD_FIFO",
        84: "BF_ERR_LOC_DEPRSR_CRED_ERR",
        85: "BF_ERR_LOC_DEPRSR_PKTST",
        86: "BF_ERR_LOC_DEPRSR_META_FIFO",
        87: "BF_ERR_LOC_DEPRSR_PKTHDR",
        88: "BF_ERR_LOC_DEPRSR_MIRRHDR",
        89: "BF_ERR_LOC_DEPRSR_DATAST",
        90: "BF_ERR_LOC_DEPRSR_PKTDATA",
        91: "BF_ERR_LOC_DEPRSR_TMSCH",
        92: "BF_ERR_LOC_DEPRSR_ARB_FIFO",
        93: "BF_ERR_LOC_DEPRSR_CTL_CHAN",
        94: "BF_ERR_LOC_PKTGEN_BUFFER",
        95: "BF_ERR_LOC_PKTGEN_PFC",
        96: "BF_ERR_LOC_PKTGEN_TBC_FIFO",
        97: "BF_ERR_LOC_PKTGEN_ETH_CPU_FIFO",
        98: "BF_ERR_LOC_PKTGEN_EBUF_P0_FIFO",
        99: "BF_ERR_LOC_PKTGEN_EBUF_P1_FIFO",
        100: "BF_ERR_LOC_PKTGEN_EBUF_P2_FIFO",
        101: "BF_ERR_LOC_PKTGEN_EBUF_P3_FIFO",
        102: "BF_ERR_LOC_PKTGEN_APP_EVT",
        103: "BF_ERR_LOC_PKTGEN_IPB_CHNL_SEQ",
        104: "BF_ERR_LOC_PKTGEN_ETH_CPU_TBC_SAMECHNL",
        105: "BF_ERR_LOC_PKTGEN_ETH_PORT_FIFO",
        106: "BF_ERR_LOC_PKTGEN_PHASE0",
        107: "BF_ERR_LOC_GFM_INGRESS",
        108: "BF_ERR_LOC_GFM_EGRESS",
        109: "BF_ERR_LOC_DMA_PBC",
        110: "BF_ERR_LOC_DMA_CBC",
        111: "BF_ERR_LOC_DMA_MBC",
    }

    _NAMES_TO_VALUES = {
        "BF_ERR_LOC_NONE": 0,
        "BF_ERR_LOC_MAU_IDLETIME": 1,
        "BF_ERR_LOC_MAU_STATEFUL_LOG": 2,
        "BF_ERR_LOC_SELECTOR_ALU_ST_MINMAX": 3,
        "BF_ERR_LOC_SELECTOR_ALU_DEV_BY0": 4,
        "BF_ERR_LOC_SELECTOR_ALU_SALU_PRED": 5,
        "BF_ERR_LOC_MIRR_POINTER_FIFO": 6,
        "BF_ERR_LOC_MIRR_IG": 7,
        "BF_ERR_LOC_MIRR_EG": 8,
        "BF_ERR_LOC_MIRR_OUT_DESC": 9,
        "BF_ERR_LOC_MIRR_DATA_BUFFER": 10,
        "BF_ERR_LOC_MIRR_DROP_NEG": 11,
        "BF_ERR_LOC_MIRR_DROP_COAL": 12,
        "BF_ERR_LOC_MIRR_IG_DIS_SESS": 13,
        "BF_ERR_LOC_MIRR_EG_DIS_SESS": 14,
        "BF_ERR_LOC_MIRR_OUT": 15,
        "BF_ERR_LOC_MIRR_CRC12": 16,
        "BF_ERR_LOC_MIRR_SESSION": 17,
        "BF_ERR_LOC_MIRR_S2P_CREDIT": 18,
        "BF_ERR_LOC_MIRR_IDPRSR_SOPEOP_MISMATCH": 19,
        "BF_ERR_LOC_MIRR_EDPRSR_SOPEOP_MISMATCH": 20,
        "BF_ERR_LOC_MIRR_DATA_MEM": 21,
        "BF_ERR_LOC_TM_PRE_FIFO": 22,
        "BF_ERR_LOC_TM_PRE_MIT": 23,
        "BF_ERR_LOC_TM_PRE_LIT0_BM": 24,
        "BF_ERR_LOC_TM_PRE_LIT1_BM": 25,
        "BF_ERR_LOC_TM_PRE_LIT0_NP": 26,
        "BF_ERR_LOC_TM_PRE_LIT1_NP": 27,
        "BF_ERR_LOC_TM_PRE_PMT0": 28,
        "BF_ERR_LOC_TM_PRE_PMT1": 29,
        "BF_ERR_LOC_TM_PRE_RDM": 30,
        "BF_ERR_LOC_TM_PRE_BANKID_MEM": 31,
        "BF_ERR_LOC_TM_WAC_PPG_MAP": 32,
        "BF_ERR_LOC_TM_WAC_DROP_CNT": 33,
        "BF_ERR_LOC_TM_WAC_PFC_VIS": 34,
        "BF_ERR_LOC_TM_WAC_SCH_FCR": 35,
        "BF_ERR_LOC_TM_WAC_QID_MAP": 36,
        "BF_ERR_LOC_TM_WAC_WAC2QAC": 37,
        "BF_ERR_LOC_TM_QAC_QUE_DROP": 38,
        "BF_ERR_LOC_TM_QAC_PORT_DROP": 39,
        "BF_ERR_LOC_TM_QAC_QID_MAP": 40,
        "BF_ERR_LOC_TM_QAC_QAC2PRC": 41,
        "BF_ERR_LOC_TM_QAC_PRC2PSC": 42,
        "BF_ERR_LOC_TM_CLC_ENQ_FIFO": 43,
        "BF_ERR_LOC_TM_CLC_QAC_FIFO": 44,
        "BF_ERR_LOC_TM_CLC_PH_FIFO": 45,
        "BF_ERR_LOC_TM_CLC_QAC_PH_FIFO": 46,
        "BF_ERR_LOC_TM_PEX_CLM": 47,
        "BF_ERR_LOC_TM_PEX_PH_FIFO": 48,
        "BF_ERR_LOC_TM_PEX_META_FIFO": 49,
        "BF_ERR_LOC_TM_PEX_PH_AFIFO": 50,
        "BF_ERR_LOC_TM_PEX_DISCARD_FIFO": 51,
        "BF_ERR_LOC_TM_QLC_QLM": 52,
        "BF_ERR_LOC_TM_QLC_SCHDEQ": 53,
        "BF_ERR_LOC_TM_QLC_PH_FIFO": 54,
        "BF_ERR_LOC_TM_PRC_T3": 55,
        "BF_ERR_LOC_TM_PSC_PSM": 56,
        "BF_ERR_LOC_TM_PSC_COMM": 57,
        "BF_ERR_LOC_TM_CAA": 58,
        "BF_ERR_LOC_TM_SCH_TDM": 59,
        "BF_ERR_LOC_TM_SCH_UPD_WAC": 60,
        "BF_ERR_LOC_TM_SCH_UPD_EDPRSR_ADVFC": 61,
        "BF_ERR_LOC_TM_SCH_Q_MINRATE": 62,
        "BF_ERR_LOC_TM_SCH_Q_EXCRATE": 63,
        "BF_ERR_LOC_TM_SCH_Q_MAXRATE": 64,
        "BF_ERR_LOC_TM_SCH_L1_MINRATE": 65,
        "BF_ERR_LOC_TM_SCH_L1_EXCRATE": 66,
        "BF_ERR_LOC_TM_SCH_L1_MAXRATE": 67,
        "BF_ERR_LOC_TM_SCH_P_MAXRATE": 68,
        "BF_ERR_LOC_TM_SCH_UPD_PEX": 69,
        "BF_ERR_LOC_TM_SCH_UPD_EDPRSR": 70,
        "BF_ERR_LOC_TM_SCH_PEX_CREDIT": 71,
        "BF_ERR_LOC_TM_SCH_PEX_MAC_CREDIT": 72,
        "BF_ERR_LOC_TM_SCH_Q_WATCHDOG": 73,
        "BF_ERR_LOC_PRSR_ACT_RAM": 74,
        "BF_ERR_LOC_PRSR_INP_BUFF": 75,
        "BF_ERR_LOC_PRSR_OUT_FIFO": 76,
        "BF_ERR_LOC_PRSR_TCAM_PARITY": 77,
        "BF_ERR_LOC_PRSR_CSUM": 78,
        "BF_ERR_LOC_DEPRSR_PIPE_VEC_TBL0": 79,
        "BF_ERR_LOC_DEPRSR_PIPE_VEC_TBL1": 80,
        "BF_ERR_LOC_DEPRSR_MIRRTBL": 81,
        "BF_ERR_LOC_DEPRSR_IPKT_MAC": 82,
        "BF_ERR_LOC_DEPRSR_CMD_FIFO": 83,
        "BF_ERR_LOC_DEPRSR_CRED_ERR": 84,
        "BF_ERR_LOC_DEPRSR_PKTST": 85,
        "BF_ERR_LOC_DEPRSR_META_FIFO": 86,
        "BF_ERR_LOC_DEPRSR_PKTHDR": 87,
        "BF_ERR_LOC_DEPRSR_MIRRHDR": 88,
        "BF_ERR_LOC_DEPRSR_DATAST": 89,
        "BF_ERR_LOC_DEPRSR_PKTDATA": 90,
        "BF_ERR_LOC_DEPRSR_TMSCH": 91,
        "BF_ERR_LOC_DEPRSR_ARB_FIFO": 92,
        "BF_ERR_LOC_DEPRSR_CTL_CHAN": 93,
        "BF_ERR_LOC_PKTGEN_BUFFER": 94,
        "BF_ERR_LOC_PKTGEN_PFC": 95,
        "BF_ERR_LOC_PKTGEN_TBC_FIFO": 96,
        "BF_ERR_LOC_PKTGEN_ETH_CPU_FIFO": 97,
        "BF_ERR_LOC_PKTGEN_EBUF_P0_FIFO": 98,
        "BF_ERR_LOC_PKTGEN_EBUF_P1_FIFO": 99,
        "BF_ERR_LOC_PKTGEN_EBUF_P2_FIFO": 100,
        "BF_ERR_LOC_PKTGEN_EBUF_P3_FIFO": 101,
        "BF_ERR_LOC_PKTGEN_APP_EVT": 102,
        "BF_ERR_LOC_PKTGEN_IPB_CHNL_SEQ": 103,
        "BF_ERR_LOC_PKTGEN_ETH_CPU_TBC_SAMECHNL": 104,
        "BF_ERR_LOC_PKTGEN_ETH_PORT_FIFO": 105,
        "BF_ERR_LOC_PKTGEN_PHASE0": 106,
        "BF_ERR_LOC_GFM_INGRESS": 107,
        "BF_ERR_LOC_GFM_EGRESS": 108,
        "BF_ERR_LOC_DMA_PBC": 109,
        "BF_ERR_LOC_DMA_CBC": 110,
        "BF_ERR_LOC_DMA_MBC": 111,
    }


class bf_port_speeds(object):
    BF_PORT_SPEED_NONE = 0
    BF_PORT_SPEED_1G = 1
    BF_PORT_SPEED_10G = 2
    BF_PORT_SPEED_25G = 4
    BF_PORT_SPEED_40G = 8
    BF_PORT_SPEED_40G_NB = 16
    BF_PORT_SPEED_50G = 32
    BF_PORT_SPEED_100G = 64
    BF_PORT_SPEED_200G = 128
    BF_PORT_SPEED_400G = 256

    _VALUES_TO_NAMES = {
        0: "BF_PORT_SPEED_NONE",
        1: "BF_PORT_SPEED_1G",
        2: "BF_PORT_SPEED_10G",
        4: "BF_PORT_SPEED_25G",
        8: "BF_PORT_SPEED_40G",
        16: "BF_PORT_SPEED_40G_NB",
        32: "BF_PORT_SPEED_50G",
        64: "BF_PORT_SPEED_100G",
        128: "BF_PORT_SPEED_200G",
        256: "BF_PORT_SPEED_400G",
    }

    _NAMES_TO_VALUES = {
        "BF_PORT_SPEED_NONE": 0,
        "BF_PORT_SPEED_1G": 1,
        "BF_PORT_SPEED_10G": 2,
        "BF_PORT_SPEED_25G": 4,
        "BF_PORT_SPEED_40G": 8,
        "BF_PORT_SPEED_40G_NB": 16,
        "BF_PORT_SPEED_50G": 32,
        "BF_PORT_SPEED_100G": 64,
        "BF_PORT_SPEED_200G": 128,
        "BF_PORT_SPEED_400G": 256,
    }


class bf_fec_types(object):
    BF_FEC_TYP_NONE = 0
    BF_FEC_TYP_FIRECODE = 1
    BF_FEC_TYP_FC = 1
    BF_FEC_TYP_REED_SOLOMON = 2
    BF_FEC_TYP_RS = 2

    _VALUES_TO_NAMES = {
        0: "BF_FEC_TYP_NONE",
        1: "BF_FEC_TYP_FIRECODE",
        1: "BF_FEC_TYP_FC",
        2: "BF_FEC_TYP_REED_SOLOMON",
        2: "BF_FEC_TYP_RS",
    }

    _NAMES_TO_VALUES = {
        "BF_FEC_TYP_NONE": 0,
        "BF_FEC_TYP_FIRECODE": 1,
        "BF_FEC_TYP_FC": 1,
        "BF_FEC_TYP_REED_SOLOMON": 2,
        "BF_FEC_TYP_RS": 2,
    }


class InvalidDevportMgrOperation(TException):
    """
    Attributes:
     - code

    """


    def __init__(self, code=None,):
        super(InvalidDevportMgrOperation, self).__setattr__('code', code)

    def __setattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __delattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __hash__(self):
        return hash(self.__class__) ^ hash((self.code, ))

    @classmethod
    def read(cls, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and cls.thrift_spec is not None:
            return iprot._fast_decode(None, iprot, [cls, cls.thrift_spec])
        iprot.readStructBegin()
        code = None
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    code = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        return cls(
            code=code,
        )

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('InvalidDevportMgrOperation')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.I32, 1)
            oprot.writeI32(self.code)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class error_event_record(object):
    """
    Attributes:
     - sev
     - dev_id
     - pipe
     - stage
     - address
     - err_type
     - err_blk
     - err_loc
     - err_string

    """


    def __init__(self, sev=None, dev_id=None, pipe=None, stage=None, address=None, err_type=None, err_blk=None, err_loc=None, err_string=None,):
        self.sev = sev
        self.dev_id = dev_id
        self.pipe = pipe
        self.stage = stage
        self.address = address
        self.err_type = err_type
        self.err_blk = err_blk
        self.err_loc = err_loc
        self.err_string = err_string

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.sev = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.pipe = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BYTE:
                    self.stage = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.address = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.err_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.err_blk = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.err_loc = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.err_string = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('error_event_record')
        if self.sev is not None:
            oprot.writeFieldBegin('sev', TType.I32, 1)
            oprot.writeI32(self.sev)
            oprot.writeFieldEnd()
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 2)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.pipe is not None:
            oprot.writeFieldBegin('pipe', TType.I32, 3)
            oprot.writeI32(self.pipe)
            oprot.writeFieldEnd()
        if self.stage is not None:
            oprot.writeFieldBegin('stage', TType.BYTE, 4)
            oprot.writeByte(self.stage)
            oprot.writeFieldEnd()
        if self.address is not None:
            oprot.writeFieldBegin('address', TType.I64, 5)
            oprot.writeI64(self.address)
            oprot.writeFieldEnd()
        if self.err_type is not None:
            oprot.writeFieldBegin('err_type', TType.I32, 6)
            oprot.writeI32(self.err_type)
            oprot.writeFieldEnd()
        if self.err_blk is not None:
            oprot.writeFieldBegin('err_blk', TType.I32, 7)
            oprot.writeI32(self.err_blk)
            oprot.writeFieldEnd()
        if self.err_loc is not None:
            oprot.writeFieldBegin('err_loc', TType.I32, 8)
            oprot.writeI32(self.err_loc)
            oprot.writeFieldEnd()
        if self.err_string is not None:
            oprot.writeFieldBegin('err_string', TType.STRING, 9)
            oprot.writeString(self.err_string.encode('utf-8') if sys.version_info[0] == 2 else self.err_string)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.sev is None:
            raise TProtocolException(message='Required field sev is unset!')
        if self.dev_id is None:
            raise TProtocolException(message='Required field dev_id is unset!')
        if self.pipe is None:
            raise TProtocolException(message='Required field pipe is unset!')
        if self.stage is None:
            raise TProtocolException(message='Required field stage is unset!')
        if self.address is None:
            raise TProtocolException(message='Required field address is unset!')
        if self.err_type is None:
            raise TProtocolException(message='Required field err_type is unset!')
        if self.err_blk is None:
            raise TProtocolException(message='Required field err_blk is unset!')
        if self.err_loc is None:
            raise TProtocolException(message='Required field err_loc is unset!')
        if self.err_string is None:
            raise TProtocolException(message='Required field err_string is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class clock_speed(object):
    """
    Attributes:
     - bps_clock_speed
     - pps_clock_speed

    """


    def __init__(self, bps_clock_speed=None, pps_clock_speed=None,):
        self.bps_clock_speed = bps_clock_speed
        self.pps_clock_speed = pps_clock_speed

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.bps_clock_speed = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.pps_clock_speed = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('clock_speed')
        if self.bps_clock_speed is not None:
            oprot.writeFieldBegin('bps_clock_speed', TType.I64, 1)
            oprot.writeI64(self.bps_clock_speed)
            oprot.writeFieldEnd()
        if self.pps_clock_speed is not None:
            oprot.writeFieldBegin('pps_clock_speed', TType.I64, 2)
            oprot.writeI64(self.pps_clock_speed)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(InvalidDevportMgrOperation)
InvalidDevportMgrOperation.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'code', None, None, ),  # 1
)
all_structs.append(error_event_record)
error_event_record.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'sev', None, None, ),  # 1
    (2, TType.I32, 'dev_id', None, None, ),  # 2
    (3, TType.I32, 'pipe', None, None, ),  # 3
    (4, TType.BYTE, 'stage', None, None, ),  # 4
    (5, TType.I64, 'address', None, None, ),  # 5
    (6, TType.I32, 'err_type', None, None, ),  # 6
    (7, TType.I32, 'err_blk', None, None, ),  # 7
    (8, TType.I32, 'err_loc', None, None, ),  # 8
    (9, TType.STRING, 'err_string', 'UTF8', None, ),  # 9
)
all_structs.append(clock_speed)
clock_speed.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'bps_clock_speed', None, None, ),  # 1
    (2, TType.I64, 'pps_clock_speed', None, None, ),  # 2
)
fix_spec(all_structs)
del all_structs
