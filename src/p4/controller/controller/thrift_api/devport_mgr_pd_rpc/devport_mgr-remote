#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.14.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:package_prefix=controller.thrift_api.
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from devport_mgr_pd_rpc import devport_mgr
from devport_mgr_pd_rpc.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void devport_mgr_add_port(i32 dev_id, i32 port_id, i32 port_speeds, i32 port_fec_types)')
    print('  void devport_mgr_add_port_with_lanes(i32 dev_id, i32 port_id, i32 port_speeds, i32 port_lanes, i32 port_fec_types)')
    print('  void devport_mgr_remove_port(i32 dev_id, i32 port_id)')
    print('  i32 devport_mgr_port_ca_get(i32 dev_id, i32 port_id)')
    print('  i32 devport_mgr_serdes_ca_get(i32 dev_id, i32 port_id)')
    print('  void devport_mgr_set_copy_to_cpu(i32 dev_id, i8 enable, i16 pport)')
    print('  i32 devport_mgr_pcie_cpu_port_get(i32 dev_id)')
    print('  i32 devport_mgr_eth_cpu_port_get(i32 dev_id)')
    print('  void devport_mgr_warm_init_begin(i32 dev_id, dev_init_mode warm_init_mode, dev_serdes_upgrade_mode serdes_upgrade_mode, bool upgrade_agents)')
    print('  void devport_mgr_warm_init_end(i32 dev_id)')
    print('  i32 devport_mgr_get_parser_id(i32 dev_id, i32 port_id)')
    print('  i32 devport_mgr_get_pipe_id(i32 dev_id, i32 port_id)')
    print('  void devport_mgr_set_virtual_dev_slave_mode(i32 dev_id)')
    print('  clock_speed devport_mgr_get_clock_speed(i32 dev_id)')
    print('  void devport_mgr_lrt_dr_timeout_set(i32 dev_id, i32 timeout_ms)')
    print('  i32 devport_mgr_lrt_dr_timeout_get(i32 dev_id)')
    print('  void devport_mgr_register_for_error_events(i32 dev_id)')
    print('   devport_mgr_get_error_events(i32 dev_id)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = devport_mgr.Client(protocol)
transport.open()

if cmd == 'devport_mgr_add_port':
    if len(args) != 4:
        print('devport_mgr_add_port requires 4 args')
        sys.exit(1)
    pp.pprint(client.devport_mgr_add_port(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'devport_mgr_add_port_with_lanes':
    if len(args) != 5:
        print('devport_mgr_add_port_with_lanes requires 5 args')
        sys.exit(1)
    pp.pprint(client.devport_mgr_add_port_with_lanes(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'devport_mgr_remove_port':
    if len(args) != 2:
        print('devport_mgr_remove_port requires 2 args')
        sys.exit(1)
    pp.pprint(client.devport_mgr_remove_port(eval(args[0]), eval(args[1]),))

elif cmd == 'devport_mgr_port_ca_get':
    if len(args) != 2:
        print('devport_mgr_port_ca_get requires 2 args')
        sys.exit(1)
    pp.pprint(client.devport_mgr_port_ca_get(eval(args[0]), eval(args[1]),))

elif cmd == 'devport_mgr_serdes_ca_get':
    if len(args) != 2:
        print('devport_mgr_serdes_ca_get requires 2 args')
        sys.exit(1)
    pp.pprint(client.devport_mgr_serdes_ca_get(eval(args[0]), eval(args[1]),))

elif cmd == 'devport_mgr_set_copy_to_cpu':
    if len(args) != 3:
        print('devport_mgr_set_copy_to_cpu requires 3 args')
        sys.exit(1)
    pp.pprint(client.devport_mgr_set_copy_to_cpu(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'devport_mgr_pcie_cpu_port_get':
    if len(args) != 1:
        print('devport_mgr_pcie_cpu_port_get requires 1 args')
        sys.exit(1)
    pp.pprint(client.devport_mgr_pcie_cpu_port_get(eval(args[0]),))

elif cmd == 'devport_mgr_eth_cpu_port_get':
    if len(args) != 1:
        print('devport_mgr_eth_cpu_port_get requires 1 args')
        sys.exit(1)
    pp.pprint(client.devport_mgr_eth_cpu_port_get(eval(args[0]),))

elif cmd == 'devport_mgr_warm_init_begin':
    if len(args) != 4:
        print('devport_mgr_warm_init_begin requires 4 args')
        sys.exit(1)
    pp.pprint(client.devport_mgr_warm_init_begin(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'devport_mgr_warm_init_end':
    if len(args) != 1:
        print('devport_mgr_warm_init_end requires 1 args')
        sys.exit(1)
    pp.pprint(client.devport_mgr_warm_init_end(eval(args[0]),))

elif cmd == 'devport_mgr_get_parser_id':
    if len(args) != 2:
        print('devport_mgr_get_parser_id requires 2 args')
        sys.exit(1)
    pp.pprint(client.devport_mgr_get_parser_id(eval(args[0]), eval(args[1]),))

elif cmd == 'devport_mgr_get_pipe_id':
    if len(args) != 2:
        print('devport_mgr_get_pipe_id requires 2 args')
        sys.exit(1)
    pp.pprint(client.devport_mgr_get_pipe_id(eval(args[0]), eval(args[1]),))

elif cmd == 'devport_mgr_set_virtual_dev_slave_mode':
    if len(args) != 1:
        print('devport_mgr_set_virtual_dev_slave_mode requires 1 args')
        sys.exit(1)
    pp.pprint(client.devport_mgr_set_virtual_dev_slave_mode(eval(args[0]),))

elif cmd == 'devport_mgr_get_clock_speed':
    if len(args) != 1:
        print('devport_mgr_get_clock_speed requires 1 args')
        sys.exit(1)
    pp.pprint(client.devport_mgr_get_clock_speed(eval(args[0]),))

elif cmd == 'devport_mgr_lrt_dr_timeout_set':
    if len(args) != 2:
        print('devport_mgr_lrt_dr_timeout_set requires 2 args')
        sys.exit(1)
    pp.pprint(client.devport_mgr_lrt_dr_timeout_set(eval(args[0]), eval(args[1]),))

elif cmd == 'devport_mgr_lrt_dr_timeout_get':
    if len(args) != 1:
        print('devport_mgr_lrt_dr_timeout_get requires 1 args')
        sys.exit(1)
    pp.pprint(client.devport_mgr_lrt_dr_timeout_get(eval(args[0]),))

elif cmd == 'devport_mgr_register_for_error_events':
    if len(args) != 1:
        print('devport_mgr_register_for_error_events requires 1 args')
        sys.exit(1)
    pp.pprint(client.devport_mgr_register_for_error_events(eval(args[0]),))

elif cmd == 'devport_mgr_get_error_events':
    if len(args) != 1:
        print('devport_mgr_get_error_events requires 1 args')
        sys.exit(1)
    pp.pprint(client.devport_mgr_get_error_events(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
