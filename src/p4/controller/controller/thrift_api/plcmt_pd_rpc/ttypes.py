#
# Autogenerated by Thrift Compiler (0.14.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:package_prefix=controller.thrift_api.
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import controller.thrift_api.res_pd_rpc.ttypes

from thrift.transport import TTransport
all_structs = []


class mat_update_type(object):
    MAT_UPDATE_ADD = 0
    MAT_UPDATE_ADD_MULTI = 1
    MAT_UPDATE_SET_DFLT = 2
    MAT_UPDATE_CLR_DFLT = 3
    MAT_UPDATE_DEL = 4
    MAT_UPDATE_MOD = 5
    MAT_UPDATE_MOV = 6
    MAT_UPDATE_MOV_MULTI = 7

    _VALUES_TO_NAMES = {
        0: "MAT_UPDATE_ADD",
        1: "MAT_UPDATE_ADD_MULTI",
        2: "MAT_UPDATE_SET_DFLT",
        3: "MAT_UPDATE_CLR_DFLT",
        4: "MAT_UPDATE_DEL",
        5: "MAT_UPDATE_MOD",
        6: "MAT_UPDATE_MOV",
        7: "MAT_UPDATE_MOV_MULTI",
    }

    _NAMES_TO_VALUES = {
        "MAT_UPDATE_ADD": 0,
        "MAT_UPDATE_ADD_MULTI": 1,
        "MAT_UPDATE_SET_DFLT": 2,
        "MAT_UPDATE_CLR_DFLT": 3,
        "MAT_UPDATE_DEL": 4,
        "MAT_UPDATE_MOD": 5,
        "MAT_UPDATE_MOV": 6,
        "MAT_UPDATE_MOV_MULTI": 7,
    }


class adt_update_type(object):
    ADT_UPDATE_ADD = 0
    ADT_UPDATE_DEL = 1
    ADT_UPDATE_MOD = 2

    _VALUES_TO_NAMES = {
        0: "ADT_UPDATE_ADD",
        1: "ADT_UPDATE_DEL",
        2: "ADT_UPDATE_MOD",
    }

    _NAMES_TO_VALUES = {
        "ADT_UPDATE_ADD": 0,
        "ADT_UPDATE_DEL": 1,
        "ADT_UPDATE_MOD": 2,
    }


class sel_update_type(object):
    SEL_UPDATE_GROUP_CREATE = 0
    SEL_UPDATE_GROUP_DESTROY = 1
    SEL_UPDATE_ADD = 2
    SEL_UPDATE_DEL = 3
    SEL_UPDATE_ACTIVATE = 4
    SEL_UPDATE_DEACTIVATE = 5
    SEL_UPDATE_SET_FALLBACK = 6
    SEL_UPDATE_CLR_FALLBACK = 7

    _VALUES_TO_NAMES = {
        0: "SEL_UPDATE_GROUP_CREATE",
        1: "SEL_UPDATE_GROUP_DESTROY",
        2: "SEL_UPDATE_ADD",
        3: "SEL_UPDATE_DEL",
        4: "SEL_UPDATE_ACTIVATE",
        5: "SEL_UPDATE_DEACTIVATE",
        6: "SEL_UPDATE_SET_FALLBACK",
        7: "SEL_UPDATE_CLR_FALLBACK",
    }

    _NAMES_TO_VALUES = {
        "SEL_UPDATE_GROUP_CREATE": 0,
        "SEL_UPDATE_GROUP_DESTROY": 1,
        "SEL_UPDATE_ADD": 2,
        "SEL_UPDATE_DEL": 3,
        "SEL_UPDATE_ACTIVATE": 4,
        "SEL_UPDATE_DEACTIVATE": 5,
        "SEL_UPDATE_SET_FALLBACK": 6,
        "SEL_UPDATE_CLR_FALLBACK": 7,
    }


class tbl_update_type(object):
    MAT_UPDATE_TYPE = 0
    ADT_UPDATE_TYPE = 1
    SEL_UPDATE_TYPE = 2

    _VALUES_TO_NAMES = {
        0: "MAT_UPDATE_TYPE",
        1: "ADT_UPDATE_TYPE",
        2: "SEL_UPDATE_TYPE",
    }

    _NAMES_TO_VALUES = {
        "MAT_UPDATE_TYPE": 0,
        "ADT_UPDATE_TYPE": 1,
        "SEL_UPDATE_TYPE": 2,
    }


class InvalidPlcmtOperation(TException):
    """
    Attributes:
     - code

    """


    def __init__(self, code=None,):
        super(InvalidPlcmtOperation, self).__setattr__('code', code)

    def __setattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __delattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __hash__(self):
        return hash(self.__class__) ^ hash((self.code, ))

    @classmethod
    def read(cls, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and cls.thrift_spec is not None:
            return iprot._fast_decode(None, iprot, [cls, cls.thrift_spec])
        iprot.readStructBegin()
        code = None
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    code = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        return cls(
            code=code,
        )

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('InvalidPlcmtOperation')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.I32, 1)
            oprot.writeI32(self.code)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class multi_index(object):
    """
    Attributes:
     - base_index
     - index_count

    """


    def __init__(self, base_index=None, index_count=None,):
        self.base_index = base_index
        self.index_count = index_count

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.base_index = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.index_count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('multi_index')
        if self.base_index is not None:
            oprot.writeFieldBegin('base_index', TType.I32, 1)
            oprot.writeI32(self.base_index)
            oprot.writeFieldEnd()
        if self.index_count is not None:
            oprot.writeFieldBegin('index_count', TType.I32, 2)
            oprot.writeI32(self.index_count)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.base_index is None:
            raise TProtocolException(message='Required field base_index is unset!')
        if self.index_count is None:
            raise TProtocolException(message='Required field index_count is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class mat_update_set_dflt_params(object):
    """
    Attributes:
     - entry_hdl
     - action_profile_mbr
     - action_index
     - action_profile_mbr_exists
     - sel_grp_hdl
     - selection_index
     - num_selector_indices
     - sel_grp_exists
     - drv_data

    """


    def __init__(self, entry_hdl=None, action_profile_mbr=None, action_index=None, action_profile_mbr_exists=None, sel_grp_hdl=None, selection_index=None, num_selector_indices=None, sel_grp_exists=None, drv_data=None,):
        self.entry_hdl = entry_hdl
        self.action_profile_mbr = action_profile_mbr
        self.action_index = action_index
        self.action_profile_mbr_exists = action_profile_mbr_exists
        self.sel_grp_hdl = sel_grp_hdl
        self.selection_index = selection_index
        self.num_selector_indices = num_selector_indices
        self.sel_grp_exists = sel_grp_exists
        self.drv_data = drv_data

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.entry_hdl = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.action_profile_mbr = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.action_index = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.action_profile_mbr_exists = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.sel_grp_hdl = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.selection_index = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.num_selector_indices = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BOOL:
                    self.sel_grp_exists = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.drv_data = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('mat_update_set_dflt_params')
        if self.entry_hdl is not None:
            oprot.writeFieldBegin('entry_hdl', TType.I32, 1)
            oprot.writeI32(self.entry_hdl)
            oprot.writeFieldEnd()
        if self.action_profile_mbr is not None:
            oprot.writeFieldBegin('action_profile_mbr', TType.I32, 2)
            oprot.writeI32(self.action_profile_mbr)
            oprot.writeFieldEnd()
        if self.action_index is not None:
            oprot.writeFieldBegin('action_index', TType.I32, 3)
            oprot.writeI32(self.action_index)
            oprot.writeFieldEnd()
        if self.action_profile_mbr_exists is not None:
            oprot.writeFieldBegin('action_profile_mbr_exists', TType.BOOL, 4)
            oprot.writeBool(self.action_profile_mbr_exists)
            oprot.writeFieldEnd()
        if self.sel_grp_hdl is not None:
            oprot.writeFieldBegin('sel_grp_hdl', TType.I32, 5)
            oprot.writeI32(self.sel_grp_hdl)
            oprot.writeFieldEnd()
        if self.selection_index is not None:
            oprot.writeFieldBegin('selection_index', TType.I32, 6)
            oprot.writeI32(self.selection_index)
            oprot.writeFieldEnd()
        if self.num_selector_indices is not None:
            oprot.writeFieldBegin('num_selector_indices', TType.I32, 7)
            oprot.writeI32(self.num_selector_indices)
            oprot.writeFieldEnd()
        if self.sel_grp_exists is not None:
            oprot.writeFieldBegin('sel_grp_exists', TType.BOOL, 8)
            oprot.writeBool(self.sel_grp_exists)
            oprot.writeFieldEnd()
        if self.drv_data is not None:
            oprot.writeFieldBegin('drv_data', TType.STRING, 9)
            oprot.writeBinary(self.drv_data)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.entry_hdl is None:
            raise TProtocolException(message='Required field entry_hdl is unset!')
        if self.action_profile_mbr is None:
            raise TProtocolException(message='Required field action_profile_mbr is unset!')
        if self.action_index is None:
            raise TProtocolException(message='Required field action_index is unset!')
        if self.action_profile_mbr_exists is None:
            raise TProtocolException(message='Required field action_profile_mbr_exists is unset!')
        if self.sel_grp_hdl is None:
            raise TProtocolException(message='Required field sel_grp_hdl is unset!')
        if self.selection_index is None:
            raise TProtocolException(message='Required field selection_index is unset!')
        if self.num_selector_indices is None:
            raise TProtocolException(message='Required field num_selector_indices is unset!')
        if self.sel_grp_exists is None:
            raise TProtocolException(message='Required field sel_grp_exists is unset!')
        if self.drv_data is None:
            raise TProtocolException(message='Required field drv_data is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class mat_update_clr_dflt_params(object):
    """
    Attributes:
     - entry_hdl

    """


    def __init__(self, entry_hdl=None,):
        self.entry_hdl = entry_hdl

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.entry_hdl = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('mat_update_clr_dflt_params')
        if self.entry_hdl is not None:
            oprot.writeFieldBegin('entry_hdl', TType.I32, 1)
            oprot.writeI32(self.entry_hdl)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.entry_hdl is None:
            raise TProtocolException(message='Required field entry_hdl is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class mat_update_add_params(object):
    """
    Attributes:
     - entry_hdl
     - priority
     - entry_index
     - action_profile_mbr
     - action_index
     - action_profile_mbr_exists
     - sel_grp_hdl
     - selection_index
     - num_selector_indices
     - sel_grp_exists
     - drv_data

    """


    def __init__(self, entry_hdl=None, priority=None, entry_index=None, action_profile_mbr=None, action_index=None, action_profile_mbr_exists=None, sel_grp_hdl=None, selection_index=None, num_selector_indices=None, sel_grp_exists=None, drv_data=None,):
        self.entry_hdl = entry_hdl
        self.priority = priority
        self.entry_index = entry_index
        self.action_profile_mbr = action_profile_mbr
        self.action_index = action_index
        self.action_profile_mbr_exists = action_profile_mbr_exists
        self.sel_grp_hdl = sel_grp_hdl
        self.selection_index = selection_index
        self.num_selector_indices = num_selector_indices
        self.sel_grp_exists = sel_grp_exists
        self.drv_data = drv_data

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.entry_hdl = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.priority = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.entry_index = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.action_profile_mbr = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.action_index = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.action_profile_mbr_exists = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.sel_grp_hdl = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.selection_index = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.num_selector_indices = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.BOOL:
                    self.sel_grp_exists = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.drv_data = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('mat_update_add_params')
        if self.entry_hdl is not None:
            oprot.writeFieldBegin('entry_hdl', TType.I32, 1)
            oprot.writeI32(self.entry_hdl)
            oprot.writeFieldEnd()
        if self.priority is not None:
            oprot.writeFieldBegin('priority', TType.I32, 2)
            oprot.writeI32(self.priority)
            oprot.writeFieldEnd()
        if self.entry_index is not None:
            oprot.writeFieldBegin('entry_index', TType.I32, 3)
            oprot.writeI32(self.entry_index)
            oprot.writeFieldEnd()
        if self.action_profile_mbr is not None:
            oprot.writeFieldBegin('action_profile_mbr', TType.I32, 4)
            oprot.writeI32(self.action_profile_mbr)
            oprot.writeFieldEnd()
        if self.action_index is not None:
            oprot.writeFieldBegin('action_index', TType.I32, 5)
            oprot.writeI32(self.action_index)
            oprot.writeFieldEnd()
        if self.action_profile_mbr_exists is not None:
            oprot.writeFieldBegin('action_profile_mbr_exists', TType.BOOL, 6)
            oprot.writeBool(self.action_profile_mbr_exists)
            oprot.writeFieldEnd()
        if self.sel_grp_hdl is not None:
            oprot.writeFieldBegin('sel_grp_hdl', TType.I32, 7)
            oprot.writeI32(self.sel_grp_hdl)
            oprot.writeFieldEnd()
        if self.selection_index is not None:
            oprot.writeFieldBegin('selection_index', TType.I32, 8)
            oprot.writeI32(self.selection_index)
            oprot.writeFieldEnd()
        if self.num_selector_indices is not None:
            oprot.writeFieldBegin('num_selector_indices', TType.I32, 9)
            oprot.writeI32(self.num_selector_indices)
            oprot.writeFieldEnd()
        if self.sel_grp_exists is not None:
            oprot.writeFieldBegin('sel_grp_exists', TType.BOOL, 10)
            oprot.writeBool(self.sel_grp_exists)
            oprot.writeFieldEnd()
        if self.drv_data is not None:
            oprot.writeFieldBegin('drv_data', TType.STRING, 11)
            oprot.writeBinary(self.drv_data)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.entry_hdl is None:
            raise TProtocolException(message='Required field entry_hdl is unset!')
        if self.priority is None:
            raise TProtocolException(message='Required field priority is unset!')
        if self.entry_index is None:
            raise TProtocolException(message='Required field entry_index is unset!')
        if self.action_profile_mbr is None:
            raise TProtocolException(message='Required field action_profile_mbr is unset!')
        if self.action_index is None:
            raise TProtocolException(message='Required field action_index is unset!')
        if self.action_profile_mbr_exists is None:
            raise TProtocolException(message='Required field action_profile_mbr_exists is unset!')
        if self.sel_grp_hdl is None:
            raise TProtocolException(message='Required field sel_grp_hdl is unset!')
        if self.selection_index is None:
            raise TProtocolException(message='Required field selection_index is unset!')
        if self.num_selector_indices is None:
            raise TProtocolException(message='Required field num_selector_indices is unset!')
        if self.sel_grp_exists is None:
            raise TProtocolException(message='Required field sel_grp_exists is unset!')
        if self.drv_data is None:
            raise TProtocolException(message='Required field drv_data is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class mat_update_add_multi_params(object):
    """
    Attributes:
     - entry_hdl
     - priority
     - action_profile_mbr
     - action_index
     - action_profile_mbr_exists
     - sel_grp_hdl
     - selection_index
     - num_selector_indices
     - sel_grp_exists
     - locations
     - drv_data

    """


    def __init__(self, entry_hdl=None, priority=None, action_profile_mbr=None, action_index=None, action_profile_mbr_exists=None, sel_grp_hdl=None, selection_index=None, num_selector_indices=None, sel_grp_exists=None, locations=None, drv_data=None,):
        self.entry_hdl = entry_hdl
        self.priority = priority
        self.action_profile_mbr = action_profile_mbr
        self.action_index = action_index
        self.action_profile_mbr_exists = action_profile_mbr_exists
        self.sel_grp_hdl = sel_grp_hdl
        self.selection_index = selection_index
        self.num_selector_indices = num_selector_indices
        self.sel_grp_exists = sel_grp_exists
        self.locations = locations
        self.drv_data = drv_data

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.entry_hdl = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.priority = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.action_profile_mbr = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.action_index = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.action_profile_mbr_exists = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.sel_grp_hdl = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.selection_index = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.num_selector_indices = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BOOL:
                    self.sel_grp_exists = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.LIST:
                    self.locations = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = multi_index()
                        _elem5.read(iprot)
                        self.locations.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.drv_data = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('mat_update_add_multi_params')
        if self.entry_hdl is not None:
            oprot.writeFieldBegin('entry_hdl', TType.I32, 1)
            oprot.writeI32(self.entry_hdl)
            oprot.writeFieldEnd()
        if self.priority is not None:
            oprot.writeFieldBegin('priority', TType.I32, 2)
            oprot.writeI32(self.priority)
            oprot.writeFieldEnd()
        if self.action_profile_mbr is not None:
            oprot.writeFieldBegin('action_profile_mbr', TType.I32, 3)
            oprot.writeI32(self.action_profile_mbr)
            oprot.writeFieldEnd()
        if self.action_index is not None:
            oprot.writeFieldBegin('action_index', TType.I32, 4)
            oprot.writeI32(self.action_index)
            oprot.writeFieldEnd()
        if self.action_profile_mbr_exists is not None:
            oprot.writeFieldBegin('action_profile_mbr_exists', TType.BOOL, 5)
            oprot.writeBool(self.action_profile_mbr_exists)
            oprot.writeFieldEnd()
        if self.sel_grp_hdl is not None:
            oprot.writeFieldBegin('sel_grp_hdl', TType.I32, 6)
            oprot.writeI32(self.sel_grp_hdl)
            oprot.writeFieldEnd()
        if self.selection_index is not None:
            oprot.writeFieldBegin('selection_index', TType.I32, 7)
            oprot.writeI32(self.selection_index)
            oprot.writeFieldEnd()
        if self.num_selector_indices is not None:
            oprot.writeFieldBegin('num_selector_indices', TType.I32, 8)
            oprot.writeI32(self.num_selector_indices)
            oprot.writeFieldEnd()
        if self.sel_grp_exists is not None:
            oprot.writeFieldBegin('sel_grp_exists', TType.BOOL, 9)
            oprot.writeBool(self.sel_grp_exists)
            oprot.writeFieldEnd()
        if self.locations is not None:
            oprot.writeFieldBegin('locations', TType.LIST, 10)
            oprot.writeListBegin(TType.STRUCT, len(self.locations))
            for iter6 in self.locations:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.drv_data is not None:
            oprot.writeFieldBegin('drv_data', TType.STRING, 11)
            oprot.writeBinary(self.drv_data)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.entry_hdl is None:
            raise TProtocolException(message='Required field entry_hdl is unset!')
        if self.priority is None:
            raise TProtocolException(message='Required field priority is unset!')
        if self.action_profile_mbr is None:
            raise TProtocolException(message='Required field action_profile_mbr is unset!')
        if self.action_index is None:
            raise TProtocolException(message='Required field action_index is unset!')
        if self.action_profile_mbr_exists is None:
            raise TProtocolException(message='Required field action_profile_mbr_exists is unset!')
        if self.sel_grp_hdl is None:
            raise TProtocolException(message='Required field sel_grp_hdl is unset!')
        if self.selection_index is None:
            raise TProtocolException(message='Required field selection_index is unset!')
        if self.num_selector_indices is None:
            raise TProtocolException(message='Required field num_selector_indices is unset!')
        if self.sel_grp_exists is None:
            raise TProtocolException(message='Required field sel_grp_exists is unset!')
        if self.locations is None:
            raise TProtocolException(message='Required field locations is unset!')
        if self.drv_data is None:
            raise TProtocolException(message='Required field drv_data is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class mat_update_mov_multi_params(object):
    """
    Attributes:
     - entry_hdl
     - action_profile_mbr
     - action_index
     - action_profile_mbr_exists
     - sel_grp_hdl
     - selection_index
     - num_selector_indices
     - sel_grp_exists
     - locations
     - drv_data

    """


    def __init__(self, entry_hdl=None, action_profile_mbr=None, action_index=None, action_profile_mbr_exists=None, sel_grp_hdl=None, selection_index=None, num_selector_indices=None, sel_grp_exists=None, locations=None, drv_data=None,):
        self.entry_hdl = entry_hdl
        self.action_profile_mbr = action_profile_mbr
        self.action_index = action_index
        self.action_profile_mbr_exists = action_profile_mbr_exists
        self.sel_grp_hdl = sel_grp_hdl
        self.selection_index = selection_index
        self.num_selector_indices = num_selector_indices
        self.sel_grp_exists = sel_grp_exists
        self.locations = locations
        self.drv_data = drv_data

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.entry_hdl = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.action_profile_mbr = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.action_index = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.action_profile_mbr_exists = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.sel_grp_hdl = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.selection_index = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.num_selector_indices = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BOOL:
                    self.sel_grp_exists = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.LIST:
                    self.locations = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = multi_index()
                        _elem12.read(iprot)
                        self.locations.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.drv_data = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('mat_update_mov_multi_params')
        if self.entry_hdl is not None:
            oprot.writeFieldBegin('entry_hdl', TType.I32, 1)
            oprot.writeI32(self.entry_hdl)
            oprot.writeFieldEnd()
        if self.action_profile_mbr is not None:
            oprot.writeFieldBegin('action_profile_mbr', TType.I32, 2)
            oprot.writeI32(self.action_profile_mbr)
            oprot.writeFieldEnd()
        if self.action_index is not None:
            oprot.writeFieldBegin('action_index', TType.I32, 3)
            oprot.writeI32(self.action_index)
            oprot.writeFieldEnd()
        if self.action_profile_mbr_exists is not None:
            oprot.writeFieldBegin('action_profile_mbr_exists', TType.BOOL, 4)
            oprot.writeBool(self.action_profile_mbr_exists)
            oprot.writeFieldEnd()
        if self.sel_grp_hdl is not None:
            oprot.writeFieldBegin('sel_grp_hdl', TType.I32, 5)
            oprot.writeI32(self.sel_grp_hdl)
            oprot.writeFieldEnd()
        if self.selection_index is not None:
            oprot.writeFieldBegin('selection_index', TType.I32, 6)
            oprot.writeI32(self.selection_index)
            oprot.writeFieldEnd()
        if self.num_selector_indices is not None:
            oprot.writeFieldBegin('num_selector_indices', TType.I32, 7)
            oprot.writeI32(self.num_selector_indices)
            oprot.writeFieldEnd()
        if self.sel_grp_exists is not None:
            oprot.writeFieldBegin('sel_grp_exists', TType.BOOL, 8)
            oprot.writeBool(self.sel_grp_exists)
            oprot.writeFieldEnd()
        if self.locations is not None:
            oprot.writeFieldBegin('locations', TType.LIST, 9)
            oprot.writeListBegin(TType.STRUCT, len(self.locations))
            for iter13 in self.locations:
                iter13.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.drv_data is not None:
            oprot.writeFieldBegin('drv_data', TType.STRING, 10)
            oprot.writeBinary(self.drv_data)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.entry_hdl is None:
            raise TProtocolException(message='Required field entry_hdl is unset!')
        if self.action_profile_mbr is None:
            raise TProtocolException(message='Required field action_profile_mbr is unset!')
        if self.action_index is None:
            raise TProtocolException(message='Required field action_index is unset!')
        if self.action_profile_mbr_exists is None:
            raise TProtocolException(message='Required field action_profile_mbr_exists is unset!')
        if self.sel_grp_hdl is None:
            raise TProtocolException(message='Required field sel_grp_hdl is unset!')
        if self.selection_index is None:
            raise TProtocolException(message='Required field selection_index is unset!')
        if self.num_selector_indices is None:
            raise TProtocolException(message='Required field num_selector_indices is unset!')
        if self.sel_grp_exists is None:
            raise TProtocolException(message='Required field sel_grp_exists is unset!')
        if self.locations is None:
            raise TProtocolException(message='Required field locations is unset!')
        if self.drv_data is None:
            raise TProtocolException(message='Required field drv_data is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class mat_update_del_params(object):
    """
    Attributes:
     - entry_hdl

    """


    def __init__(self, entry_hdl=None,):
        self.entry_hdl = entry_hdl

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.entry_hdl = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('mat_update_del_params')
        if self.entry_hdl is not None:
            oprot.writeFieldBegin('entry_hdl', TType.I32, 1)
            oprot.writeI32(self.entry_hdl)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.entry_hdl is None:
            raise TProtocolException(message='Required field entry_hdl is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class mat_update_mod_params(object):
    """
    Attributes:
     - entry_hdl
     - action_profile_mbr
     - action_index
     - action_profile_mbr_exists
     - sel_grp_hdl
     - selection_index
     - num_selector_indices
     - sel_grp_exists
     - drv_data

    """


    def __init__(self, entry_hdl=None, action_profile_mbr=None, action_index=None, action_profile_mbr_exists=None, sel_grp_hdl=None, selection_index=None, num_selector_indices=None, sel_grp_exists=None, drv_data=None,):
        self.entry_hdl = entry_hdl
        self.action_profile_mbr = action_profile_mbr
        self.action_index = action_index
        self.action_profile_mbr_exists = action_profile_mbr_exists
        self.sel_grp_hdl = sel_grp_hdl
        self.selection_index = selection_index
        self.num_selector_indices = num_selector_indices
        self.sel_grp_exists = sel_grp_exists
        self.drv_data = drv_data

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.entry_hdl = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.action_profile_mbr = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.action_index = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.action_profile_mbr_exists = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.sel_grp_hdl = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.selection_index = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.num_selector_indices = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BOOL:
                    self.sel_grp_exists = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.drv_data = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('mat_update_mod_params')
        if self.entry_hdl is not None:
            oprot.writeFieldBegin('entry_hdl', TType.I32, 1)
            oprot.writeI32(self.entry_hdl)
            oprot.writeFieldEnd()
        if self.action_profile_mbr is not None:
            oprot.writeFieldBegin('action_profile_mbr', TType.I32, 2)
            oprot.writeI32(self.action_profile_mbr)
            oprot.writeFieldEnd()
        if self.action_index is not None:
            oprot.writeFieldBegin('action_index', TType.I32, 3)
            oprot.writeI32(self.action_index)
            oprot.writeFieldEnd()
        if self.action_profile_mbr_exists is not None:
            oprot.writeFieldBegin('action_profile_mbr_exists', TType.BOOL, 4)
            oprot.writeBool(self.action_profile_mbr_exists)
            oprot.writeFieldEnd()
        if self.sel_grp_hdl is not None:
            oprot.writeFieldBegin('sel_grp_hdl', TType.I32, 5)
            oprot.writeI32(self.sel_grp_hdl)
            oprot.writeFieldEnd()
        if self.selection_index is not None:
            oprot.writeFieldBegin('selection_index', TType.I32, 6)
            oprot.writeI32(self.selection_index)
            oprot.writeFieldEnd()
        if self.num_selector_indices is not None:
            oprot.writeFieldBegin('num_selector_indices', TType.I32, 7)
            oprot.writeI32(self.num_selector_indices)
            oprot.writeFieldEnd()
        if self.sel_grp_exists is not None:
            oprot.writeFieldBegin('sel_grp_exists', TType.BOOL, 8)
            oprot.writeBool(self.sel_grp_exists)
            oprot.writeFieldEnd()
        if self.drv_data is not None:
            oprot.writeFieldBegin('drv_data', TType.STRING, 9)
            oprot.writeBinary(self.drv_data)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.entry_hdl is None:
            raise TProtocolException(message='Required field entry_hdl is unset!')
        if self.action_profile_mbr is None:
            raise TProtocolException(message='Required field action_profile_mbr is unset!')
        if self.action_index is None:
            raise TProtocolException(message='Required field action_index is unset!')
        if self.action_profile_mbr_exists is None:
            raise TProtocolException(message='Required field action_profile_mbr_exists is unset!')
        if self.sel_grp_hdl is None:
            raise TProtocolException(message='Required field sel_grp_hdl is unset!')
        if self.selection_index is None:
            raise TProtocolException(message='Required field selection_index is unset!')
        if self.num_selector_indices is None:
            raise TProtocolException(message='Required field num_selector_indices is unset!')
        if self.sel_grp_exists is None:
            raise TProtocolException(message='Required field sel_grp_exists is unset!')
        if self.drv_data is None:
            raise TProtocolException(message='Required field drv_data is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class mat_update_mov_params(object):
    """
    Attributes:
     - entry_hdl
     - entry_index
     - action_profile_mbr
     - action_index
     - action_profile_mbr_exists
     - sel_grp_hdl
     - selection_index
     - num_selector_indices
     - sel_grp_exists
     - drv_data

    """


    def __init__(self, entry_hdl=None, entry_index=None, action_profile_mbr=None, action_index=None, action_profile_mbr_exists=None, sel_grp_hdl=None, selection_index=None, num_selector_indices=None, sel_grp_exists=None, drv_data=None,):
        self.entry_hdl = entry_hdl
        self.entry_index = entry_index
        self.action_profile_mbr = action_profile_mbr
        self.action_index = action_index
        self.action_profile_mbr_exists = action_profile_mbr_exists
        self.sel_grp_hdl = sel_grp_hdl
        self.selection_index = selection_index
        self.num_selector_indices = num_selector_indices
        self.sel_grp_exists = sel_grp_exists
        self.drv_data = drv_data

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.entry_hdl = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.entry_index = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.action_profile_mbr = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.action_index = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.action_profile_mbr_exists = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.sel_grp_hdl = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.selection_index = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.num_selector_indices = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BOOL:
                    self.sel_grp_exists = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.drv_data = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('mat_update_mov_params')
        if self.entry_hdl is not None:
            oprot.writeFieldBegin('entry_hdl', TType.I32, 1)
            oprot.writeI32(self.entry_hdl)
            oprot.writeFieldEnd()
        if self.entry_index is not None:
            oprot.writeFieldBegin('entry_index', TType.I32, 2)
            oprot.writeI32(self.entry_index)
            oprot.writeFieldEnd()
        if self.action_profile_mbr is not None:
            oprot.writeFieldBegin('action_profile_mbr', TType.I32, 3)
            oprot.writeI32(self.action_profile_mbr)
            oprot.writeFieldEnd()
        if self.action_index is not None:
            oprot.writeFieldBegin('action_index', TType.I32, 4)
            oprot.writeI32(self.action_index)
            oprot.writeFieldEnd()
        if self.action_profile_mbr_exists is not None:
            oprot.writeFieldBegin('action_profile_mbr_exists', TType.BOOL, 5)
            oprot.writeBool(self.action_profile_mbr_exists)
            oprot.writeFieldEnd()
        if self.sel_grp_hdl is not None:
            oprot.writeFieldBegin('sel_grp_hdl', TType.I32, 6)
            oprot.writeI32(self.sel_grp_hdl)
            oprot.writeFieldEnd()
        if self.selection_index is not None:
            oprot.writeFieldBegin('selection_index', TType.I32, 7)
            oprot.writeI32(self.selection_index)
            oprot.writeFieldEnd()
        if self.num_selector_indices is not None:
            oprot.writeFieldBegin('num_selector_indices', TType.I32, 8)
            oprot.writeI32(self.num_selector_indices)
            oprot.writeFieldEnd()
        if self.sel_grp_exists is not None:
            oprot.writeFieldBegin('sel_grp_exists', TType.BOOL, 9)
            oprot.writeBool(self.sel_grp_exists)
            oprot.writeFieldEnd()
        if self.drv_data is not None:
            oprot.writeFieldBegin('drv_data', TType.STRING, 10)
            oprot.writeBinary(self.drv_data)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.entry_hdl is None:
            raise TProtocolException(message='Required field entry_hdl is unset!')
        if self.entry_index is None:
            raise TProtocolException(message='Required field entry_index is unset!')
        if self.action_profile_mbr is None:
            raise TProtocolException(message='Required field action_profile_mbr is unset!')
        if self.action_index is None:
            raise TProtocolException(message='Required field action_index is unset!')
        if self.action_profile_mbr_exists is None:
            raise TProtocolException(message='Required field action_profile_mbr_exists is unset!')
        if self.sel_grp_hdl is None:
            raise TProtocolException(message='Required field sel_grp_hdl is unset!')
        if self.selection_index is None:
            raise TProtocolException(message='Required field selection_index is unset!')
        if self.num_selector_indices is None:
            raise TProtocolException(message='Required field num_selector_indices is unset!')
        if self.sel_grp_exists is None:
            raise TProtocolException(message='Required field sel_grp_exists is unset!')
        if self.drv_data is None:
            raise TProtocolException(message='Required field drv_data is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class mat_update_params(object):
    """
    Attributes:
     - set_dflt
     - clr_dflt
     - add
     - remove
     - mod
     - mov
     - add_multi
     - mov_multi

    """


    def __init__(self, set_dflt=None, clr_dflt=None, add=None, remove=None, mod=None, mov=None, add_multi=None, mov_multi=None,):
        self.set_dflt = set_dflt
        self.clr_dflt = clr_dflt
        self.add = add
        self.remove = remove
        self.mod = mod
        self.mov = mov
        self.add_multi = add_multi
        self.mov_multi = mov_multi

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.set_dflt = mat_update_set_dflt_params()
                    self.set_dflt.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.clr_dflt = mat_update_clr_dflt_params()
                    self.clr_dflt.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.add = mat_update_add_params()
                    self.add.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.remove = mat_update_del_params()
                    self.remove.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.mod = mat_update_mod_params()
                    self.mod.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.mov = mat_update_mov_params()
                    self.mov.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.add_multi = mat_update_add_multi_params()
                    self.add_multi.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRUCT:
                    self.mov_multi = mat_update_mov_multi_params()
                    self.mov_multi.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('mat_update_params')
        if self.set_dflt is not None:
            oprot.writeFieldBegin('set_dflt', TType.STRUCT, 1)
            self.set_dflt.write(oprot)
            oprot.writeFieldEnd()
        if self.clr_dflt is not None:
            oprot.writeFieldBegin('clr_dflt', TType.STRUCT, 2)
            self.clr_dflt.write(oprot)
            oprot.writeFieldEnd()
        if self.add is not None:
            oprot.writeFieldBegin('add', TType.STRUCT, 3)
            self.add.write(oprot)
            oprot.writeFieldEnd()
        if self.remove is not None:
            oprot.writeFieldBegin('remove', TType.STRUCT, 4)
            self.remove.write(oprot)
            oprot.writeFieldEnd()
        if self.mod is not None:
            oprot.writeFieldBegin('mod', TType.STRUCT, 5)
            self.mod.write(oprot)
            oprot.writeFieldEnd()
        if self.mov is not None:
            oprot.writeFieldBegin('mov', TType.STRUCT, 6)
            self.mov.write(oprot)
            oprot.writeFieldEnd()
        if self.add_multi is not None:
            oprot.writeFieldBegin('add_multi', TType.STRUCT, 7)
            self.add_multi.write(oprot)
            oprot.writeFieldEnd()
        if self.mov_multi is not None:
            oprot.writeFieldBegin('mov_multi', TType.STRUCT, 8)
            self.mov_multi.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class mat_tbl_update_t(object):
    """
    Attributes:
     - dev_tgt
     - tbl_hdl
     - update_type
     - update_params

    """


    def __init__(self, dev_tgt=None, tbl_hdl=None, update_type=None, update_params=None,):
        self.dev_tgt = dev_tgt
        self.tbl_hdl = tbl_hdl
        self.update_type = update_type
        self.update_params = update_params

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.dev_tgt = controller.thrift_api.res_pd_rpc.ttypes.DevTarget_t()
                    self.dev_tgt.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.tbl_hdl = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.update_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.update_params = mat_update_params()
                    self.update_params.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('mat_tbl_update_t')
        if self.dev_tgt is not None:
            oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 1)
            self.dev_tgt.write(oprot)
            oprot.writeFieldEnd()
        if self.tbl_hdl is not None:
            oprot.writeFieldBegin('tbl_hdl', TType.I32, 2)
            oprot.writeI32(self.tbl_hdl)
            oprot.writeFieldEnd()
        if self.update_type is not None:
            oprot.writeFieldBegin('update_type', TType.I32, 3)
            oprot.writeI32(self.update_type)
            oprot.writeFieldEnd()
        if self.update_params is not None:
            oprot.writeFieldBegin('update_params', TType.STRUCT, 4)
            self.update_params.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.dev_tgt is None:
            raise TProtocolException(message='Required field dev_tgt is unset!')
        if self.tbl_hdl is None:
            raise TProtocolException(message='Required field tbl_hdl is unset!')
        if self.update_type is None:
            raise TProtocolException(message='Required field update_type is unset!')
        if self.update_params is None:
            raise TProtocolException(message='Required field update_params is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class adt_update_add_params(object):
    """
    Attributes:
     - entry_hdl
     - drv_data

    """


    def __init__(self, entry_hdl=None, drv_data=None,):
        self.entry_hdl = entry_hdl
        self.drv_data = drv_data

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.entry_hdl = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.drv_data = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('adt_update_add_params')
        if self.entry_hdl is not None:
            oprot.writeFieldBegin('entry_hdl', TType.I32, 1)
            oprot.writeI32(self.entry_hdl)
            oprot.writeFieldEnd()
        if self.drv_data is not None:
            oprot.writeFieldBegin('drv_data', TType.STRING, 2)
            oprot.writeBinary(self.drv_data)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.entry_hdl is None:
            raise TProtocolException(message='Required field entry_hdl is unset!')
        if self.drv_data is None:
            raise TProtocolException(message='Required field drv_data is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class adt_update_del_params(object):
    """
    Attributes:
     - entry_hdl

    """


    def __init__(self, entry_hdl=None,):
        self.entry_hdl = entry_hdl

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.entry_hdl = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('adt_update_del_params')
        if self.entry_hdl is not None:
            oprot.writeFieldBegin('entry_hdl', TType.I32, 1)
            oprot.writeI32(self.entry_hdl)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.entry_hdl is None:
            raise TProtocolException(message='Required field entry_hdl is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class adt_update_mod_params(object):
    """
    Attributes:
     - entry_hdl
     - drv_data

    """


    def __init__(self, entry_hdl=None, drv_data=None,):
        self.entry_hdl = entry_hdl
        self.drv_data = drv_data

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.entry_hdl = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.drv_data = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('adt_update_mod_params')
        if self.entry_hdl is not None:
            oprot.writeFieldBegin('entry_hdl', TType.I32, 1)
            oprot.writeI32(self.entry_hdl)
            oprot.writeFieldEnd()
        if self.drv_data is not None:
            oprot.writeFieldBegin('drv_data', TType.STRING, 2)
            oprot.writeBinary(self.drv_data)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.entry_hdl is None:
            raise TProtocolException(message='Required field entry_hdl is unset!')
        if self.drv_data is None:
            raise TProtocolException(message='Required field drv_data is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class adt_update_params(object):
    """
    Attributes:
     - add
     - remove
     - mod

    """


    def __init__(self, add=None, remove=None, mod=None,):
        self.add = add
        self.remove = remove
        self.mod = mod

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.add = adt_update_add_params()
                    self.add.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.remove = adt_update_del_params()
                    self.remove.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.mod = adt_update_mod_params()
                    self.mod.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('adt_update_params')
        if self.add is not None:
            oprot.writeFieldBegin('add', TType.STRUCT, 1)
            self.add.write(oprot)
            oprot.writeFieldEnd()
        if self.remove is not None:
            oprot.writeFieldBegin('remove', TType.STRUCT, 2)
            self.remove.write(oprot)
            oprot.writeFieldEnd()
        if self.mod is not None:
            oprot.writeFieldBegin('mod', TType.STRUCT, 3)
            self.mod.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class adt_tbl_update_t(object):
    """
    Attributes:
     - dev_tgt
     - tbl_hdl
     - update_type
     - update_params

    """


    def __init__(self, dev_tgt=None, tbl_hdl=None, update_type=None, update_params=None,):
        self.dev_tgt = dev_tgt
        self.tbl_hdl = tbl_hdl
        self.update_type = update_type
        self.update_params = update_params

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.dev_tgt = controller.thrift_api.res_pd_rpc.ttypes.DevTarget_t()
                    self.dev_tgt.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.tbl_hdl = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.update_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.update_params = adt_update_params()
                    self.update_params.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('adt_tbl_update_t')
        if self.dev_tgt is not None:
            oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 1)
            self.dev_tgt.write(oprot)
            oprot.writeFieldEnd()
        if self.tbl_hdl is not None:
            oprot.writeFieldBegin('tbl_hdl', TType.I32, 2)
            oprot.writeI32(self.tbl_hdl)
            oprot.writeFieldEnd()
        if self.update_type is not None:
            oprot.writeFieldBegin('update_type', TType.I32, 3)
            oprot.writeI32(self.update_type)
            oprot.writeFieldEnd()
        if self.update_params is not None:
            oprot.writeFieldBegin('update_params', TType.STRUCT, 4)
            self.update_params.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.dev_tgt is None:
            raise TProtocolException(message='Required field dev_tgt is unset!')
        if self.tbl_hdl is None:
            raise TProtocolException(message='Required field tbl_hdl is unset!')
        if self.update_type is None:
            raise TProtocolException(message='Required field update_type is unset!')
        if self.update_params is None:
            raise TProtocolException(message='Required field update_params is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sel_update_group_create_params(object):
    """
    Attributes:
     - group_hdl
     - num_indexes
     - max_members
     - base_logical_index
     - locations

    """


    def __init__(self, group_hdl=None, num_indexes=None, max_members=None, base_logical_index=None, locations=None,):
        self.group_hdl = group_hdl
        self.num_indexes = num_indexes
        self.max_members = max_members
        self.base_logical_index = base_logical_index
        self.locations = locations

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.group_hdl = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.num_indexes = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.max_members = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.base_logical_index = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.locations = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = multi_index()
                        _elem19.read(iprot)
                        self.locations.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sel_update_group_create_params')
        if self.group_hdl is not None:
            oprot.writeFieldBegin('group_hdl', TType.I32, 1)
            oprot.writeI32(self.group_hdl)
            oprot.writeFieldEnd()
        if self.num_indexes is not None:
            oprot.writeFieldBegin('num_indexes', TType.I32, 2)
            oprot.writeI32(self.num_indexes)
            oprot.writeFieldEnd()
        if self.max_members is not None:
            oprot.writeFieldBegin('max_members', TType.I32, 3)
            oprot.writeI32(self.max_members)
            oprot.writeFieldEnd()
        if self.base_logical_index is not None:
            oprot.writeFieldBegin('base_logical_index', TType.I32, 4)
            oprot.writeI32(self.base_logical_index)
            oprot.writeFieldEnd()
        if self.locations is not None:
            oprot.writeFieldBegin('locations', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.locations))
            for iter20 in self.locations:
                iter20.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.group_hdl is None:
            raise TProtocolException(message='Required field group_hdl is unset!')
        if self.num_indexes is None:
            raise TProtocolException(message='Required field num_indexes is unset!')
        if self.max_members is None:
            raise TProtocolException(message='Required field max_members is unset!')
        if self.base_logical_index is None:
            raise TProtocolException(message='Required field base_logical_index is unset!')
        if self.locations is None:
            raise TProtocolException(message='Required field locations is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sel_update_group_destroy_params(object):
    """
    Attributes:
     - group_hdl

    """


    def __init__(self, group_hdl=None,):
        self.group_hdl = group_hdl

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.group_hdl = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sel_update_group_destroy_params')
        if self.group_hdl is not None:
            oprot.writeFieldBegin('group_hdl', TType.I32, 1)
            oprot.writeI32(self.group_hdl)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.group_hdl is None:
            raise TProtocolException(message='Required field group_hdl is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sel_update_add_params(object):
    """
    Attributes:
     - group_hdl
     - entry_hdl
     - entry_index
     - entry_subindex
     - drv_data

    """


    def __init__(self, group_hdl=None, entry_hdl=None, entry_index=None, entry_subindex=None, drv_data=None,):
        self.group_hdl = group_hdl
        self.entry_hdl = entry_hdl
        self.entry_index = entry_index
        self.entry_subindex = entry_subindex
        self.drv_data = drv_data

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.group_hdl = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.entry_hdl = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.entry_index = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.entry_subindex = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.drv_data = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sel_update_add_params')
        if self.group_hdl is not None:
            oprot.writeFieldBegin('group_hdl', TType.I32, 1)
            oprot.writeI32(self.group_hdl)
            oprot.writeFieldEnd()
        if self.entry_hdl is not None:
            oprot.writeFieldBegin('entry_hdl', TType.I32, 2)
            oprot.writeI32(self.entry_hdl)
            oprot.writeFieldEnd()
        if self.entry_index is not None:
            oprot.writeFieldBegin('entry_index', TType.I32, 3)
            oprot.writeI32(self.entry_index)
            oprot.writeFieldEnd()
        if self.entry_subindex is not None:
            oprot.writeFieldBegin('entry_subindex', TType.I32, 4)
            oprot.writeI32(self.entry_subindex)
            oprot.writeFieldEnd()
        if self.drv_data is not None:
            oprot.writeFieldBegin('drv_data', TType.STRING, 5)
            oprot.writeBinary(self.drv_data)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.group_hdl is None:
            raise TProtocolException(message='Required field group_hdl is unset!')
        if self.entry_hdl is None:
            raise TProtocolException(message='Required field entry_hdl is unset!')
        if self.entry_index is None:
            raise TProtocolException(message='Required field entry_index is unset!')
        if self.entry_subindex is None:
            raise TProtocolException(message='Required field entry_subindex is unset!')
        if self.drv_data is None:
            raise TProtocolException(message='Required field drv_data is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sel_update_del_params(object):
    """
    Attributes:
     - group_hdl
     - entry_hdl
     - entry_index
     - entry_subindex

    """


    def __init__(self, group_hdl=None, entry_hdl=None, entry_index=None, entry_subindex=None,):
        self.group_hdl = group_hdl
        self.entry_hdl = entry_hdl
        self.entry_index = entry_index
        self.entry_subindex = entry_subindex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.group_hdl = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.entry_hdl = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.entry_index = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.entry_subindex = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sel_update_del_params')
        if self.group_hdl is not None:
            oprot.writeFieldBegin('group_hdl', TType.I32, 1)
            oprot.writeI32(self.group_hdl)
            oprot.writeFieldEnd()
        if self.entry_hdl is not None:
            oprot.writeFieldBegin('entry_hdl', TType.I32, 2)
            oprot.writeI32(self.entry_hdl)
            oprot.writeFieldEnd()
        if self.entry_index is not None:
            oprot.writeFieldBegin('entry_index', TType.I32, 3)
            oprot.writeI32(self.entry_index)
            oprot.writeFieldEnd()
        if self.entry_subindex is not None:
            oprot.writeFieldBegin('entry_subindex', TType.I32, 4)
            oprot.writeI32(self.entry_subindex)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.group_hdl is None:
            raise TProtocolException(message='Required field group_hdl is unset!')
        if self.entry_hdl is None:
            raise TProtocolException(message='Required field entry_hdl is unset!')
        if self.entry_index is None:
            raise TProtocolException(message='Required field entry_index is unset!')
        if self.entry_subindex is None:
            raise TProtocolException(message='Required field entry_subindex is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sel_update_activate_params(object):
    """
    Attributes:
     - group_hdl
     - entry_hdl
     - entry_index
     - entry_subindex

    """


    def __init__(self, group_hdl=None, entry_hdl=None, entry_index=None, entry_subindex=None,):
        self.group_hdl = group_hdl
        self.entry_hdl = entry_hdl
        self.entry_index = entry_index
        self.entry_subindex = entry_subindex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.group_hdl = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.entry_hdl = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.entry_index = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.entry_subindex = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sel_update_activate_params')
        if self.group_hdl is not None:
            oprot.writeFieldBegin('group_hdl', TType.I32, 1)
            oprot.writeI32(self.group_hdl)
            oprot.writeFieldEnd()
        if self.entry_hdl is not None:
            oprot.writeFieldBegin('entry_hdl', TType.I32, 2)
            oprot.writeI32(self.entry_hdl)
            oprot.writeFieldEnd()
        if self.entry_index is not None:
            oprot.writeFieldBegin('entry_index', TType.I32, 3)
            oprot.writeI32(self.entry_index)
            oprot.writeFieldEnd()
        if self.entry_subindex is not None:
            oprot.writeFieldBegin('entry_subindex', TType.I32, 4)
            oprot.writeI32(self.entry_subindex)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.group_hdl is None:
            raise TProtocolException(message='Required field group_hdl is unset!')
        if self.entry_hdl is None:
            raise TProtocolException(message='Required field entry_hdl is unset!')
        if self.entry_index is None:
            raise TProtocolException(message='Required field entry_index is unset!')
        if self.entry_subindex is None:
            raise TProtocolException(message='Required field entry_subindex is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sel_update_deactivate_params(object):
    """
    Attributes:
     - group_hdl
     - entry_hdl
     - entry_index
     - entry_subindex

    """


    def __init__(self, group_hdl=None, entry_hdl=None, entry_index=None, entry_subindex=None,):
        self.group_hdl = group_hdl
        self.entry_hdl = entry_hdl
        self.entry_index = entry_index
        self.entry_subindex = entry_subindex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.group_hdl = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.entry_hdl = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.entry_index = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.entry_subindex = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sel_update_deactivate_params')
        if self.group_hdl is not None:
            oprot.writeFieldBegin('group_hdl', TType.I32, 1)
            oprot.writeI32(self.group_hdl)
            oprot.writeFieldEnd()
        if self.entry_hdl is not None:
            oprot.writeFieldBegin('entry_hdl', TType.I32, 2)
            oprot.writeI32(self.entry_hdl)
            oprot.writeFieldEnd()
        if self.entry_index is not None:
            oprot.writeFieldBegin('entry_index', TType.I32, 3)
            oprot.writeI32(self.entry_index)
            oprot.writeFieldEnd()
        if self.entry_subindex is not None:
            oprot.writeFieldBegin('entry_subindex', TType.I32, 4)
            oprot.writeI32(self.entry_subindex)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.group_hdl is None:
            raise TProtocolException(message='Required field group_hdl is unset!')
        if self.entry_hdl is None:
            raise TProtocolException(message='Required field entry_hdl is unset!')
        if self.entry_index is None:
            raise TProtocolException(message='Required field entry_index is unset!')
        if self.entry_subindex is None:
            raise TProtocolException(message='Required field entry_subindex is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sel_update_set_fallback_params(object):
    """
    Attributes:
     - entry_hdl
     - drv_data

    """


    def __init__(self, entry_hdl=None, drv_data=None,):
        self.entry_hdl = entry_hdl
        self.drv_data = drv_data

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.entry_hdl = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.drv_data = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sel_update_set_fallback_params')
        if self.entry_hdl is not None:
            oprot.writeFieldBegin('entry_hdl', TType.I32, 1)
            oprot.writeI32(self.entry_hdl)
            oprot.writeFieldEnd()
        if self.drv_data is not None:
            oprot.writeFieldBegin('drv_data', TType.STRING, 2)
            oprot.writeBinary(self.drv_data)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.entry_hdl is None:
            raise TProtocolException(message='Required field entry_hdl is unset!')
        if self.drv_data is None:
            raise TProtocolException(message='Required field drv_data is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sel_update_params(object):
    """
    Attributes:
     - grp_create
     - grp_destroy
     - add
     - remove
     - activate
     - deactivate
     - set_fallback

    """


    def __init__(self, grp_create=None, grp_destroy=None, add=None, remove=None, activate=None, deactivate=None, set_fallback=None,):
        self.grp_create = grp_create
        self.grp_destroy = grp_destroy
        self.add = add
        self.remove = remove
        self.activate = activate
        self.deactivate = deactivate
        self.set_fallback = set_fallback

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.grp_create = sel_update_group_create_params()
                    self.grp_create.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.grp_destroy = sel_update_group_destroy_params()
                    self.grp_destroy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.add = sel_update_add_params()
                    self.add.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.remove = sel_update_del_params()
                    self.remove.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.activate = sel_update_activate_params()
                    self.activate.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.deactivate = sel_update_deactivate_params()
                    self.deactivate.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.set_fallback = sel_update_set_fallback_params()
                    self.set_fallback.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sel_update_params')
        if self.grp_create is not None:
            oprot.writeFieldBegin('grp_create', TType.STRUCT, 1)
            self.grp_create.write(oprot)
            oprot.writeFieldEnd()
        if self.grp_destroy is not None:
            oprot.writeFieldBegin('grp_destroy', TType.STRUCT, 2)
            self.grp_destroy.write(oprot)
            oprot.writeFieldEnd()
        if self.add is not None:
            oprot.writeFieldBegin('add', TType.STRUCT, 3)
            self.add.write(oprot)
            oprot.writeFieldEnd()
        if self.remove is not None:
            oprot.writeFieldBegin('remove', TType.STRUCT, 4)
            self.remove.write(oprot)
            oprot.writeFieldEnd()
        if self.activate is not None:
            oprot.writeFieldBegin('activate', TType.STRUCT, 5)
            self.activate.write(oprot)
            oprot.writeFieldEnd()
        if self.deactivate is not None:
            oprot.writeFieldBegin('deactivate', TType.STRUCT, 6)
            self.deactivate.write(oprot)
            oprot.writeFieldEnd()
        if self.set_fallback is not None:
            oprot.writeFieldBegin('set_fallback', TType.STRUCT, 7)
            self.set_fallback.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sel_tbl_update_t(object):
    """
    Attributes:
     - dev_tgt
     - tbl_hdl
     - update_type
     - update_params

    """


    def __init__(self, dev_tgt=None, tbl_hdl=None, update_type=None, update_params=None,):
        self.dev_tgt = dev_tgt
        self.tbl_hdl = tbl_hdl
        self.update_type = update_type
        self.update_params = update_params

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.dev_tgt = controller.thrift_api.res_pd_rpc.ttypes.DevTarget_t()
                    self.dev_tgt.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.tbl_hdl = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.update_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.update_params = sel_update_params()
                    self.update_params.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sel_tbl_update_t')
        if self.dev_tgt is not None:
            oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 1)
            self.dev_tgt.write(oprot)
            oprot.writeFieldEnd()
        if self.tbl_hdl is not None:
            oprot.writeFieldBegin('tbl_hdl', TType.I32, 2)
            oprot.writeI32(self.tbl_hdl)
            oprot.writeFieldEnd()
        if self.update_type is not None:
            oprot.writeFieldBegin('update_type', TType.I32, 3)
            oprot.writeI32(self.update_type)
            oprot.writeFieldEnd()
        if self.update_params is not None:
            oprot.writeFieldBegin('update_params', TType.STRUCT, 4)
            self.update_params.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.dev_tgt is None:
            raise TProtocolException(message='Required field dev_tgt is unset!')
        if self.tbl_hdl is None:
            raise TProtocolException(message='Required field tbl_hdl is unset!')
        if self.update_type is None:
            raise TProtocolException(message='Required field update_type is unset!')
        if self.update_params is None:
            raise TProtocolException(message='Required field update_params is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class tbl_update_data(object):
    """
    Attributes:
     - mat
     - adt
     - sel

    """


    def __init__(self, mat=None, adt=None, sel=None,):
        self.mat = mat
        self.adt = adt
        self.sel = sel

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.mat = mat_tbl_update_t()
                    self.mat.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.adt = adt_tbl_update_t()
                    self.adt.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.sel = sel_tbl_update_t()
                    self.sel.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('tbl_update_data')
        if self.mat is not None:
            oprot.writeFieldBegin('mat', TType.STRUCT, 1)
            self.mat.write(oprot)
            oprot.writeFieldEnd()
        if self.adt is not None:
            oprot.writeFieldBegin('adt', TType.STRUCT, 2)
            self.adt.write(oprot)
            oprot.writeFieldEnd()
        if self.sel is not None:
            oprot.writeFieldBegin('sel', TType.STRUCT, 3)
            self.sel.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class tbl_update_t(object):
    """
    Attributes:
     - update_type
     - update_data

    """


    def __init__(self, update_type=None, update_data=None,):
        self.update_type = update_type
        self.update_data = update_data

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.update_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.update_data = tbl_update_data()
                    self.update_data.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('tbl_update_t')
        if self.update_type is not None:
            oprot.writeFieldBegin('update_type', TType.I32, 1)
            oprot.writeI32(self.update_type)
            oprot.writeFieldEnd()
        if self.update_data is not None:
            oprot.writeFieldBegin('update_data', TType.STRUCT, 2)
            self.update_data.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.update_type is None:
            raise TProtocolException(message='Required field update_type is unset!')
        if self.update_data is None:
            raise TProtocolException(message='Required field update_data is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(InvalidPlcmtOperation)
InvalidPlcmtOperation.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'code', None, None, ),  # 1
)
all_structs.append(multi_index)
multi_index.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'base_index', None, None, ),  # 1
    (2, TType.I32, 'index_count', None, None, ),  # 2
)
all_structs.append(mat_update_set_dflt_params)
mat_update_set_dflt_params.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'entry_hdl', None, None, ),  # 1
    (2, TType.I32, 'action_profile_mbr', None, None, ),  # 2
    (3, TType.I32, 'action_index', None, None, ),  # 3
    (4, TType.BOOL, 'action_profile_mbr_exists', None, None, ),  # 4
    (5, TType.I32, 'sel_grp_hdl', None, None, ),  # 5
    (6, TType.I32, 'selection_index', None, None, ),  # 6
    (7, TType.I32, 'num_selector_indices', None, None, ),  # 7
    (8, TType.BOOL, 'sel_grp_exists', None, None, ),  # 8
    (9, TType.STRING, 'drv_data', 'BINARY', None, ),  # 9
)
all_structs.append(mat_update_clr_dflt_params)
mat_update_clr_dflt_params.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'entry_hdl', None, None, ),  # 1
)
all_structs.append(mat_update_add_params)
mat_update_add_params.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'entry_hdl', None, None, ),  # 1
    (2, TType.I32, 'priority', None, None, ),  # 2
    (3, TType.I32, 'entry_index', None, None, ),  # 3
    (4, TType.I32, 'action_profile_mbr', None, None, ),  # 4
    (5, TType.I32, 'action_index', None, None, ),  # 5
    (6, TType.BOOL, 'action_profile_mbr_exists', None, None, ),  # 6
    (7, TType.I32, 'sel_grp_hdl', None, None, ),  # 7
    (8, TType.I32, 'selection_index', None, None, ),  # 8
    (9, TType.I32, 'num_selector_indices', None, None, ),  # 9
    (10, TType.BOOL, 'sel_grp_exists', None, None, ),  # 10
    (11, TType.STRING, 'drv_data', 'BINARY', None, ),  # 11
)
all_structs.append(mat_update_add_multi_params)
mat_update_add_multi_params.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'entry_hdl', None, None, ),  # 1
    (2, TType.I32, 'priority', None, None, ),  # 2
    (3, TType.I32, 'action_profile_mbr', None, None, ),  # 3
    (4, TType.I32, 'action_index', None, None, ),  # 4
    (5, TType.BOOL, 'action_profile_mbr_exists', None, None, ),  # 5
    (6, TType.I32, 'sel_grp_hdl', None, None, ),  # 6
    (7, TType.I32, 'selection_index', None, None, ),  # 7
    (8, TType.I32, 'num_selector_indices', None, None, ),  # 8
    (9, TType.BOOL, 'sel_grp_exists', None, None, ),  # 9
    (10, TType.LIST, 'locations', (TType.STRUCT, [multi_index, None], False), None, ),  # 10
    (11, TType.STRING, 'drv_data', 'BINARY', None, ),  # 11
)
all_structs.append(mat_update_mov_multi_params)
mat_update_mov_multi_params.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'entry_hdl', None, None, ),  # 1
    (2, TType.I32, 'action_profile_mbr', None, None, ),  # 2
    (3, TType.I32, 'action_index', None, None, ),  # 3
    (4, TType.BOOL, 'action_profile_mbr_exists', None, None, ),  # 4
    (5, TType.I32, 'sel_grp_hdl', None, None, ),  # 5
    (6, TType.I32, 'selection_index', None, None, ),  # 6
    (7, TType.I32, 'num_selector_indices', None, None, ),  # 7
    (8, TType.BOOL, 'sel_grp_exists', None, None, ),  # 8
    (9, TType.LIST, 'locations', (TType.STRUCT, [multi_index, None], False), None, ),  # 9
    (10, TType.STRING, 'drv_data', 'BINARY', None, ),  # 10
)
all_structs.append(mat_update_del_params)
mat_update_del_params.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'entry_hdl', None, None, ),  # 1
)
all_structs.append(mat_update_mod_params)
mat_update_mod_params.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'entry_hdl', None, None, ),  # 1
    (2, TType.I32, 'action_profile_mbr', None, None, ),  # 2
    (3, TType.I32, 'action_index', None, None, ),  # 3
    (4, TType.BOOL, 'action_profile_mbr_exists', None, None, ),  # 4
    (5, TType.I32, 'sel_grp_hdl', None, None, ),  # 5
    (6, TType.I32, 'selection_index', None, None, ),  # 6
    (7, TType.I32, 'num_selector_indices', None, None, ),  # 7
    (8, TType.BOOL, 'sel_grp_exists', None, None, ),  # 8
    (9, TType.STRING, 'drv_data', 'BINARY', None, ),  # 9
)
all_structs.append(mat_update_mov_params)
mat_update_mov_params.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'entry_hdl', None, None, ),  # 1
    (2, TType.I32, 'entry_index', None, None, ),  # 2
    (3, TType.I32, 'action_profile_mbr', None, None, ),  # 3
    (4, TType.I32, 'action_index', None, None, ),  # 4
    (5, TType.BOOL, 'action_profile_mbr_exists', None, None, ),  # 5
    (6, TType.I32, 'sel_grp_hdl', None, None, ),  # 6
    (7, TType.I32, 'selection_index', None, None, ),  # 7
    (8, TType.I32, 'num_selector_indices', None, None, ),  # 8
    (9, TType.BOOL, 'sel_grp_exists', None, None, ),  # 9
    (10, TType.STRING, 'drv_data', 'BINARY', None, ),  # 10
)
all_structs.append(mat_update_params)
mat_update_params.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'set_dflt', [mat_update_set_dflt_params, None], None, ),  # 1
    (2, TType.STRUCT, 'clr_dflt', [mat_update_clr_dflt_params, None], None, ),  # 2
    (3, TType.STRUCT, 'add', [mat_update_add_params, None], None, ),  # 3
    (4, TType.STRUCT, 'remove', [mat_update_del_params, None], None, ),  # 4
    (5, TType.STRUCT, 'mod', [mat_update_mod_params, None], None, ),  # 5
    (6, TType.STRUCT, 'mov', [mat_update_mov_params, None], None, ),  # 6
    (7, TType.STRUCT, 'add_multi', [mat_update_add_multi_params, None], None, ),  # 7
    (8, TType.STRUCT, 'mov_multi', [mat_update_mov_multi_params, None], None, ),  # 8
)
all_structs.append(mat_tbl_update_t)
mat_tbl_update_t.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'dev_tgt', [controller.thrift_api.res_pd_rpc.ttypes.DevTarget_t, None], None, ),  # 1
    (2, TType.I32, 'tbl_hdl', None, None, ),  # 2
    (3, TType.I32, 'update_type', None, None, ),  # 3
    (4, TType.STRUCT, 'update_params', [mat_update_params, None], None, ),  # 4
)
all_structs.append(adt_update_add_params)
adt_update_add_params.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'entry_hdl', None, None, ),  # 1
    (2, TType.STRING, 'drv_data', 'BINARY', None, ),  # 2
)
all_structs.append(adt_update_del_params)
adt_update_del_params.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'entry_hdl', None, None, ),  # 1
)
all_structs.append(adt_update_mod_params)
adt_update_mod_params.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'entry_hdl', None, None, ),  # 1
    (2, TType.STRING, 'drv_data', 'BINARY', None, ),  # 2
)
all_structs.append(adt_update_params)
adt_update_params.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'add', [adt_update_add_params, None], None, ),  # 1
    (2, TType.STRUCT, 'remove', [adt_update_del_params, None], None, ),  # 2
    (3, TType.STRUCT, 'mod', [adt_update_mod_params, None], None, ),  # 3
)
all_structs.append(adt_tbl_update_t)
adt_tbl_update_t.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'dev_tgt', [controller.thrift_api.res_pd_rpc.ttypes.DevTarget_t, None], None, ),  # 1
    (2, TType.I32, 'tbl_hdl', None, None, ),  # 2
    (3, TType.I32, 'update_type', None, None, ),  # 3
    (4, TType.STRUCT, 'update_params', [adt_update_params, None], None, ),  # 4
)
all_structs.append(sel_update_group_create_params)
sel_update_group_create_params.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'group_hdl', None, None, ),  # 1
    (2, TType.I32, 'num_indexes', None, None, ),  # 2
    (3, TType.I32, 'max_members', None, None, ),  # 3
    (4, TType.I32, 'base_logical_index', None, None, ),  # 4
    (5, TType.LIST, 'locations', (TType.STRUCT, [multi_index, None], False), None, ),  # 5
)
all_structs.append(sel_update_group_destroy_params)
sel_update_group_destroy_params.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'group_hdl', None, None, ),  # 1
)
all_structs.append(sel_update_add_params)
sel_update_add_params.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'group_hdl', None, None, ),  # 1
    (2, TType.I32, 'entry_hdl', None, None, ),  # 2
    (3, TType.I32, 'entry_index', None, None, ),  # 3
    (4, TType.I32, 'entry_subindex', None, None, ),  # 4
    (5, TType.STRING, 'drv_data', 'BINARY', None, ),  # 5
)
all_structs.append(sel_update_del_params)
sel_update_del_params.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'group_hdl', None, None, ),  # 1
    (2, TType.I32, 'entry_hdl', None, None, ),  # 2
    (3, TType.I32, 'entry_index', None, None, ),  # 3
    (4, TType.I32, 'entry_subindex', None, None, ),  # 4
)
all_structs.append(sel_update_activate_params)
sel_update_activate_params.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'group_hdl', None, None, ),  # 1
    (2, TType.I32, 'entry_hdl', None, None, ),  # 2
    (3, TType.I32, 'entry_index', None, None, ),  # 3
    (4, TType.I32, 'entry_subindex', None, None, ),  # 4
)
all_structs.append(sel_update_deactivate_params)
sel_update_deactivate_params.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'group_hdl', None, None, ),  # 1
    (2, TType.I32, 'entry_hdl', None, None, ),  # 2
    (3, TType.I32, 'entry_index', None, None, ),  # 3
    (4, TType.I32, 'entry_subindex', None, None, ),  # 4
)
all_structs.append(sel_update_set_fallback_params)
sel_update_set_fallback_params.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'entry_hdl', None, None, ),  # 1
    (2, TType.STRING, 'drv_data', 'BINARY', None, ),  # 2
)
all_structs.append(sel_update_params)
sel_update_params.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'grp_create', [sel_update_group_create_params, None], None, ),  # 1
    (2, TType.STRUCT, 'grp_destroy', [sel_update_group_destroy_params, None], None, ),  # 2
    (3, TType.STRUCT, 'add', [sel_update_add_params, None], None, ),  # 3
    (4, TType.STRUCT, 'remove', [sel_update_del_params, None], None, ),  # 4
    (5, TType.STRUCT, 'activate', [sel_update_activate_params, None], None, ),  # 5
    (6, TType.STRUCT, 'deactivate', [sel_update_deactivate_params, None], None, ),  # 6
    (7, TType.STRUCT, 'set_fallback', [sel_update_set_fallback_params, None], None, ),  # 7
)
all_structs.append(sel_tbl_update_t)
sel_tbl_update_t.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'dev_tgt', [controller.thrift_api.res_pd_rpc.ttypes.DevTarget_t, None], None, ),  # 1
    (2, TType.I32, 'tbl_hdl', None, None, ),  # 2
    (3, TType.I32, 'update_type', None, None, ),  # 3
    (4, TType.STRUCT, 'update_params', [sel_update_params, None], None, ),  # 4
)
all_structs.append(tbl_update_data)
tbl_update_data.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'mat', [mat_tbl_update_t, None], None, ),  # 1
    (2, TType.STRUCT, 'adt', [adt_tbl_update_t, None], None, ),  # 2
    (3, TType.STRUCT, 'sel', [sel_tbl_update_t, None], None, ),  # 3
)
all_structs.append(tbl_update_t)
tbl_update_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'update_type', None, None, ),  # 1
    (2, TType.STRUCT, 'update_data', [tbl_update_data, None], None, ),  # 2
)
fix_spec(all_structs)
del all_structs
