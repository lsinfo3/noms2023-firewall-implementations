#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.14.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:package_prefix=controller.thrift_api.
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from p4_pd_rpc import main
from p4_pd_rpc.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  EntryHandle_t firewall_table_match_spec_to_entry_hdl(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, main_firewall_table_match_spec_t match_spec)')
    print('  EntryHandle_t forward_table_match_spec_to_entry_hdl(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, main_forward_table_match_spec_t match_spec)')
    print('  EntryHandle_t forward_table_by_dst_ip_match_spec_to_entry_hdl(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, main_forward_table_by_dst_ip_match_spec_t match_spec)')
    print('  EntryHandle_t state_check_table_match_spec_to_entry_hdl(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, main_state_check_table_match_spec_t match_spec)')
    print('  EntryHandle_t firewall_table_table_add_with_firewall_allow_action(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, main_firewall_table_match_spec_t match_spec)')
    print('  EntryHandle_t firewall_table_table_add_with_firewall_drop_action(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, main_firewall_table_match_spec_t match_spec)')
    print('  EntryHandle_t forward_table_table_add_with_forward_hit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, main_forward_table_match_spec_t match_spec, main_forward_hit_action_spec_t action_spec)')
    print('  EntryHandle_t forward_table_table_add_with_forward_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, main_forward_table_match_spec_t match_spec)')
    print('  EntryHandle_t forward_table_by_dst_ip_table_add_with_forward_ip_hit(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, main_forward_table_by_dst_ip_match_spec_t match_spec, main_forward_ip_hit_action_spec_t action_spec)')
    print('  EntryHandle_t forward_table_by_dst_ip_table_add_with_forward_ip_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, main_forward_table_by_dst_ip_match_spec_t match_spec)')
    print('  EntryHandle_t state_check_table_table_add_with_state_check_allow_action(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, main_state_check_table_match_spec_t match_spec)')
    print('  EntryHandle_t state_check_table_table_add_with_state_check_to_controller_action(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, main_state_check_table_match_spec_t match_spec)')
    print('  EntryHandle_t state_check_table_table_add_with_state_check_drop_action(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, main_state_check_table_match_spec_t match_spec)')
    print('  void firewall_table_table_modify_with_firewall_allow_action(SessionHandle_t sess_hdl, i8 dev_id, EntryHandle_t entry)')
    print('  void firewall_table_table_modify_with_firewall_allow_action_by_match_spec(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, main_firewall_table_match_spec_t match_spec)')
    print('  void firewall_table_table_modify_with_firewall_drop_action(SessionHandle_t sess_hdl, i8 dev_id, EntryHandle_t entry)')
    print('  void firewall_table_table_modify_with_firewall_drop_action_by_match_spec(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, main_firewall_table_match_spec_t match_spec)')
    print('  void forward_table_table_modify_with_forward_hit(SessionHandle_t sess_hdl, i8 dev_id, EntryHandle_t entry, main_forward_hit_action_spec_t action_spec)')
    print('  void forward_table_table_modify_with_forward_hit_by_match_spec(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, main_forward_table_match_spec_t match_spec, main_forward_hit_action_spec_t action_spec)')
    print('  void forward_table_table_modify_with_forward_miss(SessionHandle_t sess_hdl, i8 dev_id, EntryHandle_t entry)')
    print('  void forward_table_table_modify_with_forward_miss_by_match_spec(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, main_forward_table_match_spec_t match_spec)')
    print('  void forward_table_by_dst_ip_table_modify_with_forward_ip_hit(SessionHandle_t sess_hdl, i8 dev_id, EntryHandle_t entry, main_forward_ip_hit_action_spec_t action_spec)')
    print('  void forward_table_by_dst_ip_table_modify_with_forward_ip_hit_by_match_spec(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, main_forward_table_by_dst_ip_match_spec_t match_spec, main_forward_ip_hit_action_spec_t action_spec)')
    print('  void forward_table_by_dst_ip_table_modify_with_forward_ip_miss(SessionHandle_t sess_hdl, i8 dev_id, EntryHandle_t entry)')
    print('  void forward_table_by_dst_ip_table_modify_with_forward_ip_miss_by_match_spec(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, main_forward_table_by_dst_ip_match_spec_t match_spec)')
    print('  void state_check_table_table_modify_with_state_check_allow_action(SessionHandle_t sess_hdl, i8 dev_id, EntryHandle_t entry)')
    print('  void state_check_table_table_modify_with_state_check_allow_action_by_match_spec(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, main_state_check_table_match_spec_t match_spec)')
    print('  void state_check_table_table_modify_with_state_check_to_controller_action(SessionHandle_t sess_hdl, i8 dev_id, EntryHandle_t entry)')
    print('  void state_check_table_table_modify_with_state_check_to_controller_action_by_match_spec(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, main_state_check_table_match_spec_t match_spec)')
    print('  void state_check_table_table_modify_with_state_check_drop_action(SessionHandle_t sess_hdl, i8 dev_id, EntryHandle_t entry)')
    print('  void state_check_table_table_modify_with_state_check_drop_action_by_match_spec(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, main_state_check_table_match_spec_t match_spec)')
    print('  void firewall_table_table_delete(SessionHandle_t sess_hdl, i8 dev_id, EntryHandle_t entry)')
    print('  void firewall_table_table_delete_by_match_spec(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, main_firewall_table_match_spec_t match_spec)')
    print('  void forward_table_table_delete(SessionHandle_t sess_hdl, i8 dev_id, EntryHandle_t entry)')
    print('  void forward_table_table_delete_by_match_spec(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, main_forward_table_match_spec_t match_spec)')
    print('  void forward_table_by_dst_ip_table_delete(SessionHandle_t sess_hdl, i8 dev_id, EntryHandle_t entry)')
    print('  void forward_table_by_dst_ip_table_delete_by_match_spec(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, main_forward_table_by_dst_ip_match_spec_t match_spec)')
    print('  void state_check_table_table_delete(SessionHandle_t sess_hdl, i8 dev_id, EntryHandle_t entry)')
    print('  void state_check_table_table_delete_by_match_spec(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, main_state_check_table_match_spec_t match_spec)')
    print('  EntryHandle_t firewall_table_table_get_default_entry_handle(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
    print('  main_firewall_table_entry_desc_t firewall_table_table_get_default_entry(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, bool read_from_hw)')
    print('  EntryHandle_t forward_table_table_get_default_entry_handle(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
    print('  main_forward_table_entry_desc_t forward_table_table_get_default_entry(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, bool read_from_hw)')
    print('  EntryHandle_t forward_table_by_dst_ip_table_get_default_entry_handle(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
    print('  main_forward_table_by_dst_ip_entry_desc_t forward_table_by_dst_ip_table_get_default_entry(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, bool read_from_hw)')
    print('  EntryHandle_t state_check_table_table_get_default_entry_handle(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
    print('  main_state_check_table_entry_desc_t state_check_table_table_get_default_entry(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, bool read_from_hw)')
    print('  void firewall_table_table_reset_default_entry(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
    print('  void forward_table_table_reset_default_entry(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
    print('  void forward_table_by_dst_ip_table_reset_default_entry(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
    print('  void state_check_table_table_reset_default_entry(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
    print('  i32 firewall_table_get_entry_count(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
    print('  i32 forward_table_get_entry_count(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
    print('  i32 forward_table_by_dst_ip_get_entry_count(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
    print('  i32 state_check_table_get_entry_count(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
    print('  i32 firewall_table_get_first_entry_handle(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
    print('   firewall_table_get_next_entry_handles(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, EntryHandle_t entry_hdl, i32 n)')
    print('  main_firewall_table_entry_desc_t firewall_table_get_entry(SessionHandle_t sess_hdl, i8 dev_id, EntryHandle_t entry_hdl, bool read_from_hw)')
    print('  i32 forward_table_get_first_entry_handle(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
    print('   forward_table_get_next_entry_handles(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, EntryHandle_t entry_hdl, i32 n)')
    print('  main_forward_table_entry_desc_t forward_table_get_entry(SessionHandle_t sess_hdl, i8 dev_id, EntryHandle_t entry_hdl, bool read_from_hw)')
    print('  i32 forward_table_by_dst_ip_get_first_entry_handle(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
    print('   forward_table_by_dst_ip_get_next_entry_handles(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, EntryHandle_t entry_hdl, i32 n)')
    print('  main_forward_table_by_dst_ip_entry_desc_t forward_table_by_dst_ip_get_entry(SessionHandle_t sess_hdl, i8 dev_id, EntryHandle_t entry_hdl, bool read_from_hw)')
    print('  i32 state_check_table_get_first_entry_handle(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
    print('   state_check_table_get_next_entry_handles(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, EntryHandle_t entry_hdl, i32 n)')
    print('  main_state_check_table_entry_desc_t state_check_table_get_entry(SessionHandle_t sess_hdl, i8 dev_id, EntryHandle_t entry_hdl, bool read_from_hw)')
    print('  EntryHandle_t firewall_table_set_default_action_firewall_drop_action(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
    print('  EntryHandle_t forward_table_set_default_action_forward_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
    print('  EntryHandle_t forward_table_by_dst_ip_set_default_action_forward_ip_miss(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
    print('  EntryHandle_t state_check_table_set_default_action_state_check_drop_action(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
    print('  void firewall_table_set_property(SessionHandle_t sess_hdl, i8 dev_id, tbl_property_t property, tbl_property_value_t value, i32 prop_args)')
    print('  tbl_property_value_args_t firewall_table_get_property(SessionHandle_t sess_hdl, i8 dev_id, tbl_property_t property)')
    print('  void forward_table_set_property(SessionHandle_t sess_hdl, i8 dev_id, tbl_property_t property, tbl_property_value_t value, i32 prop_args)')
    print('  tbl_property_value_args_t forward_table_get_property(SessionHandle_t sess_hdl, i8 dev_id, tbl_property_t property)')
    print('  void forward_table_by_dst_ip_set_property(SessionHandle_t sess_hdl, i8 dev_id, tbl_property_t property, tbl_property_value_t value, i32 prop_args)')
    print('  tbl_property_value_args_t forward_table_by_dst_ip_get_property(SessionHandle_t sess_hdl, i8 dev_id, tbl_property_t property)')
    print('  void state_check_table_set_property(SessionHandle_t sess_hdl, i8 dev_id, tbl_property_t property, tbl_property_value_t value, i32 prop_args)')
    print('  tbl_property_value_args_t state_check_table_get_property(SessionHandle_t sess_hdl, i8 dev_id, tbl_property_t property)')
    print('  void set_learning_timeout(SessionHandle_t sess_hdl, i8 dev_id, i32 usecs)')
    print('  void tbl_dbg_counter_type_set(DevTarget_t dev_tgt, string tbl_name, tbl_dbg_counter_type_t type)')
    print('  TblCntrInfo_t tbl_dbg_counter_get(DevTarget_t dev_tgt, string tbl_name)')
    print('  void tbl_dbg_counter_clear(DevTarget_t dev_tgt, string tbl_name)')
    print('  void tbl_dbg_counter_type_stage_set(DevTarget_t dev_tgt, i8 stage, tbl_dbg_counter_type_t type)')
    print('  TblDbgStageInfo_t tbl_dbg_counter_stage_get(DevTarget_t dev_tgt, i8 stage)')
    print('  void tbl_dbg_counter_stage_clear(DevTarget_t dev_tgt, i8 stage)')
    print('  SnapshotHandle_t snapshot_create(DevTarget_t dev_tgt, i8 start_stage, i8 end_stage, i8 direction)')
    print('  void snapshot_delete(SnapshotHandle_t handle)')
    print('  void snapshot_state_set(SnapshotHandle_t handle, i32 state, i32 usecs)')
    print('  i32 snapshot_state_get(SnapshotHandle_t handle, i16 pipe)')
    print('  void snapshot_timer_enable(SnapshotHandle_t handle, i8 disable)')
    print('  void snapshot_capture_trigger_set(SnapshotHandle_t handle, main_snapshot_trig_spec_t trig_spec, main_snapshot_trig_spec_t trig_spec2)')
    print('  i64 snapshot_capture_data_get(SnapshotHandle_t handle, i16 pipe, i16 stage_id, string field_name)')
    print('  main_snapshot_tbl_data_t snapshot_capture_tbl_data_get(SnapshotHandle_t handle, i16 pipe, string table_name)')
    print('  void snapshot_capture_trigger_fields_clr(SnapshotHandle_t handle)')
    print('  bool snapshot_field_in_scope(DevTarget_t dev_tgt, i8 stage, i8 direction, string field_name)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = main.Client(protocol)
transport.open()

if cmd == 'firewall_table_match_spec_to_entry_hdl':
    if len(args) != 3:
        print('firewall_table_match_spec_to_entry_hdl requires 3 args')
        sys.exit(1)
    pp.pprint(client.firewall_table_match_spec_to_entry_hdl(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'forward_table_match_spec_to_entry_hdl':
    if len(args) != 3:
        print('forward_table_match_spec_to_entry_hdl requires 3 args')
        sys.exit(1)
    pp.pprint(client.forward_table_match_spec_to_entry_hdl(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'forward_table_by_dst_ip_match_spec_to_entry_hdl':
    if len(args) != 3:
        print('forward_table_by_dst_ip_match_spec_to_entry_hdl requires 3 args')
        sys.exit(1)
    pp.pprint(client.forward_table_by_dst_ip_match_spec_to_entry_hdl(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'state_check_table_match_spec_to_entry_hdl':
    if len(args) != 3:
        print('state_check_table_match_spec_to_entry_hdl requires 3 args')
        sys.exit(1)
    pp.pprint(client.state_check_table_match_spec_to_entry_hdl(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'firewall_table_table_add_with_firewall_allow_action':
    if len(args) != 3:
        print('firewall_table_table_add_with_firewall_allow_action requires 3 args')
        sys.exit(1)
    pp.pprint(client.firewall_table_table_add_with_firewall_allow_action(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'firewall_table_table_add_with_firewall_drop_action':
    if len(args) != 3:
        print('firewall_table_table_add_with_firewall_drop_action requires 3 args')
        sys.exit(1)
    pp.pprint(client.firewall_table_table_add_with_firewall_drop_action(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'forward_table_table_add_with_forward_hit':
    if len(args) != 4:
        print('forward_table_table_add_with_forward_hit requires 4 args')
        sys.exit(1)
    pp.pprint(client.forward_table_table_add_with_forward_hit(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'forward_table_table_add_with_forward_miss':
    if len(args) != 3:
        print('forward_table_table_add_with_forward_miss requires 3 args')
        sys.exit(1)
    pp.pprint(client.forward_table_table_add_with_forward_miss(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'forward_table_by_dst_ip_table_add_with_forward_ip_hit':
    if len(args) != 4:
        print('forward_table_by_dst_ip_table_add_with_forward_ip_hit requires 4 args')
        sys.exit(1)
    pp.pprint(client.forward_table_by_dst_ip_table_add_with_forward_ip_hit(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'forward_table_by_dst_ip_table_add_with_forward_ip_miss':
    if len(args) != 3:
        print('forward_table_by_dst_ip_table_add_with_forward_ip_miss requires 3 args')
        sys.exit(1)
    pp.pprint(client.forward_table_by_dst_ip_table_add_with_forward_ip_miss(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'state_check_table_table_add_with_state_check_allow_action':
    if len(args) != 3:
        print('state_check_table_table_add_with_state_check_allow_action requires 3 args')
        sys.exit(1)
    pp.pprint(client.state_check_table_table_add_with_state_check_allow_action(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'state_check_table_table_add_with_state_check_to_controller_action':
    if len(args) != 3:
        print('state_check_table_table_add_with_state_check_to_controller_action requires 3 args')
        sys.exit(1)
    pp.pprint(client.state_check_table_table_add_with_state_check_to_controller_action(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'state_check_table_table_add_with_state_check_drop_action':
    if len(args) != 3:
        print('state_check_table_table_add_with_state_check_drop_action requires 3 args')
        sys.exit(1)
    pp.pprint(client.state_check_table_table_add_with_state_check_drop_action(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'firewall_table_table_modify_with_firewall_allow_action':
    if len(args) != 3:
        print('firewall_table_table_modify_with_firewall_allow_action requires 3 args')
        sys.exit(1)
    pp.pprint(client.firewall_table_table_modify_with_firewall_allow_action(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'firewall_table_table_modify_with_firewall_allow_action_by_match_spec':
    if len(args) != 3:
        print('firewall_table_table_modify_with_firewall_allow_action_by_match_spec requires 3 args')
        sys.exit(1)
    pp.pprint(client.firewall_table_table_modify_with_firewall_allow_action_by_match_spec(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'firewall_table_table_modify_with_firewall_drop_action':
    if len(args) != 3:
        print('firewall_table_table_modify_with_firewall_drop_action requires 3 args')
        sys.exit(1)
    pp.pprint(client.firewall_table_table_modify_with_firewall_drop_action(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'firewall_table_table_modify_with_firewall_drop_action_by_match_spec':
    if len(args) != 3:
        print('firewall_table_table_modify_with_firewall_drop_action_by_match_spec requires 3 args')
        sys.exit(1)
    pp.pprint(client.firewall_table_table_modify_with_firewall_drop_action_by_match_spec(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'forward_table_table_modify_with_forward_hit':
    if len(args) != 4:
        print('forward_table_table_modify_with_forward_hit requires 4 args')
        sys.exit(1)
    pp.pprint(client.forward_table_table_modify_with_forward_hit(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'forward_table_table_modify_with_forward_hit_by_match_spec':
    if len(args) != 4:
        print('forward_table_table_modify_with_forward_hit_by_match_spec requires 4 args')
        sys.exit(1)
    pp.pprint(client.forward_table_table_modify_with_forward_hit_by_match_spec(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'forward_table_table_modify_with_forward_miss':
    if len(args) != 3:
        print('forward_table_table_modify_with_forward_miss requires 3 args')
        sys.exit(1)
    pp.pprint(client.forward_table_table_modify_with_forward_miss(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'forward_table_table_modify_with_forward_miss_by_match_spec':
    if len(args) != 3:
        print('forward_table_table_modify_with_forward_miss_by_match_spec requires 3 args')
        sys.exit(1)
    pp.pprint(client.forward_table_table_modify_with_forward_miss_by_match_spec(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'forward_table_by_dst_ip_table_modify_with_forward_ip_hit':
    if len(args) != 4:
        print('forward_table_by_dst_ip_table_modify_with_forward_ip_hit requires 4 args')
        sys.exit(1)
    pp.pprint(client.forward_table_by_dst_ip_table_modify_with_forward_ip_hit(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'forward_table_by_dst_ip_table_modify_with_forward_ip_hit_by_match_spec':
    if len(args) != 4:
        print('forward_table_by_dst_ip_table_modify_with_forward_ip_hit_by_match_spec requires 4 args')
        sys.exit(1)
    pp.pprint(client.forward_table_by_dst_ip_table_modify_with_forward_ip_hit_by_match_spec(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'forward_table_by_dst_ip_table_modify_with_forward_ip_miss':
    if len(args) != 3:
        print('forward_table_by_dst_ip_table_modify_with_forward_ip_miss requires 3 args')
        sys.exit(1)
    pp.pprint(client.forward_table_by_dst_ip_table_modify_with_forward_ip_miss(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'forward_table_by_dst_ip_table_modify_with_forward_ip_miss_by_match_spec':
    if len(args) != 3:
        print('forward_table_by_dst_ip_table_modify_with_forward_ip_miss_by_match_spec requires 3 args')
        sys.exit(1)
    pp.pprint(client.forward_table_by_dst_ip_table_modify_with_forward_ip_miss_by_match_spec(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'state_check_table_table_modify_with_state_check_allow_action':
    if len(args) != 3:
        print('state_check_table_table_modify_with_state_check_allow_action requires 3 args')
        sys.exit(1)
    pp.pprint(client.state_check_table_table_modify_with_state_check_allow_action(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'state_check_table_table_modify_with_state_check_allow_action_by_match_spec':
    if len(args) != 3:
        print('state_check_table_table_modify_with_state_check_allow_action_by_match_spec requires 3 args')
        sys.exit(1)
    pp.pprint(client.state_check_table_table_modify_with_state_check_allow_action_by_match_spec(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'state_check_table_table_modify_with_state_check_to_controller_action':
    if len(args) != 3:
        print('state_check_table_table_modify_with_state_check_to_controller_action requires 3 args')
        sys.exit(1)
    pp.pprint(client.state_check_table_table_modify_with_state_check_to_controller_action(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'state_check_table_table_modify_with_state_check_to_controller_action_by_match_spec':
    if len(args) != 3:
        print('state_check_table_table_modify_with_state_check_to_controller_action_by_match_spec requires 3 args')
        sys.exit(1)
    pp.pprint(client.state_check_table_table_modify_with_state_check_to_controller_action_by_match_spec(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'state_check_table_table_modify_with_state_check_drop_action':
    if len(args) != 3:
        print('state_check_table_table_modify_with_state_check_drop_action requires 3 args')
        sys.exit(1)
    pp.pprint(client.state_check_table_table_modify_with_state_check_drop_action(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'state_check_table_table_modify_with_state_check_drop_action_by_match_spec':
    if len(args) != 3:
        print('state_check_table_table_modify_with_state_check_drop_action_by_match_spec requires 3 args')
        sys.exit(1)
    pp.pprint(client.state_check_table_table_modify_with_state_check_drop_action_by_match_spec(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'firewall_table_table_delete':
    if len(args) != 3:
        print('firewall_table_table_delete requires 3 args')
        sys.exit(1)
    pp.pprint(client.firewall_table_table_delete(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'firewall_table_table_delete_by_match_spec':
    if len(args) != 3:
        print('firewall_table_table_delete_by_match_spec requires 3 args')
        sys.exit(1)
    pp.pprint(client.firewall_table_table_delete_by_match_spec(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'forward_table_table_delete':
    if len(args) != 3:
        print('forward_table_table_delete requires 3 args')
        sys.exit(1)
    pp.pprint(client.forward_table_table_delete(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'forward_table_table_delete_by_match_spec':
    if len(args) != 3:
        print('forward_table_table_delete_by_match_spec requires 3 args')
        sys.exit(1)
    pp.pprint(client.forward_table_table_delete_by_match_spec(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'forward_table_by_dst_ip_table_delete':
    if len(args) != 3:
        print('forward_table_by_dst_ip_table_delete requires 3 args')
        sys.exit(1)
    pp.pprint(client.forward_table_by_dst_ip_table_delete(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'forward_table_by_dst_ip_table_delete_by_match_spec':
    if len(args) != 3:
        print('forward_table_by_dst_ip_table_delete_by_match_spec requires 3 args')
        sys.exit(1)
    pp.pprint(client.forward_table_by_dst_ip_table_delete_by_match_spec(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'state_check_table_table_delete':
    if len(args) != 3:
        print('state_check_table_table_delete requires 3 args')
        sys.exit(1)
    pp.pprint(client.state_check_table_table_delete(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'state_check_table_table_delete_by_match_spec':
    if len(args) != 3:
        print('state_check_table_table_delete_by_match_spec requires 3 args')
        sys.exit(1)
    pp.pprint(client.state_check_table_table_delete_by_match_spec(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'firewall_table_table_get_default_entry_handle':
    if len(args) != 2:
        print('firewall_table_table_get_default_entry_handle requires 2 args')
        sys.exit(1)
    pp.pprint(client.firewall_table_table_get_default_entry_handle(eval(args[0]), eval(args[1]),))

elif cmd == 'firewall_table_table_get_default_entry':
    if len(args) != 3:
        print('firewall_table_table_get_default_entry requires 3 args')
        sys.exit(1)
    pp.pprint(client.firewall_table_table_get_default_entry(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'forward_table_table_get_default_entry_handle':
    if len(args) != 2:
        print('forward_table_table_get_default_entry_handle requires 2 args')
        sys.exit(1)
    pp.pprint(client.forward_table_table_get_default_entry_handle(eval(args[0]), eval(args[1]),))

elif cmd == 'forward_table_table_get_default_entry':
    if len(args) != 3:
        print('forward_table_table_get_default_entry requires 3 args')
        sys.exit(1)
    pp.pprint(client.forward_table_table_get_default_entry(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'forward_table_by_dst_ip_table_get_default_entry_handle':
    if len(args) != 2:
        print('forward_table_by_dst_ip_table_get_default_entry_handle requires 2 args')
        sys.exit(1)
    pp.pprint(client.forward_table_by_dst_ip_table_get_default_entry_handle(eval(args[0]), eval(args[1]),))

elif cmd == 'forward_table_by_dst_ip_table_get_default_entry':
    if len(args) != 3:
        print('forward_table_by_dst_ip_table_get_default_entry requires 3 args')
        sys.exit(1)
    pp.pprint(client.forward_table_by_dst_ip_table_get_default_entry(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'state_check_table_table_get_default_entry_handle':
    if len(args) != 2:
        print('state_check_table_table_get_default_entry_handle requires 2 args')
        sys.exit(1)
    pp.pprint(client.state_check_table_table_get_default_entry_handle(eval(args[0]), eval(args[1]),))

elif cmd == 'state_check_table_table_get_default_entry':
    if len(args) != 3:
        print('state_check_table_table_get_default_entry requires 3 args')
        sys.exit(1)
    pp.pprint(client.state_check_table_table_get_default_entry(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'firewall_table_table_reset_default_entry':
    if len(args) != 2:
        print('firewall_table_table_reset_default_entry requires 2 args')
        sys.exit(1)
    pp.pprint(client.firewall_table_table_reset_default_entry(eval(args[0]), eval(args[1]),))

elif cmd == 'forward_table_table_reset_default_entry':
    if len(args) != 2:
        print('forward_table_table_reset_default_entry requires 2 args')
        sys.exit(1)
    pp.pprint(client.forward_table_table_reset_default_entry(eval(args[0]), eval(args[1]),))

elif cmd == 'forward_table_by_dst_ip_table_reset_default_entry':
    if len(args) != 2:
        print('forward_table_by_dst_ip_table_reset_default_entry requires 2 args')
        sys.exit(1)
    pp.pprint(client.forward_table_by_dst_ip_table_reset_default_entry(eval(args[0]), eval(args[1]),))

elif cmd == 'state_check_table_table_reset_default_entry':
    if len(args) != 2:
        print('state_check_table_table_reset_default_entry requires 2 args')
        sys.exit(1)
    pp.pprint(client.state_check_table_table_reset_default_entry(eval(args[0]), eval(args[1]),))

elif cmd == 'firewall_table_get_entry_count':
    if len(args) != 2:
        print('firewall_table_get_entry_count requires 2 args')
        sys.exit(1)
    pp.pprint(client.firewall_table_get_entry_count(eval(args[0]), eval(args[1]),))

elif cmd == 'forward_table_get_entry_count':
    if len(args) != 2:
        print('forward_table_get_entry_count requires 2 args')
        sys.exit(1)
    pp.pprint(client.forward_table_get_entry_count(eval(args[0]), eval(args[1]),))

elif cmd == 'forward_table_by_dst_ip_get_entry_count':
    if len(args) != 2:
        print('forward_table_by_dst_ip_get_entry_count requires 2 args')
        sys.exit(1)
    pp.pprint(client.forward_table_by_dst_ip_get_entry_count(eval(args[0]), eval(args[1]),))

elif cmd == 'state_check_table_get_entry_count':
    if len(args) != 2:
        print('state_check_table_get_entry_count requires 2 args')
        sys.exit(1)
    pp.pprint(client.state_check_table_get_entry_count(eval(args[0]), eval(args[1]),))

elif cmd == 'firewall_table_get_first_entry_handle':
    if len(args) != 2:
        print('firewall_table_get_first_entry_handle requires 2 args')
        sys.exit(1)
    pp.pprint(client.firewall_table_get_first_entry_handle(eval(args[0]), eval(args[1]),))

elif cmd == 'firewall_table_get_next_entry_handles':
    if len(args) != 4:
        print('firewall_table_get_next_entry_handles requires 4 args')
        sys.exit(1)
    pp.pprint(client.firewall_table_get_next_entry_handles(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'firewall_table_get_entry':
    if len(args) != 4:
        print('firewall_table_get_entry requires 4 args')
        sys.exit(1)
    pp.pprint(client.firewall_table_get_entry(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'forward_table_get_first_entry_handle':
    if len(args) != 2:
        print('forward_table_get_first_entry_handle requires 2 args')
        sys.exit(1)
    pp.pprint(client.forward_table_get_first_entry_handle(eval(args[0]), eval(args[1]),))

elif cmd == 'forward_table_get_next_entry_handles':
    if len(args) != 4:
        print('forward_table_get_next_entry_handles requires 4 args')
        sys.exit(1)
    pp.pprint(client.forward_table_get_next_entry_handles(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'forward_table_get_entry':
    if len(args) != 4:
        print('forward_table_get_entry requires 4 args')
        sys.exit(1)
    pp.pprint(client.forward_table_get_entry(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'forward_table_by_dst_ip_get_first_entry_handle':
    if len(args) != 2:
        print('forward_table_by_dst_ip_get_first_entry_handle requires 2 args')
        sys.exit(1)
    pp.pprint(client.forward_table_by_dst_ip_get_first_entry_handle(eval(args[0]), eval(args[1]),))

elif cmd == 'forward_table_by_dst_ip_get_next_entry_handles':
    if len(args) != 4:
        print('forward_table_by_dst_ip_get_next_entry_handles requires 4 args')
        sys.exit(1)
    pp.pprint(client.forward_table_by_dst_ip_get_next_entry_handles(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'forward_table_by_dst_ip_get_entry':
    if len(args) != 4:
        print('forward_table_by_dst_ip_get_entry requires 4 args')
        sys.exit(1)
    pp.pprint(client.forward_table_by_dst_ip_get_entry(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'state_check_table_get_first_entry_handle':
    if len(args) != 2:
        print('state_check_table_get_first_entry_handle requires 2 args')
        sys.exit(1)
    pp.pprint(client.state_check_table_get_first_entry_handle(eval(args[0]), eval(args[1]),))

elif cmd == 'state_check_table_get_next_entry_handles':
    if len(args) != 4:
        print('state_check_table_get_next_entry_handles requires 4 args')
        sys.exit(1)
    pp.pprint(client.state_check_table_get_next_entry_handles(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'state_check_table_get_entry':
    if len(args) != 4:
        print('state_check_table_get_entry requires 4 args')
        sys.exit(1)
    pp.pprint(client.state_check_table_get_entry(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'firewall_table_set_default_action_firewall_drop_action':
    if len(args) != 2:
        print('firewall_table_set_default_action_firewall_drop_action requires 2 args')
        sys.exit(1)
    pp.pprint(client.firewall_table_set_default_action_firewall_drop_action(eval(args[0]), eval(args[1]),))

elif cmd == 'forward_table_set_default_action_forward_miss':
    if len(args) != 2:
        print('forward_table_set_default_action_forward_miss requires 2 args')
        sys.exit(1)
    pp.pprint(client.forward_table_set_default_action_forward_miss(eval(args[0]), eval(args[1]),))

elif cmd == 'forward_table_by_dst_ip_set_default_action_forward_ip_miss':
    if len(args) != 2:
        print('forward_table_by_dst_ip_set_default_action_forward_ip_miss requires 2 args')
        sys.exit(1)
    pp.pprint(client.forward_table_by_dst_ip_set_default_action_forward_ip_miss(eval(args[0]), eval(args[1]),))

elif cmd == 'state_check_table_set_default_action_state_check_drop_action':
    if len(args) != 2:
        print('state_check_table_set_default_action_state_check_drop_action requires 2 args')
        sys.exit(1)
    pp.pprint(client.state_check_table_set_default_action_state_check_drop_action(eval(args[0]), eval(args[1]),))

elif cmd == 'firewall_table_set_property':
    if len(args) != 5:
        print('firewall_table_set_property requires 5 args')
        sys.exit(1)
    pp.pprint(client.firewall_table_set_property(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'firewall_table_get_property':
    if len(args) != 3:
        print('firewall_table_get_property requires 3 args')
        sys.exit(1)
    pp.pprint(client.firewall_table_get_property(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'forward_table_set_property':
    if len(args) != 5:
        print('forward_table_set_property requires 5 args')
        sys.exit(1)
    pp.pprint(client.forward_table_set_property(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'forward_table_get_property':
    if len(args) != 3:
        print('forward_table_get_property requires 3 args')
        sys.exit(1)
    pp.pprint(client.forward_table_get_property(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'forward_table_by_dst_ip_set_property':
    if len(args) != 5:
        print('forward_table_by_dst_ip_set_property requires 5 args')
        sys.exit(1)
    pp.pprint(client.forward_table_by_dst_ip_set_property(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'forward_table_by_dst_ip_get_property':
    if len(args) != 3:
        print('forward_table_by_dst_ip_get_property requires 3 args')
        sys.exit(1)
    pp.pprint(client.forward_table_by_dst_ip_get_property(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'state_check_table_set_property':
    if len(args) != 5:
        print('state_check_table_set_property requires 5 args')
        sys.exit(1)
    pp.pprint(client.state_check_table_set_property(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'state_check_table_get_property':
    if len(args) != 3:
        print('state_check_table_get_property requires 3 args')
        sys.exit(1)
    pp.pprint(client.state_check_table_get_property(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'set_learning_timeout':
    if len(args) != 3:
        print('set_learning_timeout requires 3 args')
        sys.exit(1)
    pp.pprint(client.set_learning_timeout(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'tbl_dbg_counter_type_set':
    if len(args) != 3:
        print('tbl_dbg_counter_type_set requires 3 args')
        sys.exit(1)
    pp.pprint(client.tbl_dbg_counter_type_set(eval(args[0]), args[1], eval(args[2]),))

elif cmd == 'tbl_dbg_counter_get':
    if len(args) != 2:
        print('tbl_dbg_counter_get requires 2 args')
        sys.exit(1)
    pp.pprint(client.tbl_dbg_counter_get(eval(args[0]), args[1],))

elif cmd == 'tbl_dbg_counter_clear':
    if len(args) != 2:
        print('tbl_dbg_counter_clear requires 2 args')
        sys.exit(1)
    pp.pprint(client.tbl_dbg_counter_clear(eval(args[0]), args[1],))

elif cmd == 'tbl_dbg_counter_type_stage_set':
    if len(args) != 3:
        print('tbl_dbg_counter_type_stage_set requires 3 args')
        sys.exit(1)
    pp.pprint(client.tbl_dbg_counter_type_stage_set(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'tbl_dbg_counter_stage_get':
    if len(args) != 2:
        print('tbl_dbg_counter_stage_get requires 2 args')
        sys.exit(1)
    pp.pprint(client.tbl_dbg_counter_stage_get(eval(args[0]), eval(args[1]),))

elif cmd == 'tbl_dbg_counter_stage_clear':
    if len(args) != 2:
        print('tbl_dbg_counter_stage_clear requires 2 args')
        sys.exit(1)
    pp.pprint(client.tbl_dbg_counter_stage_clear(eval(args[0]), eval(args[1]),))

elif cmd == 'snapshot_create':
    if len(args) != 4:
        print('snapshot_create requires 4 args')
        sys.exit(1)
    pp.pprint(client.snapshot_create(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'snapshot_delete':
    if len(args) != 1:
        print('snapshot_delete requires 1 args')
        sys.exit(1)
    pp.pprint(client.snapshot_delete(eval(args[0]),))

elif cmd == 'snapshot_state_set':
    if len(args) != 3:
        print('snapshot_state_set requires 3 args')
        sys.exit(1)
    pp.pprint(client.snapshot_state_set(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'snapshot_state_get':
    if len(args) != 2:
        print('snapshot_state_get requires 2 args')
        sys.exit(1)
    pp.pprint(client.snapshot_state_get(eval(args[0]), eval(args[1]),))

elif cmd == 'snapshot_timer_enable':
    if len(args) != 2:
        print('snapshot_timer_enable requires 2 args')
        sys.exit(1)
    pp.pprint(client.snapshot_timer_enable(eval(args[0]), eval(args[1]),))

elif cmd == 'snapshot_capture_trigger_set':
    if len(args) != 3:
        print('snapshot_capture_trigger_set requires 3 args')
        sys.exit(1)
    pp.pprint(client.snapshot_capture_trigger_set(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'snapshot_capture_data_get':
    if len(args) != 4:
        print('snapshot_capture_data_get requires 4 args')
        sys.exit(1)
    pp.pprint(client.snapshot_capture_data_get(eval(args[0]), eval(args[1]), eval(args[2]), args[3],))

elif cmd == 'snapshot_capture_tbl_data_get':
    if len(args) != 3:
        print('snapshot_capture_tbl_data_get requires 3 args')
        sys.exit(1)
    pp.pprint(client.snapshot_capture_tbl_data_get(eval(args[0]), eval(args[1]), args[2],))

elif cmd == 'snapshot_capture_trigger_fields_clr':
    if len(args) != 1:
        print('snapshot_capture_trigger_fields_clr requires 1 args')
        sys.exit(1)
    pp.pprint(client.snapshot_capture_trigger_fields_clr(eval(args[0]),))

elif cmd == 'snapshot_field_in_scope':
    if len(args) != 4:
        print('snapshot_field_in_scope requires 4 args')
        sys.exit(1)
    pp.pprint(client.snapshot_field_in_scope(eval(args[0]), eval(args[1]), eval(args[2]), args[3],))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
