#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.14.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:package_prefix=controller.thrift_api.
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from sd_pd_rpc import sd
from sd_pd_rpc.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  bf_status_t sd_mgmt_clksel_set(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane, i32 clk_src)')
    print('  i32_value sd_mgmt_clksel_get(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane)')
    print('  bf_status_t sd_mgmt_access_method_set(bf_dev_id_t dev_id, i32 method)')
    print('  i32_value sd_mgmt_access_method_get(bf_dev_id_t dev_id)')
    print('  bf_status_t sd_mgmt_bcast_set(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane, bool tx_dir, bool en)')
    print('  bool_value sd_mgmt_bcast_get(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane, bool tx_dir)')
    print('  bf_status_t sd_mgmt_reg_set(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane, bool tx_dir, i32 reg, i32 data)')
    print('  i32_value sd_mgmt_reg_get(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane, bool tx_dir, i32 reg)')
    print('  i32_value sd_mgmt_uc_int(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane, bool tx_dir, i32 interrupt, i32 int_data)')
    print('  bf_status_t sd_port_lane_map_set(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 tx_l0, i32 tx_l1, i32 tx_l2, i32 tx_l3, i32 rx_l0, i32 rx_l1, i32 rx_l2, i32 rx_l3)')
    print('  lane_map sd_port_lane_map_get(bf_dev_id_t dev_id, bf_dev_port_t dev_port)')
    print('  bf_status_t sd_dev_rx_eq_cal_rr_set(bf_dev_id_t dev_id, i32 fine_tune_lane_cnt)')
    print('  i32_value sd_dev_rx_eq_cal_rr_get(bf_dev_id_t dev_id)')
    print('  bf_status_t sd_tx_pll_clksel_set(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane, i32 clk_source)')
    print('  i32_value sd_tx_pll_clksel_get(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane)')
    print('  bf_status_t sd_lane_init_run(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane, i32 line_rate, bool init_rx, bool init_tx, bool tx_drv_en, bool phase_cal)')
    print('  bool_value sd_tx_pll_lock_get(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane)')
    print('  bool_value sd_rx_cdr_lock_get(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane)')
    print('  pll_status sd_tx_pll_status_get(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane)')
    print('  pll_status sd_rx_cdr_status_get(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane)')
    print('  bf_status_t sd_lane_loopback_set(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane, i32 loopback_mode)')
    print('  i32_value sd_lane_loopback_get(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane)')
    print('  bf_status_t sd_tx_en_set(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane, bool tx_en)')
    print('  bool_value sd_tx_en_get(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane)')
    print('  bf_status_t sd_tx_drv_en_set(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane, bool tx_en)')
    print('  bool_value sd_tx_drv_en_get(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane)')
    print('  bf_status_t sd_tx_drv_inv_set(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane, bool inv)')
    print('  bool_value sd_tx_drv_inv_get(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane)')
    print('  bf_status_t sd_tx_drv_attn_is_valid(i32 attn_main, i32 attn_post, i32 attn_pre)')
    print('  bf_status_t sd_tx_drv_attn_set(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane, i32 attn_main, i32 attn_post, i32 attn_pre)')
    print('  drv_attn sd_tx_drv_attn_get(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane)')
    print('  bf_status_t sd_tx_drv_amp_set(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane, i32 amp_main, i32 amp_post, i32 amp_pre)')
    print('  drv_amp sd_tx_drv_amp_get(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane)')
    print('  tx_drv_sts sd_tx_drv_status_get(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane)')
    print('  bf_status_t sd_rx_en_set(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane, bool rx_en)')
    print('  bool_value sd_rx_en_get(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane)')
    print('  bf_status_t sd_rx_afe_inv_set(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane, bool inv_en)')
    print('  bool_value sd_rx_afe_inv_get(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane)')
    print('  bf_status_t sd_rx_afe_term_set(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane, i32 rx_term)')
    print('  i32_value sd_rx_afe_term_get(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane)')
    print('  bf_status_t sd_rx_afe_los_thres_set(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane, bool rx_los_en, i32 rx_los_thres)')
    print('  rx_los_cfg sd_rx_afe_los_thres_get(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane)')
    print('  bool_value sd_rx_afe_los_get(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane)')
    print('  bool_value sd_rx_eq_cal_busy_get(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane, i32 chk_cnt, i32 chk_wait)')
    print('  bf_status_t sd_rx_eq_ctle_set(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane, i32 ctle_dc, i32 ctle_lf, i32 ctle_hf, i32 ctle_bw)')
    print('  rx_eq_ctle sd_rx_eq_ctle_get(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane)')
    print('  bf_status_t sd_rx_eq_dfe_adv_set(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane, i32 dfe_tap_num, i32 dfe_tap_val)')
    print('  i32_value sd_rx_eq_dfe_adv_get(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane, i32 dfe_tap_num)')
    print('  bf_status_t sd_rx_eq_dfe_set(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane, i32 dfe_gain, i32 dfe_tap1, i32 dfe_tap2, i32 dfe_tap3, i32 dfe_tap4)')
    print('  dfe_taps sd_rx_eq_dfe_get(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane)')
    print('  bf_status_t sd_rx_eq_cal_param_set(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane, i32 ctle_dc_hint, i32 dfe_gain_range, i32 pcal_loop_cnt)')
    print('  eq_cal_params sd_rx_eq_cal_param_get(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane)')
    print('  bf_status_t sd_rx_eq_cal_adv_run(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane, i32 cal_cmd, i32 ctle_cal_cfg, i32 dfe_fixed)')
    print('  i32_value sd_rx_eq_cal_eye_get(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane)')
    print('  bf_status_t sd_rx_eq_ical_run(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane)')
    print('  ical_result sd_rx_eq_ical_eye_get(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane, i32 cal_good_thres)')
    print('  bf_status_t sd_rx_eq_pcal_run(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane, i32 cal_cont)')
    print('  rx_eq_status sd_rx_eq_status_get(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane)')
    print('  bf_status_t sd_rx_eye_offset_set(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane, i32 offset_en, i32 pos_x, i32 pos_y)')
    print('  i32_value sd_rx_eye_get(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane, i32 meas_mode, i32 meas_ber)')
    print('  i32_value sd_rx_eye_3d_get(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane, i32 meas_ber)')
    print('  bf_status_t sd_tx_err_inj_set(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane, i32 num_bits)')
    print('  bf_status_t sd_rx_err_inj_set(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane, i32 num_bits)')
    print('  bf_status_t sd_tx_patsel_set(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane, i32 tx_patsel)')
    print('  i32_value sd_tx_patsel_get(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane)')
    print('  bf_status_t sd_rx_patsel_set(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane, i32 rx_patsel)')
    print('  i32_value sd_rx_patsel_get(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane)')
    print('  i32_value sd_rx_err_cnt_get(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane)')
    print('  bf_status_t sd_tx_fixed_pat_set(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane, i32 tx_fixed_pat_0, i32 tx_fixed_pat_1, i32 tx_fixed_pat_2, i32 tx_fixed_pat_3)')
    print('  tx_fixed_pat sd_tx_fixed_pat_get(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane)')
    print('  rx_cap_pat sd_rx_data_cap_get(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane)')
    print('  tx_eq_data sd_get_tx_eq(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane)')
    print('  bf_status_t sd_set_tx_eq(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane, i32 pre, i32 atten, i32 post)')
    print('  bf_status_t sd_get_pll_state(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane, i32 expected_divider)')
    print('  bool_state sd_get_tx_output_en(bf_dev_id_t dev_id, bf_dev_port_t dev_port, i32 lane)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = sd.Client(protocol)
transport.open()

if cmd == 'sd_mgmt_clksel_set':
    if len(args) != 4:
        print('sd_mgmt_clksel_set requires 4 args')
        sys.exit(1)
    pp.pprint(client.sd_mgmt_clksel_set(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'sd_mgmt_clksel_get':
    if len(args) != 3:
        print('sd_mgmt_clksel_get requires 3 args')
        sys.exit(1)
    pp.pprint(client.sd_mgmt_clksel_get(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'sd_mgmt_access_method_set':
    if len(args) != 2:
        print('sd_mgmt_access_method_set requires 2 args')
        sys.exit(1)
    pp.pprint(client.sd_mgmt_access_method_set(eval(args[0]), eval(args[1]),))

elif cmd == 'sd_mgmt_access_method_get':
    if len(args) != 1:
        print('sd_mgmt_access_method_get requires 1 args')
        sys.exit(1)
    pp.pprint(client.sd_mgmt_access_method_get(eval(args[0]),))

elif cmd == 'sd_mgmt_bcast_set':
    if len(args) != 5:
        print('sd_mgmt_bcast_set requires 5 args')
        sys.exit(1)
    pp.pprint(client.sd_mgmt_bcast_set(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'sd_mgmt_bcast_get':
    if len(args) != 4:
        print('sd_mgmt_bcast_get requires 4 args')
        sys.exit(1)
    pp.pprint(client.sd_mgmt_bcast_get(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'sd_mgmt_reg_set':
    if len(args) != 6:
        print('sd_mgmt_reg_set requires 6 args')
        sys.exit(1)
    pp.pprint(client.sd_mgmt_reg_set(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]),))

elif cmd == 'sd_mgmt_reg_get':
    if len(args) != 5:
        print('sd_mgmt_reg_get requires 5 args')
        sys.exit(1)
    pp.pprint(client.sd_mgmt_reg_get(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'sd_mgmt_uc_int':
    if len(args) != 6:
        print('sd_mgmt_uc_int requires 6 args')
        sys.exit(1)
    pp.pprint(client.sd_mgmt_uc_int(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]),))

elif cmd == 'sd_port_lane_map_set':
    if len(args) != 10:
        print('sd_port_lane_map_set requires 10 args')
        sys.exit(1)
    pp.pprint(client.sd_port_lane_map_set(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]), eval(args[6]), eval(args[7]), eval(args[8]), eval(args[9]),))

elif cmd == 'sd_port_lane_map_get':
    if len(args) != 2:
        print('sd_port_lane_map_get requires 2 args')
        sys.exit(1)
    pp.pprint(client.sd_port_lane_map_get(eval(args[0]), eval(args[1]),))

elif cmd == 'sd_dev_rx_eq_cal_rr_set':
    if len(args) != 2:
        print('sd_dev_rx_eq_cal_rr_set requires 2 args')
        sys.exit(1)
    pp.pprint(client.sd_dev_rx_eq_cal_rr_set(eval(args[0]), eval(args[1]),))

elif cmd == 'sd_dev_rx_eq_cal_rr_get':
    if len(args) != 1:
        print('sd_dev_rx_eq_cal_rr_get requires 1 args')
        sys.exit(1)
    pp.pprint(client.sd_dev_rx_eq_cal_rr_get(eval(args[0]),))

elif cmd == 'sd_tx_pll_clksel_set':
    if len(args) != 4:
        print('sd_tx_pll_clksel_set requires 4 args')
        sys.exit(1)
    pp.pprint(client.sd_tx_pll_clksel_set(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'sd_tx_pll_clksel_get':
    if len(args) != 3:
        print('sd_tx_pll_clksel_get requires 3 args')
        sys.exit(1)
    pp.pprint(client.sd_tx_pll_clksel_get(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'sd_lane_init_run':
    if len(args) != 8:
        print('sd_lane_init_run requires 8 args')
        sys.exit(1)
    pp.pprint(client.sd_lane_init_run(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]), eval(args[6]), eval(args[7]),))

elif cmd == 'sd_tx_pll_lock_get':
    if len(args) != 3:
        print('sd_tx_pll_lock_get requires 3 args')
        sys.exit(1)
    pp.pprint(client.sd_tx_pll_lock_get(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'sd_rx_cdr_lock_get':
    if len(args) != 3:
        print('sd_rx_cdr_lock_get requires 3 args')
        sys.exit(1)
    pp.pprint(client.sd_rx_cdr_lock_get(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'sd_tx_pll_status_get':
    if len(args) != 3:
        print('sd_tx_pll_status_get requires 3 args')
        sys.exit(1)
    pp.pprint(client.sd_tx_pll_status_get(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'sd_rx_cdr_status_get':
    if len(args) != 3:
        print('sd_rx_cdr_status_get requires 3 args')
        sys.exit(1)
    pp.pprint(client.sd_rx_cdr_status_get(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'sd_lane_loopback_set':
    if len(args) != 4:
        print('sd_lane_loopback_set requires 4 args')
        sys.exit(1)
    pp.pprint(client.sd_lane_loopback_set(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'sd_lane_loopback_get':
    if len(args) != 3:
        print('sd_lane_loopback_get requires 3 args')
        sys.exit(1)
    pp.pprint(client.sd_lane_loopback_get(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'sd_tx_en_set':
    if len(args) != 4:
        print('sd_tx_en_set requires 4 args')
        sys.exit(1)
    pp.pprint(client.sd_tx_en_set(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'sd_tx_en_get':
    if len(args) != 3:
        print('sd_tx_en_get requires 3 args')
        sys.exit(1)
    pp.pprint(client.sd_tx_en_get(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'sd_tx_drv_en_set':
    if len(args) != 4:
        print('sd_tx_drv_en_set requires 4 args')
        sys.exit(1)
    pp.pprint(client.sd_tx_drv_en_set(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'sd_tx_drv_en_get':
    if len(args) != 3:
        print('sd_tx_drv_en_get requires 3 args')
        sys.exit(1)
    pp.pprint(client.sd_tx_drv_en_get(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'sd_tx_drv_inv_set':
    if len(args) != 4:
        print('sd_tx_drv_inv_set requires 4 args')
        sys.exit(1)
    pp.pprint(client.sd_tx_drv_inv_set(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'sd_tx_drv_inv_get':
    if len(args) != 3:
        print('sd_tx_drv_inv_get requires 3 args')
        sys.exit(1)
    pp.pprint(client.sd_tx_drv_inv_get(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'sd_tx_drv_attn_is_valid':
    if len(args) != 3:
        print('sd_tx_drv_attn_is_valid requires 3 args')
        sys.exit(1)
    pp.pprint(client.sd_tx_drv_attn_is_valid(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'sd_tx_drv_attn_set':
    if len(args) != 6:
        print('sd_tx_drv_attn_set requires 6 args')
        sys.exit(1)
    pp.pprint(client.sd_tx_drv_attn_set(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]),))

elif cmd == 'sd_tx_drv_attn_get':
    if len(args) != 3:
        print('sd_tx_drv_attn_get requires 3 args')
        sys.exit(1)
    pp.pprint(client.sd_tx_drv_attn_get(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'sd_tx_drv_amp_set':
    if len(args) != 6:
        print('sd_tx_drv_amp_set requires 6 args')
        sys.exit(1)
    pp.pprint(client.sd_tx_drv_amp_set(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]),))

elif cmd == 'sd_tx_drv_amp_get':
    if len(args) != 3:
        print('sd_tx_drv_amp_get requires 3 args')
        sys.exit(1)
    pp.pprint(client.sd_tx_drv_amp_get(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'sd_tx_drv_status_get':
    if len(args) != 3:
        print('sd_tx_drv_status_get requires 3 args')
        sys.exit(1)
    pp.pprint(client.sd_tx_drv_status_get(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'sd_rx_en_set':
    if len(args) != 4:
        print('sd_rx_en_set requires 4 args')
        sys.exit(1)
    pp.pprint(client.sd_rx_en_set(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'sd_rx_en_get':
    if len(args) != 3:
        print('sd_rx_en_get requires 3 args')
        sys.exit(1)
    pp.pprint(client.sd_rx_en_get(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'sd_rx_afe_inv_set':
    if len(args) != 4:
        print('sd_rx_afe_inv_set requires 4 args')
        sys.exit(1)
    pp.pprint(client.sd_rx_afe_inv_set(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'sd_rx_afe_inv_get':
    if len(args) != 3:
        print('sd_rx_afe_inv_get requires 3 args')
        sys.exit(1)
    pp.pprint(client.sd_rx_afe_inv_get(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'sd_rx_afe_term_set':
    if len(args) != 4:
        print('sd_rx_afe_term_set requires 4 args')
        sys.exit(1)
    pp.pprint(client.sd_rx_afe_term_set(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'sd_rx_afe_term_get':
    if len(args) != 3:
        print('sd_rx_afe_term_get requires 3 args')
        sys.exit(1)
    pp.pprint(client.sd_rx_afe_term_get(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'sd_rx_afe_los_thres_set':
    if len(args) != 5:
        print('sd_rx_afe_los_thres_set requires 5 args')
        sys.exit(1)
    pp.pprint(client.sd_rx_afe_los_thres_set(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'sd_rx_afe_los_thres_get':
    if len(args) != 3:
        print('sd_rx_afe_los_thres_get requires 3 args')
        sys.exit(1)
    pp.pprint(client.sd_rx_afe_los_thres_get(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'sd_rx_afe_los_get':
    if len(args) != 3:
        print('sd_rx_afe_los_get requires 3 args')
        sys.exit(1)
    pp.pprint(client.sd_rx_afe_los_get(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'sd_rx_eq_cal_busy_get':
    if len(args) != 5:
        print('sd_rx_eq_cal_busy_get requires 5 args')
        sys.exit(1)
    pp.pprint(client.sd_rx_eq_cal_busy_get(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'sd_rx_eq_ctle_set':
    if len(args) != 7:
        print('sd_rx_eq_ctle_set requires 7 args')
        sys.exit(1)
    pp.pprint(client.sd_rx_eq_ctle_set(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]), eval(args[6]),))

elif cmd == 'sd_rx_eq_ctle_get':
    if len(args) != 3:
        print('sd_rx_eq_ctle_get requires 3 args')
        sys.exit(1)
    pp.pprint(client.sd_rx_eq_ctle_get(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'sd_rx_eq_dfe_adv_set':
    if len(args) != 5:
        print('sd_rx_eq_dfe_adv_set requires 5 args')
        sys.exit(1)
    pp.pprint(client.sd_rx_eq_dfe_adv_set(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'sd_rx_eq_dfe_adv_get':
    if len(args) != 4:
        print('sd_rx_eq_dfe_adv_get requires 4 args')
        sys.exit(1)
    pp.pprint(client.sd_rx_eq_dfe_adv_get(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'sd_rx_eq_dfe_set':
    if len(args) != 8:
        print('sd_rx_eq_dfe_set requires 8 args')
        sys.exit(1)
    pp.pprint(client.sd_rx_eq_dfe_set(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]), eval(args[6]), eval(args[7]),))

elif cmd == 'sd_rx_eq_dfe_get':
    if len(args) != 3:
        print('sd_rx_eq_dfe_get requires 3 args')
        sys.exit(1)
    pp.pprint(client.sd_rx_eq_dfe_get(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'sd_rx_eq_cal_param_set':
    if len(args) != 6:
        print('sd_rx_eq_cal_param_set requires 6 args')
        sys.exit(1)
    pp.pprint(client.sd_rx_eq_cal_param_set(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]),))

elif cmd == 'sd_rx_eq_cal_param_get':
    if len(args) != 3:
        print('sd_rx_eq_cal_param_get requires 3 args')
        sys.exit(1)
    pp.pprint(client.sd_rx_eq_cal_param_get(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'sd_rx_eq_cal_adv_run':
    if len(args) != 6:
        print('sd_rx_eq_cal_adv_run requires 6 args')
        sys.exit(1)
    pp.pprint(client.sd_rx_eq_cal_adv_run(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]),))

elif cmd == 'sd_rx_eq_cal_eye_get':
    if len(args) != 3:
        print('sd_rx_eq_cal_eye_get requires 3 args')
        sys.exit(1)
    pp.pprint(client.sd_rx_eq_cal_eye_get(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'sd_rx_eq_ical_run':
    if len(args) != 3:
        print('sd_rx_eq_ical_run requires 3 args')
        sys.exit(1)
    pp.pprint(client.sd_rx_eq_ical_run(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'sd_rx_eq_ical_eye_get':
    if len(args) != 4:
        print('sd_rx_eq_ical_eye_get requires 4 args')
        sys.exit(1)
    pp.pprint(client.sd_rx_eq_ical_eye_get(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'sd_rx_eq_pcal_run':
    if len(args) != 4:
        print('sd_rx_eq_pcal_run requires 4 args')
        sys.exit(1)
    pp.pprint(client.sd_rx_eq_pcal_run(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'sd_rx_eq_status_get':
    if len(args) != 3:
        print('sd_rx_eq_status_get requires 3 args')
        sys.exit(1)
    pp.pprint(client.sd_rx_eq_status_get(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'sd_rx_eye_offset_set':
    if len(args) != 6:
        print('sd_rx_eye_offset_set requires 6 args')
        sys.exit(1)
    pp.pprint(client.sd_rx_eye_offset_set(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]),))

elif cmd == 'sd_rx_eye_get':
    if len(args) != 5:
        print('sd_rx_eye_get requires 5 args')
        sys.exit(1)
    pp.pprint(client.sd_rx_eye_get(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'sd_rx_eye_3d_get':
    if len(args) != 4:
        print('sd_rx_eye_3d_get requires 4 args')
        sys.exit(1)
    pp.pprint(client.sd_rx_eye_3d_get(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'sd_tx_err_inj_set':
    if len(args) != 4:
        print('sd_tx_err_inj_set requires 4 args')
        sys.exit(1)
    pp.pprint(client.sd_tx_err_inj_set(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'sd_rx_err_inj_set':
    if len(args) != 4:
        print('sd_rx_err_inj_set requires 4 args')
        sys.exit(1)
    pp.pprint(client.sd_rx_err_inj_set(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'sd_tx_patsel_set':
    if len(args) != 4:
        print('sd_tx_patsel_set requires 4 args')
        sys.exit(1)
    pp.pprint(client.sd_tx_patsel_set(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'sd_tx_patsel_get':
    if len(args) != 3:
        print('sd_tx_patsel_get requires 3 args')
        sys.exit(1)
    pp.pprint(client.sd_tx_patsel_get(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'sd_rx_patsel_set':
    if len(args) != 4:
        print('sd_rx_patsel_set requires 4 args')
        sys.exit(1)
    pp.pprint(client.sd_rx_patsel_set(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'sd_rx_patsel_get':
    if len(args) != 3:
        print('sd_rx_patsel_get requires 3 args')
        sys.exit(1)
    pp.pprint(client.sd_rx_patsel_get(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'sd_rx_err_cnt_get':
    if len(args) != 3:
        print('sd_rx_err_cnt_get requires 3 args')
        sys.exit(1)
    pp.pprint(client.sd_rx_err_cnt_get(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'sd_tx_fixed_pat_set':
    if len(args) != 7:
        print('sd_tx_fixed_pat_set requires 7 args')
        sys.exit(1)
    pp.pprint(client.sd_tx_fixed_pat_set(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]), eval(args[6]),))

elif cmd == 'sd_tx_fixed_pat_get':
    if len(args) != 3:
        print('sd_tx_fixed_pat_get requires 3 args')
        sys.exit(1)
    pp.pprint(client.sd_tx_fixed_pat_get(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'sd_rx_data_cap_get':
    if len(args) != 3:
        print('sd_rx_data_cap_get requires 3 args')
        sys.exit(1)
    pp.pprint(client.sd_rx_data_cap_get(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'sd_get_tx_eq':
    if len(args) != 3:
        print('sd_get_tx_eq requires 3 args')
        sys.exit(1)
    pp.pprint(client.sd_get_tx_eq(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'sd_set_tx_eq':
    if len(args) != 6:
        print('sd_set_tx_eq requires 6 args')
        sys.exit(1)
    pp.pprint(client.sd_set_tx_eq(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]),))

elif cmd == 'sd_get_pll_state':
    if len(args) != 4:
        print('sd_get_pll_state requires 4 args')
        sys.exit(1)
    pp.pprint(client.sd_get_pll_state(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'sd_get_tx_output_en':
    if len(args) != 3:
        print('sd_get_tx_output_en requires 3 args')
        sys.exit(1)
    pp.pprint(client.sd_get_tx_output_en(eval(args[0]), eval(args[1]), eval(args[2]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
