#
# Autogenerated by Thrift Compiler (0.14.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:package_prefix=controller.thrift_api.
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    def sd_mgmt_clksel_set(self, dev_id, dev_port, lane, clk_src):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - clk_src

        """
        pass

    def sd_mgmt_clksel_get(self, dev_id, dev_port, lane):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane

        """
        pass

    def sd_mgmt_access_method_set(self, dev_id, method):
        """
        Parameters:
         - dev_id
         - method

        """
        pass

    def sd_mgmt_access_method_get(self, dev_id):
        """
        Parameters:
         - dev_id

        """
        pass

    def sd_mgmt_bcast_set(self, dev_id, dev_port, lane, tx_dir, en):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - tx_dir
         - en

        """
        pass

    def sd_mgmt_bcast_get(self, dev_id, dev_port, lane, tx_dir):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - tx_dir

        """
        pass

    def sd_mgmt_reg_set(self, dev_id, dev_port, lane, tx_dir, reg, data):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - tx_dir
         - reg
         - data

        """
        pass

    def sd_mgmt_reg_get(self, dev_id, dev_port, lane, tx_dir, reg):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - tx_dir
         - reg

        """
        pass

    def sd_mgmt_uc_int(self, dev_id, dev_port, lane, tx_dir, interrupt, int_data):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - tx_dir
         - interrupt
         - int_data

        """
        pass

    def sd_port_lane_map_set(self, dev_id, dev_port, tx_l0, tx_l1, tx_l2, tx_l3, rx_l0, rx_l1, rx_l2, rx_l3):
        """
        Parameters:
         - dev_id
         - dev_port
         - tx_l0
         - tx_l1
         - tx_l2
         - tx_l3
         - rx_l0
         - rx_l1
         - rx_l2
         - rx_l3

        """
        pass

    def sd_port_lane_map_get(self, dev_id, dev_port):
        """
        Parameters:
         - dev_id
         - dev_port

        """
        pass

    def sd_dev_rx_eq_cal_rr_set(self, dev_id, fine_tune_lane_cnt):
        """
        Parameters:
         - dev_id
         - fine_tune_lane_cnt

        """
        pass

    def sd_dev_rx_eq_cal_rr_get(self, dev_id):
        """
        Parameters:
         - dev_id

        """
        pass

    def sd_tx_pll_clksel_set(self, dev_id, dev_port, lane, clk_source):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - clk_source

        """
        pass

    def sd_tx_pll_clksel_get(self, dev_id, dev_port, lane):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane

        """
        pass

    def sd_lane_init_run(self, dev_id, dev_port, lane, line_rate, init_rx, init_tx, tx_drv_en, phase_cal):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - line_rate
         - init_rx
         - init_tx
         - tx_drv_en
         - phase_cal

        """
        pass

    def sd_tx_pll_lock_get(self, dev_id, dev_port, lane):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane

        """
        pass

    def sd_rx_cdr_lock_get(self, dev_id, dev_port, lane):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane

        """
        pass

    def sd_tx_pll_status_get(self, dev_id, dev_port, lane):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane

        """
        pass

    def sd_rx_cdr_status_get(self, dev_id, dev_port, lane):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane

        """
        pass

    def sd_lane_loopback_set(self, dev_id, dev_port, lane, loopback_mode):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - loopback_mode

        """
        pass

    def sd_lane_loopback_get(self, dev_id, dev_port, lane):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane

        """
        pass

    def sd_tx_en_set(self, dev_id, dev_port, lane, tx_en):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - tx_en

        """
        pass

    def sd_tx_en_get(self, dev_id, dev_port, lane):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane

        """
        pass

    def sd_tx_drv_en_set(self, dev_id, dev_port, lane, tx_en):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - tx_en

        """
        pass

    def sd_tx_drv_en_get(self, dev_id, dev_port, lane):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane

        """
        pass

    def sd_tx_drv_inv_set(self, dev_id, dev_port, lane, inv):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - inv

        """
        pass

    def sd_tx_drv_inv_get(self, dev_id, dev_port, lane):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane

        """
        pass

    def sd_tx_drv_attn_is_valid(self, attn_main, attn_post, attn_pre):
        """
        Parameters:
         - attn_main
         - attn_post
         - attn_pre

        """
        pass

    def sd_tx_drv_attn_set(self, dev_id, dev_port, lane, attn_main, attn_post, attn_pre):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - attn_main
         - attn_post
         - attn_pre

        """
        pass

    def sd_tx_drv_attn_get(self, dev_id, dev_port, lane):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane

        """
        pass

    def sd_tx_drv_amp_set(self, dev_id, dev_port, lane, amp_main, amp_post, amp_pre):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - amp_main
         - amp_post
         - amp_pre

        """
        pass

    def sd_tx_drv_amp_get(self, dev_id, dev_port, lane):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane

        """
        pass

    def sd_tx_drv_status_get(self, dev_id, dev_port, lane):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane

        """
        pass

    def sd_rx_en_set(self, dev_id, dev_port, lane, rx_en):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - rx_en

        """
        pass

    def sd_rx_en_get(self, dev_id, dev_port, lane):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane

        """
        pass

    def sd_rx_afe_inv_set(self, dev_id, dev_port, lane, inv_en):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - inv_en

        """
        pass

    def sd_rx_afe_inv_get(self, dev_id, dev_port, lane):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane

        """
        pass

    def sd_rx_afe_term_set(self, dev_id, dev_port, lane, rx_term):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - rx_term

        """
        pass

    def sd_rx_afe_term_get(self, dev_id, dev_port, lane):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane

        """
        pass

    def sd_rx_afe_los_thres_set(self, dev_id, dev_port, lane, rx_los_en, rx_los_thres):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - rx_los_en
         - rx_los_thres

        """
        pass

    def sd_rx_afe_los_thres_get(self, dev_id, dev_port, lane):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane

        """
        pass

    def sd_rx_afe_los_get(self, dev_id, dev_port, lane):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane

        """
        pass

    def sd_rx_eq_cal_busy_get(self, dev_id, dev_port, lane, chk_cnt, chk_wait):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - chk_cnt
         - chk_wait

        """
        pass

    def sd_rx_eq_ctle_set(self, dev_id, dev_port, lane, ctle_dc, ctle_lf, ctle_hf, ctle_bw):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - ctle_dc
         - ctle_lf
         - ctle_hf
         - ctle_bw

        """
        pass

    def sd_rx_eq_ctle_get(self, dev_id, dev_port, lane):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane

        """
        pass

    def sd_rx_eq_dfe_adv_set(self, dev_id, dev_port, lane, dfe_tap_num, dfe_tap_val):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - dfe_tap_num
         - dfe_tap_val

        """
        pass

    def sd_rx_eq_dfe_adv_get(self, dev_id, dev_port, lane, dfe_tap_num):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - dfe_tap_num

        """
        pass

    def sd_rx_eq_dfe_set(self, dev_id, dev_port, lane, dfe_gain, dfe_tap1, dfe_tap2, dfe_tap3, dfe_tap4):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - dfe_gain
         - dfe_tap1
         - dfe_tap2
         - dfe_tap3
         - dfe_tap4

        """
        pass

    def sd_rx_eq_dfe_get(self, dev_id, dev_port, lane):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane

        """
        pass

    def sd_rx_eq_cal_param_set(self, dev_id, dev_port, lane, ctle_dc_hint, dfe_gain_range, pcal_loop_cnt):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - ctle_dc_hint
         - dfe_gain_range
         - pcal_loop_cnt

        """
        pass

    def sd_rx_eq_cal_param_get(self, dev_id, dev_port, lane):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane

        """
        pass

    def sd_rx_eq_cal_adv_run(self, dev_id, dev_port, lane, cal_cmd, ctle_cal_cfg, dfe_fixed):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - cal_cmd
         - ctle_cal_cfg
         - dfe_fixed

        """
        pass

    def sd_rx_eq_cal_eye_get(self, dev_id, dev_port, lane):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane

        """
        pass

    def sd_rx_eq_ical_run(self, dev_id, dev_port, lane):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane

        """
        pass

    def sd_rx_eq_ical_eye_get(self, dev_id, dev_port, lane, cal_good_thres):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - cal_good_thres

        """
        pass

    def sd_rx_eq_pcal_run(self, dev_id, dev_port, lane, cal_cont):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - cal_cont

        """
        pass

    def sd_rx_eq_status_get(self, dev_id, dev_port, lane):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane

        """
        pass

    def sd_rx_eye_offset_set(self, dev_id, dev_port, lane, offset_en, pos_x, pos_y):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - offset_en
         - pos_x
         - pos_y

        """
        pass

    def sd_rx_eye_get(self, dev_id, dev_port, lane, meas_mode, meas_ber):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - meas_mode
         - meas_ber

        """
        pass

    def sd_rx_eye_3d_get(self, dev_id, dev_port, lane, meas_ber):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - meas_ber

        """
        pass

    def sd_tx_err_inj_set(self, dev_id, dev_port, lane, num_bits):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - num_bits

        """
        pass

    def sd_rx_err_inj_set(self, dev_id, dev_port, lane, num_bits):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - num_bits

        """
        pass

    def sd_tx_patsel_set(self, dev_id, dev_port, lane, tx_patsel):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - tx_patsel

        """
        pass

    def sd_tx_patsel_get(self, dev_id, dev_port, lane):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane

        """
        pass

    def sd_rx_patsel_set(self, dev_id, dev_port, lane, rx_patsel):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - rx_patsel

        """
        pass

    def sd_rx_patsel_get(self, dev_id, dev_port, lane):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane

        """
        pass

    def sd_rx_err_cnt_get(self, dev_id, dev_port, lane):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane

        """
        pass

    def sd_tx_fixed_pat_set(self, dev_id, dev_port, lane, tx_fixed_pat_0, tx_fixed_pat_1, tx_fixed_pat_2, tx_fixed_pat_3):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - tx_fixed_pat_0
         - tx_fixed_pat_1
         - tx_fixed_pat_2
         - tx_fixed_pat_3

        """
        pass

    def sd_tx_fixed_pat_get(self, dev_id, dev_port, lane):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane

        """
        pass

    def sd_rx_data_cap_get(self, dev_id, dev_port, lane):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane

        """
        pass

    def sd_get_tx_eq(self, dev_id, dev_port, lane):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane

        """
        pass

    def sd_set_tx_eq(self, dev_id, dev_port, lane, pre, atten, post):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - pre
         - atten
         - post

        """
        pass

    def sd_get_pll_state(self, dev_id, dev_port, lane, expected_divider):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - expected_divider

        """
        pass

    def sd_get_tx_output_en(self, dev_id, dev_port, lane):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane

        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def sd_mgmt_clksel_set(self, dev_id, dev_port, lane, clk_src):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - clk_src

        """
        self.send_sd_mgmt_clksel_set(dev_id, dev_port, lane, clk_src)
        return self.recv_sd_mgmt_clksel_set()

    def send_sd_mgmt_clksel_set(self, dev_id, dev_port, lane, clk_src):
        self._oprot.writeMessageBegin('sd_mgmt_clksel_set', TMessageType.CALL, self._seqid)
        args = sd_mgmt_clksel_set_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.clk_src = clk_src
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_mgmt_clksel_set(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_mgmt_clksel_set_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_mgmt_clksel_set failed: unknown result")

    def sd_mgmt_clksel_get(self, dev_id, dev_port, lane):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane

        """
        self.send_sd_mgmt_clksel_get(dev_id, dev_port, lane)
        return self.recv_sd_mgmt_clksel_get()

    def send_sd_mgmt_clksel_get(self, dev_id, dev_port, lane):
        self._oprot.writeMessageBegin('sd_mgmt_clksel_get', TMessageType.CALL, self._seqid)
        args = sd_mgmt_clksel_get_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_mgmt_clksel_get(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_mgmt_clksel_get_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_mgmt_clksel_get failed: unknown result")

    def sd_mgmt_access_method_set(self, dev_id, method):
        """
        Parameters:
         - dev_id
         - method

        """
        self.send_sd_mgmt_access_method_set(dev_id, method)
        return self.recv_sd_mgmt_access_method_set()

    def send_sd_mgmt_access_method_set(self, dev_id, method):
        self._oprot.writeMessageBegin('sd_mgmt_access_method_set', TMessageType.CALL, self._seqid)
        args = sd_mgmt_access_method_set_args()
        args.dev_id = dev_id
        args.method = method
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_mgmt_access_method_set(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_mgmt_access_method_set_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_mgmt_access_method_set failed: unknown result")

    def sd_mgmt_access_method_get(self, dev_id):
        """
        Parameters:
         - dev_id

        """
        self.send_sd_mgmt_access_method_get(dev_id)
        return self.recv_sd_mgmt_access_method_get()

    def send_sd_mgmt_access_method_get(self, dev_id):
        self._oprot.writeMessageBegin('sd_mgmt_access_method_get', TMessageType.CALL, self._seqid)
        args = sd_mgmt_access_method_get_args()
        args.dev_id = dev_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_mgmt_access_method_get(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_mgmt_access_method_get_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_mgmt_access_method_get failed: unknown result")

    def sd_mgmt_bcast_set(self, dev_id, dev_port, lane, tx_dir, en):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - tx_dir
         - en

        """
        self.send_sd_mgmt_bcast_set(dev_id, dev_port, lane, tx_dir, en)
        return self.recv_sd_mgmt_bcast_set()

    def send_sd_mgmt_bcast_set(self, dev_id, dev_port, lane, tx_dir, en):
        self._oprot.writeMessageBegin('sd_mgmt_bcast_set', TMessageType.CALL, self._seqid)
        args = sd_mgmt_bcast_set_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.tx_dir = tx_dir
        args.en = en
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_mgmt_bcast_set(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_mgmt_bcast_set_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_mgmt_bcast_set failed: unknown result")

    def sd_mgmt_bcast_get(self, dev_id, dev_port, lane, tx_dir):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - tx_dir

        """
        self.send_sd_mgmt_bcast_get(dev_id, dev_port, lane, tx_dir)
        return self.recv_sd_mgmt_bcast_get()

    def send_sd_mgmt_bcast_get(self, dev_id, dev_port, lane, tx_dir):
        self._oprot.writeMessageBegin('sd_mgmt_bcast_get', TMessageType.CALL, self._seqid)
        args = sd_mgmt_bcast_get_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.tx_dir = tx_dir
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_mgmt_bcast_get(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_mgmt_bcast_get_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_mgmt_bcast_get failed: unknown result")

    def sd_mgmt_reg_set(self, dev_id, dev_port, lane, tx_dir, reg, data):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - tx_dir
         - reg
         - data

        """
        self.send_sd_mgmt_reg_set(dev_id, dev_port, lane, tx_dir, reg, data)
        return self.recv_sd_mgmt_reg_set()

    def send_sd_mgmt_reg_set(self, dev_id, dev_port, lane, tx_dir, reg, data):
        self._oprot.writeMessageBegin('sd_mgmt_reg_set', TMessageType.CALL, self._seqid)
        args = sd_mgmt_reg_set_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.tx_dir = tx_dir
        args.reg = reg
        args.data = data
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_mgmt_reg_set(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_mgmt_reg_set_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_mgmt_reg_set failed: unknown result")

    def sd_mgmt_reg_get(self, dev_id, dev_port, lane, tx_dir, reg):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - tx_dir
         - reg

        """
        self.send_sd_mgmt_reg_get(dev_id, dev_port, lane, tx_dir, reg)
        return self.recv_sd_mgmt_reg_get()

    def send_sd_mgmt_reg_get(self, dev_id, dev_port, lane, tx_dir, reg):
        self._oprot.writeMessageBegin('sd_mgmt_reg_get', TMessageType.CALL, self._seqid)
        args = sd_mgmt_reg_get_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.tx_dir = tx_dir
        args.reg = reg
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_mgmt_reg_get(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_mgmt_reg_get_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_mgmt_reg_get failed: unknown result")

    def sd_mgmt_uc_int(self, dev_id, dev_port, lane, tx_dir, interrupt, int_data):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - tx_dir
         - interrupt
         - int_data

        """
        self.send_sd_mgmt_uc_int(dev_id, dev_port, lane, tx_dir, interrupt, int_data)
        return self.recv_sd_mgmt_uc_int()

    def send_sd_mgmt_uc_int(self, dev_id, dev_port, lane, tx_dir, interrupt, int_data):
        self._oprot.writeMessageBegin('sd_mgmt_uc_int', TMessageType.CALL, self._seqid)
        args = sd_mgmt_uc_int_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.tx_dir = tx_dir
        args.interrupt = interrupt
        args.int_data = int_data
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_mgmt_uc_int(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_mgmt_uc_int_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_mgmt_uc_int failed: unknown result")

    def sd_port_lane_map_set(self, dev_id, dev_port, tx_l0, tx_l1, tx_l2, tx_l3, rx_l0, rx_l1, rx_l2, rx_l3):
        """
        Parameters:
         - dev_id
         - dev_port
         - tx_l0
         - tx_l1
         - tx_l2
         - tx_l3
         - rx_l0
         - rx_l1
         - rx_l2
         - rx_l3

        """
        self.send_sd_port_lane_map_set(dev_id, dev_port, tx_l0, tx_l1, tx_l2, tx_l3, rx_l0, rx_l1, rx_l2, rx_l3)
        return self.recv_sd_port_lane_map_set()

    def send_sd_port_lane_map_set(self, dev_id, dev_port, tx_l0, tx_l1, tx_l2, tx_l3, rx_l0, rx_l1, rx_l2, rx_l3):
        self._oprot.writeMessageBegin('sd_port_lane_map_set', TMessageType.CALL, self._seqid)
        args = sd_port_lane_map_set_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.tx_l0 = tx_l0
        args.tx_l1 = tx_l1
        args.tx_l2 = tx_l2
        args.tx_l3 = tx_l3
        args.rx_l0 = rx_l0
        args.rx_l1 = rx_l1
        args.rx_l2 = rx_l2
        args.rx_l3 = rx_l3
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_port_lane_map_set(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_port_lane_map_set_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_port_lane_map_set failed: unknown result")

    def sd_port_lane_map_get(self, dev_id, dev_port):
        """
        Parameters:
         - dev_id
         - dev_port

        """
        self.send_sd_port_lane_map_get(dev_id, dev_port)
        return self.recv_sd_port_lane_map_get()

    def send_sd_port_lane_map_get(self, dev_id, dev_port):
        self._oprot.writeMessageBegin('sd_port_lane_map_get', TMessageType.CALL, self._seqid)
        args = sd_port_lane_map_get_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_port_lane_map_get(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_port_lane_map_get_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_port_lane_map_get failed: unknown result")

    def sd_dev_rx_eq_cal_rr_set(self, dev_id, fine_tune_lane_cnt):
        """
        Parameters:
         - dev_id
         - fine_tune_lane_cnt

        """
        self.send_sd_dev_rx_eq_cal_rr_set(dev_id, fine_tune_lane_cnt)
        return self.recv_sd_dev_rx_eq_cal_rr_set()

    def send_sd_dev_rx_eq_cal_rr_set(self, dev_id, fine_tune_lane_cnt):
        self._oprot.writeMessageBegin('sd_dev_rx_eq_cal_rr_set', TMessageType.CALL, self._seqid)
        args = sd_dev_rx_eq_cal_rr_set_args()
        args.dev_id = dev_id
        args.fine_tune_lane_cnt = fine_tune_lane_cnt
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_dev_rx_eq_cal_rr_set(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_dev_rx_eq_cal_rr_set_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_dev_rx_eq_cal_rr_set failed: unknown result")

    def sd_dev_rx_eq_cal_rr_get(self, dev_id):
        """
        Parameters:
         - dev_id

        """
        self.send_sd_dev_rx_eq_cal_rr_get(dev_id)
        return self.recv_sd_dev_rx_eq_cal_rr_get()

    def send_sd_dev_rx_eq_cal_rr_get(self, dev_id):
        self._oprot.writeMessageBegin('sd_dev_rx_eq_cal_rr_get', TMessageType.CALL, self._seqid)
        args = sd_dev_rx_eq_cal_rr_get_args()
        args.dev_id = dev_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_dev_rx_eq_cal_rr_get(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_dev_rx_eq_cal_rr_get_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_dev_rx_eq_cal_rr_get failed: unknown result")

    def sd_tx_pll_clksel_set(self, dev_id, dev_port, lane, clk_source):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - clk_source

        """
        self.send_sd_tx_pll_clksel_set(dev_id, dev_port, lane, clk_source)
        return self.recv_sd_tx_pll_clksel_set()

    def send_sd_tx_pll_clksel_set(self, dev_id, dev_port, lane, clk_source):
        self._oprot.writeMessageBegin('sd_tx_pll_clksel_set', TMessageType.CALL, self._seqid)
        args = sd_tx_pll_clksel_set_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.clk_source = clk_source
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_tx_pll_clksel_set(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_tx_pll_clksel_set_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_tx_pll_clksel_set failed: unknown result")

    def sd_tx_pll_clksel_get(self, dev_id, dev_port, lane):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane

        """
        self.send_sd_tx_pll_clksel_get(dev_id, dev_port, lane)
        return self.recv_sd_tx_pll_clksel_get()

    def send_sd_tx_pll_clksel_get(self, dev_id, dev_port, lane):
        self._oprot.writeMessageBegin('sd_tx_pll_clksel_get', TMessageType.CALL, self._seqid)
        args = sd_tx_pll_clksel_get_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_tx_pll_clksel_get(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_tx_pll_clksel_get_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_tx_pll_clksel_get failed: unknown result")

    def sd_lane_init_run(self, dev_id, dev_port, lane, line_rate, init_rx, init_tx, tx_drv_en, phase_cal):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - line_rate
         - init_rx
         - init_tx
         - tx_drv_en
         - phase_cal

        """
        self.send_sd_lane_init_run(dev_id, dev_port, lane, line_rate, init_rx, init_tx, tx_drv_en, phase_cal)
        return self.recv_sd_lane_init_run()

    def send_sd_lane_init_run(self, dev_id, dev_port, lane, line_rate, init_rx, init_tx, tx_drv_en, phase_cal):
        self._oprot.writeMessageBegin('sd_lane_init_run', TMessageType.CALL, self._seqid)
        args = sd_lane_init_run_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.line_rate = line_rate
        args.init_rx = init_rx
        args.init_tx = init_tx
        args.tx_drv_en = tx_drv_en
        args.phase_cal = phase_cal
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_lane_init_run(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_lane_init_run_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_lane_init_run failed: unknown result")

    def sd_tx_pll_lock_get(self, dev_id, dev_port, lane):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane

        """
        self.send_sd_tx_pll_lock_get(dev_id, dev_port, lane)
        return self.recv_sd_tx_pll_lock_get()

    def send_sd_tx_pll_lock_get(self, dev_id, dev_port, lane):
        self._oprot.writeMessageBegin('sd_tx_pll_lock_get', TMessageType.CALL, self._seqid)
        args = sd_tx_pll_lock_get_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_tx_pll_lock_get(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_tx_pll_lock_get_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_tx_pll_lock_get failed: unknown result")

    def sd_rx_cdr_lock_get(self, dev_id, dev_port, lane):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane

        """
        self.send_sd_rx_cdr_lock_get(dev_id, dev_port, lane)
        return self.recv_sd_rx_cdr_lock_get()

    def send_sd_rx_cdr_lock_get(self, dev_id, dev_port, lane):
        self._oprot.writeMessageBegin('sd_rx_cdr_lock_get', TMessageType.CALL, self._seqid)
        args = sd_rx_cdr_lock_get_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_rx_cdr_lock_get(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_rx_cdr_lock_get_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_rx_cdr_lock_get failed: unknown result")

    def sd_tx_pll_status_get(self, dev_id, dev_port, lane):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane

        """
        self.send_sd_tx_pll_status_get(dev_id, dev_port, lane)
        return self.recv_sd_tx_pll_status_get()

    def send_sd_tx_pll_status_get(self, dev_id, dev_port, lane):
        self._oprot.writeMessageBegin('sd_tx_pll_status_get', TMessageType.CALL, self._seqid)
        args = sd_tx_pll_status_get_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_tx_pll_status_get(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_tx_pll_status_get_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_tx_pll_status_get failed: unknown result")

    def sd_rx_cdr_status_get(self, dev_id, dev_port, lane):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane

        """
        self.send_sd_rx_cdr_status_get(dev_id, dev_port, lane)
        return self.recv_sd_rx_cdr_status_get()

    def send_sd_rx_cdr_status_get(self, dev_id, dev_port, lane):
        self._oprot.writeMessageBegin('sd_rx_cdr_status_get', TMessageType.CALL, self._seqid)
        args = sd_rx_cdr_status_get_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_rx_cdr_status_get(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_rx_cdr_status_get_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_rx_cdr_status_get failed: unknown result")

    def sd_lane_loopback_set(self, dev_id, dev_port, lane, loopback_mode):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - loopback_mode

        """
        self.send_sd_lane_loopback_set(dev_id, dev_port, lane, loopback_mode)
        return self.recv_sd_lane_loopback_set()

    def send_sd_lane_loopback_set(self, dev_id, dev_port, lane, loopback_mode):
        self._oprot.writeMessageBegin('sd_lane_loopback_set', TMessageType.CALL, self._seqid)
        args = sd_lane_loopback_set_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.loopback_mode = loopback_mode
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_lane_loopback_set(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_lane_loopback_set_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_lane_loopback_set failed: unknown result")

    def sd_lane_loopback_get(self, dev_id, dev_port, lane):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane

        """
        self.send_sd_lane_loopback_get(dev_id, dev_port, lane)
        return self.recv_sd_lane_loopback_get()

    def send_sd_lane_loopback_get(self, dev_id, dev_port, lane):
        self._oprot.writeMessageBegin('sd_lane_loopback_get', TMessageType.CALL, self._seqid)
        args = sd_lane_loopback_get_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_lane_loopback_get(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_lane_loopback_get_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_lane_loopback_get failed: unknown result")

    def sd_tx_en_set(self, dev_id, dev_port, lane, tx_en):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - tx_en

        """
        self.send_sd_tx_en_set(dev_id, dev_port, lane, tx_en)
        return self.recv_sd_tx_en_set()

    def send_sd_tx_en_set(self, dev_id, dev_port, lane, tx_en):
        self._oprot.writeMessageBegin('sd_tx_en_set', TMessageType.CALL, self._seqid)
        args = sd_tx_en_set_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.tx_en = tx_en
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_tx_en_set(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_tx_en_set_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_tx_en_set failed: unknown result")

    def sd_tx_en_get(self, dev_id, dev_port, lane):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane

        """
        self.send_sd_tx_en_get(dev_id, dev_port, lane)
        return self.recv_sd_tx_en_get()

    def send_sd_tx_en_get(self, dev_id, dev_port, lane):
        self._oprot.writeMessageBegin('sd_tx_en_get', TMessageType.CALL, self._seqid)
        args = sd_tx_en_get_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_tx_en_get(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_tx_en_get_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_tx_en_get failed: unknown result")

    def sd_tx_drv_en_set(self, dev_id, dev_port, lane, tx_en):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - tx_en

        """
        self.send_sd_tx_drv_en_set(dev_id, dev_port, lane, tx_en)
        return self.recv_sd_tx_drv_en_set()

    def send_sd_tx_drv_en_set(self, dev_id, dev_port, lane, tx_en):
        self._oprot.writeMessageBegin('sd_tx_drv_en_set', TMessageType.CALL, self._seqid)
        args = sd_tx_drv_en_set_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.tx_en = tx_en
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_tx_drv_en_set(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_tx_drv_en_set_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_tx_drv_en_set failed: unknown result")

    def sd_tx_drv_en_get(self, dev_id, dev_port, lane):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane

        """
        self.send_sd_tx_drv_en_get(dev_id, dev_port, lane)
        return self.recv_sd_tx_drv_en_get()

    def send_sd_tx_drv_en_get(self, dev_id, dev_port, lane):
        self._oprot.writeMessageBegin('sd_tx_drv_en_get', TMessageType.CALL, self._seqid)
        args = sd_tx_drv_en_get_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_tx_drv_en_get(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_tx_drv_en_get_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_tx_drv_en_get failed: unknown result")

    def sd_tx_drv_inv_set(self, dev_id, dev_port, lane, inv):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - inv

        """
        self.send_sd_tx_drv_inv_set(dev_id, dev_port, lane, inv)
        return self.recv_sd_tx_drv_inv_set()

    def send_sd_tx_drv_inv_set(self, dev_id, dev_port, lane, inv):
        self._oprot.writeMessageBegin('sd_tx_drv_inv_set', TMessageType.CALL, self._seqid)
        args = sd_tx_drv_inv_set_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.inv = inv
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_tx_drv_inv_set(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_tx_drv_inv_set_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_tx_drv_inv_set failed: unknown result")

    def sd_tx_drv_inv_get(self, dev_id, dev_port, lane):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane

        """
        self.send_sd_tx_drv_inv_get(dev_id, dev_port, lane)
        return self.recv_sd_tx_drv_inv_get()

    def send_sd_tx_drv_inv_get(self, dev_id, dev_port, lane):
        self._oprot.writeMessageBegin('sd_tx_drv_inv_get', TMessageType.CALL, self._seqid)
        args = sd_tx_drv_inv_get_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_tx_drv_inv_get(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_tx_drv_inv_get_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_tx_drv_inv_get failed: unknown result")

    def sd_tx_drv_attn_is_valid(self, attn_main, attn_post, attn_pre):
        """
        Parameters:
         - attn_main
         - attn_post
         - attn_pre

        """
        self.send_sd_tx_drv_attn_is_valid(attn_main, attn_post, attn_pre)
        return self.recv_sd_tx_drv_attn_is_valid()

    def send_sd_tx_drv_attn_is_valid(self, attn_main, attn_post, attn_pre):
        self._oprot.writeMessageBegin('sd_tx_drv_attn_is_valid', TMessageType.CALL, self._seqid)
        args = sd_tx_drv_attn_is_valid_args()
        args.attn_main = attn_main
        args.attn_post = attn_post
        args.attn_pre = attn_pre
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_tx_drv_attn_is_valid(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_tx_drv_attn_is_valid_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_tx_drv_attn_is_valid failed: unknown result")

    def sd_tx_drv_attn_set(self, dev_id, dev_port, lane, attn_main, attn_post, attn_pre):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - attn_main
         - attn_post
         - attn_pre

        """
        self.send_sd_tx_drv_attn_set(dev_id, dev_port, lane, attn_main, attn_post, attn_pre)
        return self.recv_sd_tx_drv_attn_set()

    def send_sd_tx_drv_attn_set(self, dev_id, dev_port, lane, attn_main, attn_post, attn_pre):
        self._oprot.writeMessageBegin('sd_tx_drv_attn_set', TMessageType.CALL, self._seqid)
        args = sd_tx_drv_attn_set_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.attn_main = attn_main
        args.attn_post = attn_post
        args.attn_pre = attn_pre
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_tx_drv_attn_set(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_tx_drv_attn_set_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_tx_drv_attn_set failed: unknown result")

    def sd_tx_drv_attn_get(self, dev_id, dev_port, lane):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane

        """
        self.send_sd_tx_drv_attn_get(dev_id, dev_port, lane)
        return self.recv_sd_tx_drv_attn_get()

    def send_sd_tx_drv_attn_get(self, dev_id, dev_port, lane):
        self._oprot.writeMessageBegin('sd_tx_drv_attn_get', TMessageType.CALL, self._seqid)
        args = sd_tx_drv_attn_get_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_tx_drv_attn_get(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_tx_drv_attn_get_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_tx_drv_attn_get failed: unknown result")

    def sd_tx_drv_amp_set(self, dev_id, dev_port, lane, amp_main, amp_post, amp_pre):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - amp_main
         - amp_post
         - amp_pre

        """
        self.send_sd_tx_drv_amp_set(dev_id, dev_port, lane, amp_main, amp_post, amp_pre)
        return self.recv_sd_tx_drv_amp_set()

    def send_sd_tx_drv_amp_set(self, dev_id, dev_port, lane, amp_main, amp_post, amp_pre):
        self._oprot.writeMessageBegin('sd_tx_drv_amp_set', TMessageType.CALL, self._seqid)
        args = sd_tx_drv_amp_set_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.amp_main = amp_main
        args.amp_post = amp_post
        args.amp_pre = amp_pre
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_tx_drv_amp_set(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_tx_drv_amp_set_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_tx_drv_amp_set failed: unknown result")

    def sd_tx_drv_amp_get(self, dev_id, dev_port, lane):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane

        """
        self.send_sd_tx_drv_amp_get(dev_id, dev_port, lane)
        return self.recv_sd_tx_drv_amp_get()

    def send_sd_tx_drv_amp_get(self, dev_id, dev_port, lane):
        self._oprot.writeMessageBegin('sd_tx_drv_amp_get', TMessageType.CALL, self._seqid)
        args = sd_tx_drv_amp_get_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_tx_drv_amp_get(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_tx_drv_amp_get_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_tx_drv_amp_get failed: unknown result")

    def sd_tx_drv_status_get(self, dev_id, dev_port, lane):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane

        """
        self.send_sd_tx_drv_status_get(dev_id, dev_port, lane)
        return self.recv_sd_tx_drv_status_get()

    def send_sd_tx_drv_status_get(self, dev_id, dev_port, lane):
        self._oprot.writeMessageBegin('sd_tx_drv_status_get', TMessageType.CALL, self._seqid)
        args = sd_tx_drv_status_get_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_tx_drv_status_get(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_tx_drv_status_get_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_tx_drv_status_get failed: unknown result")

    def sd_rx_en_set(self, dev_id, dev_port, lane, rx_en):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - rx_en

        """
        self.send_sd_rx_en_set(dev_id, dev_port, lane, rx_en)
        return self.recv_sd_rx_en_set()

    def send_sd_rx_en_set(self, dev_id, dev_port, lane, rx_en):
        self._oprot.writeMessageBegin('sd_rx_en_set', TMessageType.CALL, self._seqid)
        args = sd_rx_en_set_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.rx_en = rx_en
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_rx_en_set(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_rx_en_set_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_rx_en_set failed: unknown result")

    def sd_rx_en_get(self, dev_id, dev_port, lane):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane

        """
        self.send_sd_rx_en_get(dev_id, dev_port, lane)
        return self.recv_sd_rx_en_get()

    def send_sd_rx_en_get(self, dev_id, dev_port, lane):
        self._oprot.writeMessageBegin('sd_rx_en_get', TMessageType.CALL, self._seqid)
        args = sd_rx_en_get_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_rx_en_get(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_rx_en_get_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_rx_en_get failed: unknown result")

    def sd_rx_afe_inv_set(self, dev_id, dev_port, lane, inv_en):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - inv_en

        """
        self.send_sd_rx_afe_inv_set(dev_id, dev_port, lane, inv_en)
        return self.recv_sd_rx_afe_inv_set()

    def send_sd_rx_afe_inv_set(self, dev_id, dev_port, lane, inv_en):
        self._oprot.writeMessageBegin('sd_rx_afe_inv_set', TMessageType.CALL, self._seqid)
        args = sd_rx_afe_inv_set_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.inv_en = inv_en
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_rx_afe_inv_set(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_rx_afe_inv_set_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_rx_afe_inv_set failed: unknown result")

    def sd_rx_afe_inv_get(self, dev_id, dev_port, lane):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane

        """
        self.send_sd_rx_afe_inv_get(dev_id, dev_port, lane)
        return self.recv_sd_rx_afe_inv_get()

    def send_sd_rx_afe_inv_get(self, dev_id, dev_port, lane):
        self._oprot.writeMessageBegin('sd_rx_afe_inv_get', TMessageType.CALL, self._seqid)
        args = sd_rx_afe_inv_get_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_rx_afe_inv_get(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_rx_afe_inv_get_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_rx_afe_inv_get failed: unknown result")

    def sd_rx_afe_term_set(self, dev_id, dev_port, lane, rx_term):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - rx_term

        """
        self.send_sd_rx_afe_term_set(dev_id, dev_port, lane, rx_term)
        return self.recv_sd_rx_afe_term_set()

    def send_sd_rx_afe_term_set(self, dev_id, dev_port, lane, rx_term):
        self._oprot.writeMessageBegin('sd_rx_afe_term_set', TMessageType.CALL, self._seqid)
        args = sd_rx_afe_term_set_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.rx_term = rx_term
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_rx_afe_term_set(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_rx_afe_term_set_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_rx_afe_term_set failed: unknown result")

    def sd_rx_afe_term_get(self, dev_id, dev_port, lane):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane

        """
        self.send_sd_rx_afe_term_get(dev_id, dev_port, lane)
        return self.recv_sd_rx_afe_term_get()

    def send_sd_rx_afe_term_get(self, dev_id, dev_port, lane):
        self._oprot.writeMessageBegin('sd_rx_afe_term_get', TMessageType.CALL, self._seqid)
        args = sd_rx_afe_term_get_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_rx_afe_term_get(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_rx_afe_term_get_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_rx_afe_term_get failed: unknown result")

    def sd_rx_afe_los_thres_set(self, dev_id, dev_port, lane, rx_los_en, rx_los_thres):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - rx_los_en
         - rx_los_thres

        """
        self.send_sd_rx_afe_los_thres_set(dev_id, dev_port, lane, rx_los_en, rx_los_thres)
        return self.recv_sd_rx_afe_los_thres_set()

    def send_sd_rx_afe_los_thres_set(self, dev_id, dev_port, lane, rx_los_en, rx_los_thres):
        self._oprot.writeMessageBegin('sd_rx_afe_los_thres_set', TMessageType.CALL, self._seqid)
        args = sd_rx_afe_los_thres_set_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.rx_los_en = rx_los_en
        args.rx_los_thres = rx_los_thres
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_rx_afe_los_thres_set(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_rx_afe_los_thres_set_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_rx_afe_los_thres_set failed: unknown result")

    def sd_rx_afe_los_thres_get(self, dev_id, dev_port, lane):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane

        """
        self.send_sd_rx_afe_los_thres_get(dev_id, dev_port, lane)
        return self.recv_sd_rx_afe_los_thres_get()

    def send_sd_rx_afe_los_thres_get(self, dev_id, dev_port, lane):
        self._oprot.writeMessageBegin('sd_rx_afe_los_thres_get', TMessageType.CALL, self._seqid)
        args = sd_rx_afe_los_thres_get_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_rx_afe_los_thres_get(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_rx_afe_los_thres_get_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_rx_afe_los_thres_get failed: unknown result")

    def sd_rx_afe_los_get(self, dev_id, dev_port, lane):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane

        """
        self.send_sd_rx_afe_los_get(dev_id, dev_port, lane)
        return self.recv_sd_rx_afe_los_get()

    def send_sd_rx_afe_los_get(self, dev_id, dev_port, lane):
        self._oprot.writeMessageBegin('sd_rx_afe_los_get', TMessageType.CALL, self._seqid)
        args = sd_rx_afe_los_get_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_rx_afe_los_get(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_rx_afe_los_get_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_rx_afe_los_get failed: unknown result")

    def sd_rx_eq_cal_busy_get(self, dev_id, dev_port, lane, chk_cnt, chk_wait):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - chk_cnt
         - chk_wait

        """
        self.send_sd_rx_eq_cal_busy_get(dev_id, dev_port, lane, chk_cnt, chk_wait)
        return self.recv_sd_rx_eq_cal_busy_get()

    def send_sd_rx_eq_cal_busy_get(self, dev_id, dev_port, lane, chk_cnt, chk_wait):
        self._oprot.writeMessageBegin('sd_rx_eq_cal_busy_get', TMessageType.CALL, self._seqid)
        args = sd_rx_eq_cal_busy_get_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.chk_cnt = chk_cnt
        args.chk_wait = chk_wait
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_rx_eq_cal_busy_get(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_rx_eq_cal_busy_get_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_rx_eq_cal_busy_get failed: unknown result")

    def sd_rx_eq_ctle_set(self, dev_id, dev_port, lane, ctle_dc, ctle_lf, ctle_hf, ctle_bw):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - ctle_dc
         - ctle_lf
         - ctle_hf
         - ctle_bw

        """
        self.send_sd_rx_eq_ctle_set(dev_id, dev_port, lane, ctle_dc, ctle_lf, ctle_hf, ctle_bw)
        return self.recv_sd_rx_eq_ctle_set()

    def send_sd_rx_eq_ctle_set(self, dev_id, dev_port, lane, ctle_dc, ctle_lf, ctle_hf, ctle_bw):
        self._oprot.writeMessageBegin('sd_rx_eq_ctle_set', TMessageType.CALL, self._seqid)
        args = sd_rx_eq_ctle_set_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.ctle_dc = ctle_dc
        args.ctle_lf = ctle_lf
        args.ctle_hf = ctle_hf
        args.ctle_bw = ctle_bw
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_rx_eq_ctle_set(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_rx_eq_ctle_set_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_rx_eq_ctle_set failed: unknown result")

    def sd_rx_eq_ctle_get(self, dev_id, dev_port, lane):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane

        """
        self.send_sd_rx_eq_ctle_get(dev_id, dev_port, lane)
        return self.recv_sd_rx_eq_ctle_get()

    def send_sd_rx_eq_ctle_get(self, dev_id, dev_port, lane):
        self._oprot.writeMessageBegin('sd_rx_eq_ctle_get', TMessageType.CALL, self._seqid)
        args = sd_rx_eq_ctle_get_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_rx_eq_ctle_get(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_rx_eq_ctle_get_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_rx_eq_ctle_get failed: unknown result")

    def sd_rx_eq_dfe_adv_set(self, dev_id, dev_port, lane, dfe_tap_num, dfe_tap_val):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - dfe_tap_num
         - dfe_tap_val

        """
        self.send_sd_rx_eq_dfe_adv_set(dev_id, dev_port, lane, dfe_tap_num, dfe_tap_val)
        return self.recv_sd_rx_eq_dfe_adv_set()

    def send_sd_rx_eq_dfe_adv_set(self, dev_id, dev_port, lane, dfe_tap_num, dfe_tap_val):
        self._oprot.writeMessageBegin('sd_rx_eq_dfe_adv_set', TMessageType.CALL, self._seqid)
        args = sd_rx_eq_dfe_adv_set_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.dfe_tap_num = dfe_tap_num
        args.dfe_tap_val = dfe_tap_val
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_rx_eq_dfe_adv_set(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_rx_eq_dfe_adv_set_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_rx_eq_dfe_adv_set failed: unknown result")

    def sd_rx_eq_dfe_adv_get(self, dev_id, dev_port, lane, dfe_tap_num):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - dfe_tap_num

        """
        self.send_sd_rx_eq_dfe_adv_get(dev_id, dev_port, lane, dfe_tap_num)
        return self.recv_sd_rx_eq_dfe_adv_get()

    def send_sd_rx_eq_dfe_adv_get(self, dev_id, dev_port, lane, dfe_tap_num):
        self._oprot.writeMessageBegin('sd_rx_eq_dfe_adv_get', TMessageType.CALL, self._seqid)
        args = sd_rx_eq_dfe_adv_get_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.dfe_tap_num = dfe_tap_num
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_rx_eq_dfe_adv_get(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_rx_eq_dfe_adv_get_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_rx_eq_dfe_adv_get failed: unknown result")

    def sd_rx_eq_dfe_set(self, dev_id, dev_port, lane, dfe_gain, dfe_tap1, dfe_tap2, dfe_tap3, dfe_tap4):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - dfe_gain
         - dfe_tap1
         - dfe_tap2
         - dfe_tap3
         - dfe_tap4

        """
        self.send_sd_rx_eq_dfe_set(dev_id, dev_port, lane, dfe_gain, dfe_tap1, dfe_tap2, dfe_tap3, dfe_tap4)
        return self.recv_sd_rx_eq_dfe_set()

    def send_sd_rx_eq_dfe_set(self, dev_id, dev_port, lane, dfe_gain, dfe_tap1, dfe_tap2, dfe_tap3, dfe_tap4):
        self._oprot.writeMessageBegin('sd_rx_eq_dfe_set', TMessageType.CALL, self._seqid)
        args = sd_rx_eq_dfe_set_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.dfe_gain = dfe_gain
        args.dfe_tap1 = dfe_tap1
        args.dfe_tap2 = dfe_tap2
        args.dfe_tap3 = dfe_tap3
        args.dfe_tap4 = dfe_tap4
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_rx_eq_dfe_set(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_rx_eq_dfe_set_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_rx_eq_dfe_set failed: unknown result")

    def sd_rx_eq_dfe_get(self, dev_id, dev_port, lane):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane

        """
        self.send_sd_rx_eq_dfe_get(dev_id, dev_port, lane)
        return self.recv_sd_rx_eq_dfe_get()

    def send_sd_rx_eq_dfe_get(self, dev_id, dev_port, lane):
        self._oprot.writeMessageBegin('sd_rx_eq_dfe_get', TMessageType.CALL, self._seqid)
        args = sd_rx_eq_dfe_get_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_rx_eq_dfe_get(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_rx_eq_dfe_get_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_rx_eq_dfe_get failed: unknown result")

    def sd_rx_eq_cal_param_set(self, dev_id, dev_port, lane, ctle_dc_hint, dfe_gain_range, pcal_loop_cnt):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - ctle_dc_hint
         - dfe_gain_range
         - pcal_loop_cnt

        """
        self.send_sd_rx_eq_cal_param_set(dev_id, dev_port, lane, ctle_dc_hint, dfe_gain_range, pcal_loop_cnt)
        return self.recv_sd_rx_eq_cal_param_set()

    def send_sd_rx_eq_cal_param_set(self, dev_id, dev_port, lane, ctle_dc_hint, dfe_gain_range, pcal_loop_cnt):
        self._oprot.writeMessageBegin('sd_rx_eq_cal_param_set', TMessageType.CALL, self._seqid)
        args = sd_rx_eq_cal_param_set_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.ctle_dc_hint = ctle_dc_hint
        args.dfe_gain_range = dfe_gain_range
        args.pcal_loop_cnt = pcal_loop_cnt
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_rx_eq_cal_param_set(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_rx_eq_cal_param_set_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_rx_eq_cal_param_set failed: unknown result")

    def sd_rx_eq_cal_param_get(self, dev_id, dev_port, lane):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane

        """
        self.send_sd_rx_eq_cal_param_get(dev_id, dev_port, lane)
        return self.recv_sd_rx_eq_cal_param_get()

    def send_sd_rx_eq_cal_param_get(self, dev_id, dev_port, lane):
        self._oprot.writeMessageBegin('sd_rx_eq_cal_param_get', TMessageType.CALL, self._seqid)
        args = sd_rx_eq_cal_param_get_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_rx_eq_cal_param_get(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_rx_eq_cal_param_get_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_rx_eq_cal_param_get failed: unknown result")

    def sd_rx_eq_cal_adv_run(self, dev_id, dev_port, lane, cal_cmd, ctle_cal_cfg, dfe_fixed):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - cal_cmd
         - ctle_cal_cfg
         - dfe_fixed

        """
        self.send_sd_rx_eq_cal_adv_run(dev_id, dev_port, lane, cal_cmd, ctle_cal_cfg, dfe_fixed)
        return self.recv_sd_rx_eq_cal_adv_run()

    def send_sd_rx_eq_cal_adv_run(self, dev_id, dev_port, lane, cal_cmd, ctle_cal_cfg, dfe_fixed):
        self._oprot.writeMessageBegin('sd_rx_eq_cal_adv_run', TMessageType.CALL, self._seqid)
        args = sd_rx_eq_cal_adv_run_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.cal_cmd = cal_cmd
        args.ctle_cal_cfg = ctle_cal_cfg
        args.dfe_fixed = dfe_fixed
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_rx_eq_cal_adv_run(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_rx_eq_cal_adv_run_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_rx_eq_cal_adv_run failed: unknown result")

    def sd_rx_eq_cal_eye_get(self, dev_id, dev_port, lane):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane

        """
        self.send_sd_rx_eq_cal_eye_get(dev_id, dev_port, lane)
        return self.recv_sd_rx_eq_cal_eye_get()

    def send_sd_rx_eq_cal_eye_get(self, dev_id, dev_port, lane):
        self._oprot.writeMessageBegin('sd_rx_eq_cal_eye_get', TMessageType.CALL, self._seqid)
        args = sd_rx_eq_cal_eye_get_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_rx_eq_cal_eye_get(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_rx_eq_cal_eye_get_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_rx_eq_cal_eye_get failed: unknown result")

    def sd_rx_eq_ical_run(self, dev_id, dev_port, lane):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane

        """
        self.send_sd_rx_eq_ical_run(dev_id, dev_port, lane)
        return self.recv_sd_rx_eq_ical_run()

    def send_sd_rx_eq_ical_run(self, dev_id, dev_port, lane):
        self._oprot.writeMessageBegin('sd_rx_eq_ical_run', TMessageType.CALL, self._seqid)
        args = sd_rx_eq_ical_run_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_rx_eq_ical_run(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_rx_eq_ical_run_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_rx_eq_ical_run failed: unknown result")

    def sd_rx_eq_ical_eye_get(self, dev_id, dev_port, lane, cal_good_thres):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - cal_good_thres

        """
        self.send_sd_rx_eq_ical_eye_get(dev_id, dev_port, lane, cal_good_thres)
        return self.recv_sd_rx_eq_ical_eye_get()

    def send_sd_rx_eq_ical_eye_get(self, dev_id, dev_port, lane, cal_good_thres):
        self._oprot.writeMessageBegin('sd_rx_eq_ical_eye_get', TMessageType.CALL, self._seqid)
        args = sd_rx_eq_ical_eye_get_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.cal_good_thres = cal_good_thres
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_rx_eq_ical_eye_get(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_rx_eq_ical_eye_get_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_rx_eq_ical_eye_get failed: unknown result")

    def sd_rx_eq_pcal_run(self, dev_id, dev_port, lane, cal_cont):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - cal_cont

        """
        self.send_sd_rx_eq_pcal_run(dev_id, dev_port, lane, cal_cont)
        return self.recv_sd_rx_eq_pcal_run()

    def send_sd_rx_eq_pcal_run(self, dev_id, dev_port, lane, cal_cont):
        self._oprot.writeMessageBegin('sd_rx_eq_pcal_run', TMessageType.CALL, self._seqid)
        args = sd_rx_eq_pcal_run_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.cal_cont = cal_cont
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_rx_eq_pcal_run(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_rx_eq_pcal_run_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_rx_eq_pcal_run failed: unknown result")

    def sd_rx_eq_status_get(self, dev_id, dev_port, lane):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane

        """
        self.send_sd_rx_eq_status_get(dev_id, dev_port, lane)
        return self.recv_sd_rx_eq_status_get()

    def send_sd_rx_eq_status_get(self, dev_id, dev_port, lane):
        self._oprot.writeMessageBegin('sd_rx_eq_status_get', TMessageType.CALL, self._seqid)
        args = sd_rx_eq_status_get_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_rx_eq_status_get(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_rx_eq_status_get_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_rx_eq_status_get failed: unknown result")

    def sd_rx_eye_offset_set(self, dev_id, dev_port, lane, offset_en, pos_x, pos_y):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - offset_en
         - pos_x
         - pos_y

        """
        self.send_sd_rx_eye_offset_set(dev_id, dev_port, lane, offset_en, pos_x, pos_y)
        return self.recv_sd_rx_eye_offset_set()

    def send_sd_rx_eye_offset_set(self, dev_id, dev_port, lane, offset_en, pos_x, pos_y):
        self._oprot.writeMessageBegin('sd_rx_eye_offset_set', TMessageType.CALL, self._seqid)
        args = sd_rx_eye_offset_set_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.offset_en = offset_en
        args.pos_x = pos_x
        args.pos_y = pos_y
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_rx_eye_offset_set(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_rx_eye_offset_set_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_rx_eye_offset_set failed: unknown result")

    def sd_rx_eye_get(self, dev_id, dev_port, lane, meas_mode, meas_ber):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - meas_mode
         - meas_ber

        """
        self.send_sd_rx_eye_get(dev_id, dev_port, lane, meas_mode, meas_ber)
        return self.recv_sd_rx_eye_get()

    def send_sd_rx_eye_get(self, dev_id, dev_port, lane, meas_mode, meas_ber):
        self._oprot.writeMessageBegin('sd_rx_eye_get', TMessageType.CALL, self._seqid)
        args = sd_rx_eye_get_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.meas_mode = meas_mode
        args.meas_ber = meas_ber
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_rx_eye_get(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_rx_eye_get_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_rx_eye_get failed: unknown result")

    def sd_rx_eye_3d_get(self, dev_id, dev_port, lane, meas_ber):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - meas_ber

        """
        self.send_sd_rx_eye_3d_get(dev_id, dev_port, lane, meas_ber)
        return self.recv_sd_rx_eye_3d_get()

    def send_sd_rx_eye_3d_get(self, dev_id, dev_port, lane, meas_ber):
        self._oprot.writeMessageBegin('sd_rx_eye_3d_get', TMessageType.CALL, self._seqid)
        args = sd_rx_eye_3d_get_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.meas_ber = meas_ber
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_rx_eye_3d_get(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_rx_eye_3d_get_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_rx_eye_3d_get failed: unknown result")

    def sd_tx_err_inj_set(self, dev_id, dev_port, lane, num_bits):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - num_bits

        """
        self.send_sd_tx_err_inj_set(dev_id, dev_port, lane, num_bits)
        return self.recv_sd_tx_err_inj_set()

    def send_sd_tx_err_inj_set(self, dev_id, dev_port, lane, num_bits):
        self._oprot.writeMessageBegin('sd_tx_err_inj_set', TMessageType.CALL, self._seqid)
        args = sd_tx_err_inj_set_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.num_bits = num_bits
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_tx_err_inj_set(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_tx_err_inj_set_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_tx_err_inj_set failed: unknown result")

    def sd_rx_err_inj_set(self, dev_id, dev_port, lane, num_bits):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - num_bits

        """
        self.send_sd_rx_err_inj_set(dev_id, dev_port, lane, num_bits)
        return self.recv_sd_rx_err_inj_set()

    def send_sd_rx_err_inj_set(self, dev_id, dev_port, lane, num_bits):
        self._oprot.writeMessageBegin('sd_rx_err_inj_set', TMessageType.CALL, self._seqid)
        args = sd_rx_err_inj_set_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.num_bits = num_bits
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_rx_err_inj_set(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_rx_err_inj_set_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_rx_err_inj_set failed: unknown result")

    def sd_tx_patsel_set(self, dev_id, dev_port, lane, tx_patsel):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - tx_patsel

        """
        self.send_sd_tx_patsel_set(dev_id, dev_port, lane, tx_patsel)
        return self.recv_sd_tx_patsel_set()

    def send_sd_tx_patsel_set(self, dev_id, dev_port, lane, tx_patsel):
        self._oprot.writeMessageBegin('sd_tx_patsel_set', TMessageType.CALL, self._seqid)
        args = sd_tx_patsel_set_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.tx_patsel = tx_patsel
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_tx_patsel_set(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_tx_patsel_set_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_tx_patsel_set failed: unknown result")

    def sd_tx_patsel_get(self, dev_id, dev_port, lane):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane

        """
        self.send_sd_tx_patsel_get(dev_id, dev_port, lane)
        return self.recv_sd_tx_patsel_get()

    def send_sd_tx_patsel_get(self, dev_id, dev_port, lane):
        self._oprot.writeMessageBegin('sd_tx_patsel_get', TMessageType.CALL, self._seqid)
        args = sd_tx_patsel_get_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_tx_patsel_get(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_tx_patsel_get_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_tx_patsel_get failed: unknown result")

    def sd_rx_patsel_set(self, dev_id, dev_port, lane, rx_patsel):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - rx_patsel

        """
        self.send_sd_rx_patsel_set(dev_id, dev_port, lane, rx_patsel)
        return self.recv_sd_rx_patsel_set()

    def send_sd_rx_patsel_set(self, dev_id, dev_port, lane, rx_patsel):
        self._oprot.writeMessageBegin('sd_rx_patsel_set', TMessageType.CALL, self._seqid)
        args = sd_rx_patsel_set_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.rx_patsel = rx_patsel
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_rx_patsel_set(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_rx_patsel_set_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_rx_patsel_set failed: unknown result")

    def sd_rx_patsel_get(self, dev_id, dev_port, lane):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane

        """
        self.send_sd_rx_patsel_get(dev_id, dev_port, lane)
        return self.recv_sd_rx_patsel_get()

    def send_sd_rx_patsel_get(self, dev_id, dev_port, lane):
        self._oprot.writeMessageBegin('sd_rx_patsel_get', TMessageType.CALL, self._seqid)
        args = sd_rx_patsel_get_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_rx_patsel_get(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_rx_patsel_get_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_rx_patsel_get failed: unknown result")

    def sd_rx_err_cnt_get(self, dev_id, dev_port, lane):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane

        """
        self.send_sd_rx_err_cnt_get(dev_id, dev_port, lane)
        return self.recv_sd_rx_err_cnt_get()

    def send_sd_rx_err_cnt_get(self, dev_id, dev_port, lane):
        self._oprot.writeMessageBegin('sd_rx_err_cnt_get', TMessageType.CALL, self._seqid)
        args = sd_rx_err_cnt_get_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_rx_err_cnt_get(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_rx_err_cnt_get_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_rx_err_cnt_get failed: unknown result")

    def sd_tx_fixed_pat_set(self, dev_id, dev_port, lane, tx_fixed_pat_0, tx_fixed_pat_1, tx_fixed_pat_2, tx_fixed_pat_3):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - tx_fixed_pat_0
         - tx_fixed_pat_1
         - tx_fixed_pat_2
         - tx_fixed_pat_3

        """
        self.send_sd_tx_fixed_pat_set(dev_id, dev_port, lane, tx_fixed_pat_0, tx_fixed_pat_1, tx_fixed_pat_2, tx_fixed_pat_3)
        return self.recv_sd_tx_fixed_pat_set()

    def send_sd_tx_fixed_pat_set(self, dev_id, dev_port, lane, tx_fixed_pat_0, tx_fixed_pat_1, tx_fixed_pat_2, tx_fixed_pat_3):
        self._oprot.writeMessageBegin('sd_tx_fixed_pat_set', TMessageType.CALL, self._seqid)
        args = sd_tx_fixed_pat_set_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.tx_fixed_pat_0 = tx_fixed_pat_0
        args.tx_fixed_pat_1 = tx_fixed_pat_1
        args.tx_fixed_pat_2 = tx_fixed_pat_2
        args.tx_fixed_pat_3 = tx_fixed_pat_3
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_tx_fixed_pat_set(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_tx_fixed_pat_set_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_tx_fixed_pat_set failed: unknown result")

    def sd_tx_fixed_pat_get(self, dev_id, dev_port, lane):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane

        """
        self.send_sd_tx_fixed_pat_get(dev_id, dev_port, lane)
        return self.recv_sd_tx_fixed_pat_get()

    def send_sd_tx_fixed_pat_get(self, dev_id, dev_port, lane):
        self._oprot.writeMessageBegin('sd_tx_fixed_pat_get', TMessageType.CALL, self._seqid)
        args = sd_tx_fixed_pat_get_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_tx_fixed_pat_get(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_tx_fixed_pat_get_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_tx_fixed_pat_get failed: unknown result")

    def sd_rx_data_cap_get(self, dev_id, dev_port, lane):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane

        """
        self.send_sd_rx_data_cap_get(dev_id, dev_port, lane)
        return self.recv_sd_rx_data_cap_get()

    def send_sd_rx_data_cap_get(self, dev_id, dev_port, lane):
        self._oprot.writeMessageBegin('sd_rx_data_cap_get', TMessageType.CALL, self._seqid)
        args = sd_rx_data_cap_get_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_rx_data_cap_get(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_rx_data_cap_get_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_rx_data_cap_get failed: unknown result")

    def sd_get_tx_eq(self, dev_id, dev_port, lane):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane

        """
        self.send_sd_get_tx_eq(dev_id, dev_port, lane)
        return self.recv_sd_get_tx_eq()

    def send_sd_get_tx_eq(self, dev_id, dev_port, lane):
        self._oprot.writeMessageBegin('sd_get_tx_eq', TMessageType.CALL, self._seqid)
        args = sd_get_tx_eq_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_get_tx_eq(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_get_tx_eq_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_get_tx_eq failed: unknown result")

    def sd_set_tx_eq(self, dev_id, dev_port, lane, pre, atten, post):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - pre
         - atten
         - post

        """
        self.send_sd_set_tx_eq(dev_id, dev_port, lane, pre, atten, post)
        return self.recv_sd_set_tx_eq()

    def send_sd_set_tx_eq(self, dev_id, dev_port, lane, pre, atten, post):
        self._oprot.writeMessageBegin('sd_set_tx_eq', TMessageType.CALL, self._seqid)
        args = sd_set_tx_eq_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.pre = pre
        args.atten = atten
        args.post = post
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_set_tx_eq(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_set_tx_eq_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_set_tx_eq failed: unknown result")

    def sd_get_pll_state(self, dev_id, dev_port, lane, expected_divider):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane
         - expected_divider

        """
        self.send_sd_get_pll_state(dev_id, dev_port, lane, expected_divider)
        return self.recv_sd_get_pll_state()

    def send_sd_get_pll_state(self, dev_id, dev_port, lane, expected_divider):
        self._oprot.writeMessageBegin('sd_get_pll_state', TMessageType.CALL, self._seqid)
        args = sd_get_pll_state_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.expected_divider = expected_divider
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_get_pll_state(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_get_pll_state_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_get_pll_state failed: unknown result")

    def sd_get_tx_output_en(self, dev_id, dev_port, lane):
        """
        Parameters:
         - dev_id
         - dev_port
         - lane

        """
        self.send_sd_get_tx_output_en(dev_id, dev_port, lane)
        return self.recv_sd_get_tx_output_en()

    def send_sd_get_tx_output_en(self, dev_id, dev_port, lane):
        self._oprot.writeMessageBegin('sd_get_tx_output_en', TMessageType.CALL, self._seqid)
        args = sd_get_tx_output_en_args()
        args.dev_id = dev_id
        args.dev_port = dev_port
        args.lane = lane
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sd_get_tx_output_en(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sd_get_tx_output_en_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sd_get_tx_output_en failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["sd_mgmt_clksel_set"] = Processor.process_sd_mgmt_clksel_set
        self._processMap["sd_mgmt_clksel_get"] = Processor.process_sd_mgmt_clksel_get
        self._processMap["sd_mgmt_access_method_set"] = Processor.process_sd_mgmt_access_method_set
        self._processMap["sd_mgmt_access_method_get"] = Processor.process_sd_mgmt_access_method_get
        self._processMap["sd_mgmt_bcast_set"] = Processor.process_sd_mgmt_bcast_set
        self._processMap["sd_mgmt_bcast_get"] = Processor.process_sd_mgmt_bcast_get
        self._processMap["sd_mgmt_reg_set"] = Processor.process_sd_mgmt_reg_set
        self._processMap["sd_mgmt_reg_get"] = Processor.process_sd_mgmt_reg_get
        self._processMap["sd_mgmt_uc_int"] = Processor.process_sd_mgmt_uc_int
        self._processMap["sd_port_lane_map_set"] = Processor.process_sd_port_lane_map_set
        self._processMap["sd_port_lane_map_get"] = Processor.process_sd_port_lane_map_get
        self._processMap["sd_dev_rx_eq_cal_rr_set"] = Processor.process_sd_dev_rx_eq_cal_rr_set
        self._processMap["sd_dev_rx_eq_cal_rr_get"] = Processor.process_sd_dev_rx_eq_cal_rr_get
        self._processMap["sd_tx_pll_clksel_set"] = Processor.process_sd_tx_pll_clksel_set
        self._processMap["sd_tx_pll_clksel_get"] = Processor.process_sd_tx_pll_clksel_get
        self._processMap["sd_lane_init_run"] = Processor.process_sd_lane_init_run
        self._processMap["sd_tx_pll_lock_get"] = Processor.process_sd_tx_pll_lock_get
        self._processMap["sd_rx_cdr_lock_get"] = Processor.process_sd_rx_cdr_lock_get
        self._processMap["sd_tx_pll_status_get"] = Processor.process_sd_tx_pll_status_get
        self._processMap["sd_rx_cdr_status_get"] = Processor.process_sd_rx_cdr_status_get
        self._processMap["sd_lane_loopback_set"] = Processor.process_sd_lane_loopback_set
        self._processMap["sd_lane_loopback_get"] = Processor.process_sd_lane_loopback_get
        self._processMap["sd_tx_en_set"] = Processor.process_sd_tx_en_set
        self._processMap["sd_tx_en_get"] = Processor.process_sd_tx_en_get
        self._processMap["sd_tx_drv_en_set"] = Processor.process_sd_tx_drv_en_set
        self._processMap["sd_tx_drv_en_get"] = Processor.process_sd_tx_drv_en_get
        self._processMap["sd_tx_drv_inv_set"] = Processor.process_sd_tx_drv_inv_set
        self._processMap["sd_tx_drv_inv_get"] = Processor.process_sd_tx_drv_inv_get
        self._processMap["sd_tx_drv_attn_is_valid"] = Processor.process_sd_tx_drv_attn_is_valid
        self._processMap["sd_tx_drv_attn_set"] = Processor.process_sd_tx_drv_attn_set
        self._processMap["sd_tx_drv_attn_get"] = Processor.process_sd_tx_drv_attn_get
        self._processMap["sd_tx_drv_amp_set"] = Processor.process_sd_tx_drv_amp_set
        self._processMap["sd_tx_drv_amp_get"] = Processor.process_sd_tx_drv_amp_get
        self._processMap["sd_tx_drv_status_get"] = Processor.process_sd_tx_drv_status_get
        self._processMap["sd_rx_en_set"] = Processor.process_sd_rx_en_set
        self._processMap["sd_rx_en_get"] = Processor.process_sd_rx_en_get
        self._processMap["sd_rx_afe_inv_set"] = Processor.process_sd_rx_afe_inv_set
        self._processMap["sd_rx_afe_inv_get"] = Processor.process_sd_rx_afe_inv_get
        self._processMap["sd_rx_afe_term_set"] = Processor.process_sd_rx_afe_term_set
        self._processMap["sd_rx_afe_term_get"] = Processor.process_sd_rx_afe_term_get
        self._processMap["sd_rx_afe_los_thres_set"] = Processor.process_sd_rx_afe_los_thres_set
        self._processMap["sd_rx_afe_los_thres_get"] = Processor.process_sd_rx_afe_los_thres_get
        self._processMap["sd_rx_afe_los_get"] = Processor.process_sd_rx_afe_los_get
        self._processMap["sd_rx_eq_cal_busy_get"] = Processor.process_sd_rx_eq_cal_busy_get
        self._processMap["sd_rx_eq_ctle_set"] = Processor.process_sd_rx_eq_ctle_set
        self._processMap["sd_rx_eq_ctle_get"] = Processor.process_sd_rx_eq_ctle_get
        self._processMap["sd_rx_eq_dfe_adv_set"] = Processor.process_sd_rx_eq_dfe_adv_set
        self._processMap["sd_rx_eq_dfe_adv_get"] = Processor.process_sd_rx_eq_dfe_adv_get
        self._processMap["sd_rx_eq_dfe_set"] = Processor.process_sd_rx_eq_dfe_set
        self._processMap["sd_rx_eq_dfe_get"] = Processor.process_sd_rx_eq_dfe_get
        self._processMap["sd_rx_eq_cal_param_set"] = Processor.process_sd_rx_eq_cal_param_set
        self._processMap["sd_rx_eq_cal_param_get"] = Processor.process_sd_rx_eq_cal_param_get
        self._processMap["sd_rx_eq_cal_adv_run"] = Processor.process_sd_rx_eq_cal_adv_run
        self._processMap["sd_rx_eq_cal_eye_get"] = Processor.process_sd_rx_eq_cal_eye_get
        self._processMap["sd_rx_eq_ical_run"] = Processor.process_sd_rx_eq_ical_run
        self._processMap["sd_rx_eq_ical_eye_get"] = Processor.process_sd_rx_eq_ical_eye_get
        self._processMap["sd_rx_eq_pcal_run"] = Processor.process_sd_rx_eq_pcal_run
        self._processMap["sd_rx_eq_status_get"] = Processor.process_sd_rx_eq_status_get
        self._processMap["sd_rx_eye_offset_set"] = Processor.process_sd_rx_eye_offset_set
        self._processMap["sd_rx_eye_get"] = Processor.process_sd_rx_eye_get
        self._processMap["sd_rx_eye_3d_get"] = Processor.process_sd_rx_eye_3d_get
        self._processMap["sd_tx_err_inj_set"] = Processor.process_sd_tx_err_inj_set
        self._processMap["sd_rx_err_inj_set"] = Processor.process_sd_rx_err_inj_set
        self._processMap["sd_tx_patsel_set"] = Processor.process_sd_tx_patsel_set
        self._processMap["sd_tx_patsel_get"] = Processor.process_sd_tx_patsel_get
        self._processMap["sd_rx_patsel_set"] = Processor.process_sd_rx_patsel_set
        self._processMap["sd_rx_patsel_get"] = Processor.process_sd_rx_patsel_get
        self._processMap["sd_rx_err_cnt_get"] = Processor.process_sd_rx_err_cnt_get
        self._processMap["sd_tx_fixed_pat_set"] = Processor.process_sd_tx_fixed_pat_set
        self._processMap["sd_tx_fixed_pat_get"] = Processor.process_sd_tx_fixed_pat_get
        self._processMap["sd_rx_data_cap_get"] = Processor.process_sd_rx_data_cap_get
        self._processMap["sd_get_tx_eq"] = Processor.process_sd_get_tx_eq
        self._processMap["sd_set_tx_eq"] = Processor.process_sd_set_tx_eq
        self._processMap["sd_get_pll_state"] = Processor.process_sd_get_pll_state
        self._processMap["sd_get_tx_output_en"] = Processor.process_sd_get_tx_output_en
        self._on_message_begin = None

    def on_message_begin(self, func):
        self._on_message_begin = func

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if self._on_message_begin:
            self._on_message_begin(name, type, seqid)
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_sd_mgmt_clksel_set(self, seqid, iprot, oprot):
        args = sd_mgmt_clksel_set_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_mgmt_clksel_set_result()
        try:
            result.success = self._handler.sd_mgmt_clksel_set(args.dev_id, args.dev_port, args.lane, args.clk_src)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidSdOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_mgmt_clksel_set", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_mgmt_clksel_get(self, seqid, iprot, oprot):
        args = sd_mgmt_clksel_get_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_mgmt_clksel_get_result()
        try:
            result.success = self._handler.sd_mgmt_clksel_get(args.dev_id, args.dev_port, args.lane)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidSdOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_mgmt_clksel_get", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_mgmt_access_method_set(self, seqid, iprot, oprot):
        args = sd_mgmt_access_method_set_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_mgmt_access_method_set_result()
        try:
            result.success = self._handler.sd_mgmt_access_method_set(args.dev_id, args.method)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidSdOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_mgmt_access_method_set", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_mgmt_access_method_get(self, seqid, iprot, oprot):
        args = sd_mgmt_access_method_get_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_mgmt_access_method_get_result()
        try:
            result.success = self._handler.sd_mgmt_access_method_get(args.dev_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidSdOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_mgmt_access_method_get", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_mgmt_bcast_set(self, seqid, iprot, oprot):
        args = sd_mgmt_bcast_set_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_mgmt_bcast_set_result()
        try:
            result.success = self._handler.sd_mgmt_bcast_set(args.dev_id, args.dev_port, args.lane, args.tx_dir, args.en)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidSdOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_mgmt_bcast_set", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_mgmt_bcast_get(self, seqid, iprot, oprot):
        args = sd_mgmt_bcast_get_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_mgmt_bcast_get_result()
        try:
            result.success = self._handler.sd_mgmt_bcast_get(args.dev_id, args.dev_port, args.lane, args.tx_dir)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidSdOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_mgmt_bcast_get", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_mgmt_reg_set(self, seqid, iprot, oprot):
        args = sd_mgmt_reg_set_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_mgmt_reg_set_result()
        try:
            result.success = self._handler.sd_mgmt_reg_set(args.dev_id, args.dev_port, args.lane, args.tx_dir, args.reg, args.data)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidSdOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_mgmt_reg_set", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_mgmt_reg_get(self, seqid, iprot, oprot):
        args = sd_mgmt_reg_get_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_mgmt_reg_get_result()
        try:
            result.success = self._handler.sd_mgmt_reg_get(args.dev_id, args.dev_port, args.lane, args.tx_dir, args.reg)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidSdOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_mgmt_reg_get", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_mgmt_uc_int(self, seqid, iprot, oprot):
        args = sd_mgmt_uc_int_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_mgmt_uc_int_result()
        try:
            result.success = self._handler.sd_mgmt_uc_int(args.dev_id, args.dev_port, args.lane, args.tx_dir, args.interrupt, args.int_data)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_mgmt_uc_int", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_port_lane_map_set(self, seqid, iprot, oprot):
        args = sd_port_lane_map_set_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_port_lane_map_set_result()
        try:
            result.success = self._handler.sd_port_lane_map_set(args.dev_id, args.dev_port, args.tx_l0, args.tx_l1, args.tx_l2, args.tx_l3, args.rx_l0, args.rx_l1, args.rx_l2, args.rx_l3)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_port_lane_map_set", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_port_lane_map_get(self, seqid, iprot, oprot):
        args = sd_port_lane_map_get_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_port_lane_map_get_result()
        try:
            result.success = self._handler.sd_port_lane_map_get(args.dev_id, args.dev_port)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidSdOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_port_lane_map_get", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_dev_rx_eq_cal_rr_set(self, seqid, iprot, oprot):
        args = sd_dev_rx_eq_cal_rr_set_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_dev_rx_eq_cal_rr_set_result()
        try:
            result.success = self._handler.sd_dev_rx_eq_cal_rr_set(args.dev_id, args.fine_tune_lane_cnt)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidSdOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_dev_rx_eq_cal_rr_set", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_dev_rx_eq_cal_rr_get(self, seqid, iprot, oprot):
        args = sd_dev_rx_eq_cal_rr_get_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_dev_rx_eq_cal_rr_get_result()
        try:
            result.success = self._handler.sd_dev_rx_eq_cal_rr_get(args.dev_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidSdOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_dev_rx_eq_cal_rr_get", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_tx_pll_clksel_set(self, seqid, iprot, oprot):
        args = sd_tx_pll_clksel_set_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_tx_pll_clksel_set_result()
        try:
            result.success = self._handler.sd_tx_pll_clksel_set(args.dev_id, args.dev_port, args.lane, args.clk_source)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidSdOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_tx_pll_clksel_set", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_tx_pll_clksel_get(self, seqid, iprot, oprot):
        args = sd_tx_pll_clksel_get_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_tx_pll_clksel_get_result()
        try:
            result.success = self._handler.sd_tx_pll_clksel_get(args.dev_id, args.dev_port, args.lane)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidSdOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_tx_pll_clksel_get", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_lane_init_run(self, seqid, iprot, oprot):
        args = sd_lane_init_run_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_lane_init_run_result()
        try:
            result.success = self._handler.sd_lane_init_run(args.dev_id, args.dev_port, args.lane, args.line_rate, args.init_rx, args.init_tx, args.tx_drv_en, args.phase_cal)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_lane_init_run", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_tx_pll_lock_get(self, seqid, iprot, oprot):
        args = sd_tx_pll_lock_get_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_tx_pll_lock_get_result()
        try:
            result.success = self._handler.sd_tx_pll_lock_get(args.dev_id, args.dev_port, args.lane)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidSdOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_tx_pll_lock_get", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_rx_cdr_lock_get(self, seqid, iprot, oprot):
        args = sd_rx_cdr_lock_get_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_rx_cdr_lock_get_result()
        try:
            result.success = self._handler.sd_rx_cdr_lock_get(args.dev_id, args.dev_port, args.lane)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidSdOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_rx_cdr_lock_get", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_tx_pll_status_get(self, seqid, iprot, oprot):
        args = sd_tx_pll_status_get_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_tx_pll_status_get_result()
        try:
            result.success = self._handler.sd_tx_pll_status_get(args.dev_id, args.dev_port, args.lane)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidSdOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_tx_pll_status_get", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_rx_cdr_status_get(self, seqid, iprot, oprot):
        args = sd_rx_cdr_status_get_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_rx_cdr_status_get_result()
        try:
            result.success = self._handler.sd_rx_cdr_status_get(args.dev_id, args.dev_port, args.lane)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidSdOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_rx_cdr_status_get", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_lane_loopback_set(self, seqid, iprot, oprot):
        args = sd_lane_loopback_set_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_lane_loopback_set_result()
        try:
            result.success = self._handler.sd_lane_loopback_set(args.dev_id, args.dev_port, args.lane, args.loopback_mode)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidSdOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_lane_loopback_set", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_lane_loopback_get(self, seqid, iprot, oprot):
        args = sd_lane_loopback_get_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_lane_loopback_get_result()
        try:
            result.success = self._handler.sd_lane_loopback_get(args.dev_id, args.dev_port, args.lane)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidSdOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_lane_loopback_get", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_tx_en_set(self, seqid, iprot, oprot):
        args = sd_tx_en_set_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_tx_en_set_result()
        try:
            result.success = self._handler.sd_tx_en_set(args.dev_id, args.dev_port, args.lane, args.tx_en)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidSdOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_tx_en_set", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_tx_en_get(self, seqid, iprot, oprot):
        args = sd_tx_en_get_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_tx_en_get_result()
        try:
            result.success = self._handler.sd_tx_en_get(args.dev_id, args.dev_port, args.lane)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidSdOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_tx_en_get", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_tx_drv_en_set(self, seqid, iprot, oprot):
        args = sd_tx_drv_en_set_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_tx_drv_en_set_result()
        try:
            result.success = self._handler.sd_tx_drv_en_set(args.dev_id, args.dev_port, args.lane, args.tx_en)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidSdOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_tx_drv_en_set", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_tx_drv_en_get(self, seqid, iprot, oprot):
        args = sd_tx_drv_en_get_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_tx_drv_en_get_result()
        try:
            result.success = self._handler.sd_tx_drv_en_get(args.dev_id, args.dev_port, args.lane)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidSdOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_tx_drv_en_get", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_tx_drv_inv_set(self, seqid, iprot, oprot):
        args = sd_tx_drv_inv_set_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_tx_drv_inv_set_result()
        try:
            result.success = self._handler.sd_tx_drv_inv_set(args.dev_id, args.dev_port, args.lane, args.inv)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidSdOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_tx_drv_inv_set", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_tx_drv_inv_get(self, seqid, iprot, oprot):
        args = sd_tx_drv_inv_get_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_tx_drv_inv_get_result()
        try:
            result.success = self._handler.sd_tx_drv_inv_get(args.dev_id, args.dev_port, args.lane)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidSdOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_tx_drv_inv_get", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_tx_drv_attn_is_valid(self, seqid, iprot, oprot):
        args = sd_tx_drv_attn_is_valid_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_tx_drv_attn_is_valid_result()
        try:
            result.success = self._handler.sd_tx_drv_attn_is_valid(args.attn_main, args.attn_post, args.attn_pre)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_tx_drv_attn_is_valid", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_tx_drv_attn_set(self, seqid, iprot, oprot):
        args = sd_tx_drv_attn_set_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_tx_drv_attn_set_result()
        try:
            result.success = self._handler.sd_tx_drv_attn_set(args.dev_id, args.dev_port, args.lane, args.attn_main, args.attn_post, args.attn_pre)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_tx_drv_attn_set", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_tx_drv_attn_get(self, seqid, iprot, oprot):
        args = sd_tx_drv_attn_get_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_tx_drv_attn_get_result()
        try:
            result.success = self._handler.sd_tx_drv_attn_get(args.dev_id, args.dev_port, args.lane)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_tx_drv_attn_get", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_tx_drv_amp_set(self, seqid, iprot, oprot):
        args = sd_tx_drv_amp_set_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_tx_drv_amp_set_result()
        try:
            result.success = self._handler.sd_tx_drv_amp_set(args.dev_id, args.dev_port, args.lane, args.amp_main, args.amp_post, args.amp_pre)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_tx_drv_amp_set", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_tx_drv_amp_get(self, seqid, iprot, oprot):
        args = sd_tx_drv_amp_get_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_tx_drv_amp_get_result()
        try:
            result.success = self._handler.sd_tx_drv_amp_get(args.dev_id, args.dev_port, args.lane)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_tx_drv_amp_get", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_tx_drv_status_get(self, seqid, iprot, oprot):
        args = sd_tx_drv_status_get_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_tx_drv_status_get_result()
        try:
            result.success = self._handler.sd_tx_drv_status_get(args.dev_id, args.dev_port, args.lane)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_tx_drv_status_get", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_rx_en_set(self, seqid, iprot, oprot):
        args = sd_rx_en_set_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_rx_en_set_result()
        try:
            result.success = self._handler.sd_rx_en_set(args.dev_id, args.dev_port, args.lane, args.rx_en)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidSdOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_rx_en_set", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_rx_en_get(self, seqid, iprot, oprot):
        args = sd_rx_en_get_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_rx_en_get_result()
        try:
            result.success = self._handler.sd_rx_en_get(args.dev_id, args.dev_port, args.lane)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidSdOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_rx_en_get", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_rx_afe_inv_set(self, seqid, iprot, oprot):
        args = sd_rx_afe_inv_set_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_rx_afe_inv_set_result()
        try:
            result.success = self._handler.sd_rx_afe_inv_set(args.dev_id, args.dev_port, args.lane, args.inv_en)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidSdOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_rx_afe_inv_set", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_rx_afe_inv_get(self, seqid, iprot, oprot):
        args = sd_rx_afe_inv_get_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_rx_afe_inv_get_result()
        try:
            result.success = self._handler.sd_rx_afe_inv_get(args.dev_id, args.dev_port, args.lane)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidSdOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_rx_afe_inv_get", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_rx_afe_term_set(self, seqid, iprot, oprot):
        args = sd_rx_afe_term_set_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_rx_afe_term_set_result()
        try:
            result.success = self._handler.sd_rx_afe_term_set(args.dev_id, args.dev_port, args.lane, args.rx_term)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidSdOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_rx_afe_term_set", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_rx_afe_term_get(self, seqid, iprot, oprot):
        args = sd_rx_afe_term_get_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_rx_afe_term_get_result()
        try:
            result.success = self._handler.sd_rx_afe_term_get(args.dev_id, args.dev_port, args.lane)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidSdOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_rx_afe_term_get", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_rx_afe_los_thres_set(self, seqid, iprot, oprot):
        args = sd_rx_afe_los_thres_set_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_rx_afe_los_thres_set_result()
        try:
            result.success = self._handler.sd_rx_afe_los_thres_set(args.dev_id, args.dev_port, args.lane, args.rx_los_en, args.rx_los_thres)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidSdOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_rx_afe_los_thres_set", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_rx_afe_los_thres_get(self, seqid, iprot, oprot):
        args = sd_rx_afe_los_thres_get_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_rx_afe_los_thres_get_result()
        try:
            result.success = self._handler.sd_rx_afe_los_thres_get(args.dev_id, args.dev_port, args.lane)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidSdOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_rx_afe_los_thres_get", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_rx_afe_los_get(self, seqid, iprot, oprot):
        args = sd_rx_afe_los_get_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_rx_afe_los_get_result()
        try:
            result.success = self._handler.sd_rx_afe_los_get(args.dev_id, args.dev_port, args.lane)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidSdOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_rx_afe_los_get", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_rx_eq_cal_busy_get(self, seqid, iprot, oprot):
        args = sd_rx_eq_cal_busy_get_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_rx_eq_cal_busy_get_result()
        try:
            result.success = self._handler.sd_rx_eq_cal_busy_get(args.dev_id, args.dev_port, args.lane, args.chk_cnt, args.chk_wait)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_rx_eq_cal_busy_get", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_rx_eq_ctle_set(self, seqid, iprot, oprot):
        args = sd_rx_eq_ctle_set_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_rx_eq_ctle_set_result()
        try:
            result.success = self._handler.sd_rx_eq_ctle_set(args.dev_id, args.dev_port, args.lane, args.ctle_dc, args.ctle_lf, args.ctle_hf, args.ctle_bw)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_rx_eq_ctle_set", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_rx_eq_ctle_get(self, seqid, iprot, oprot):
        args = sd_rx_eq_ctle_get_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_rx_eq_ctle_get_result()
        try:
            result.success = self._handler.sd_rx_eq_ctle_get(args.dev_id, args.dev_port, args.lane)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_rx_eq_ctle_get", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_rx_eq_dfe_adv_set(self, seqid, iprot, oprot):
        args = sd_rx_eq_dfe_adv_set_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_rx_eq_dfe_adv_set_result()
        try:
            result.success = self._handler.sd_rx_eq_dfe_adv_set(args.dev_id, args.dev_port, args.lane, args.dfe_tap_num, args.dfe_tap_val)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_rx_eq_dfe_adv_set", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_rx_eq_dfe_adv_get(self, seqid, iprot, oprot):
        args = sd_rx_eq_dfe_adv_get_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_rx_eq_dfe_adv_get_result()
        try:
            result.success = self._handler.sd_rx_eq_dfe_adv_get(args.dev_id, args.dev_port, args.lane, args.dfe_tap_num)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_rx_eq_dfe_adv_get", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_rx_eq_dfe_set(self, seqid, iprot, oprot):
        args = sd_rx_eq_dfe_set_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_rx_eq_dfe_set_result()
        try:
            result.success = self._handler.sd_rx_eq_dfe_set(args.dev_id, args.dev_port, args.lane, args.dfe_gain, args.dfe_tap1, args.dfe_tap2, args.dfe_tap3, args.dfe_tap4)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_rx_eq_dfe_set", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_rx_eq_dfe_get(self, seqid, iprot, oprot):
        args = sd_rx_eq_dfe_get_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_rx_eq_dfe_get_result()
        try:
            result.success = self._handler.sd_rx_eq_dfe_get(args.dev_id, args.dev_port, args.lane)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_rx_eq_dfe_get", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_rx_eq_cal_param_set(self, seqid, iprot, oprot):
        args = sd_rx_eq_cal_param_set_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_rx_eq_cal_param_set_result()
        try:
            result.success = self._handler.sd_rx_eq_cal_param_set(args.dev_id, args.dev_port, args.lane, args.ctle_dc_hint, args.dfe_gain_range, args.pcal_loop_cnt)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_rx_eq_cal_param_set", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_rx_eq_cal_param_get(self, seqid, iprot, oprot):
        args = sd_rx_eq_cal_param_get_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_rx_eq_cal_param_get_result()
        try:
            result.success = self._handler.sd_rx_eq_cal_param_get(args.dev_id, args.dev_port, args.lane)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_rx_eq_cal_param_get", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_rx_eq_cal_adv_run(self, seqid, iprot, oprot):
        args = sd_rx_eq_cal_adv_run_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_rx_eq_cal_adv_run_result()
        try:
            result.success = self._handler.sd_rx_eq_cal_adv_run(args.dev_id, args.dev_port, args.lane, args.cal_cmd, args.ctle_cal_cfg, args.dfe_fixed)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_rx_eq_cal_adv_run", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_rx_eq_cal_eye_get(self, seqid, iprot, oprot):
        args = sd_rx_eq_cal_eye_get_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_rx_eq_cal_eye_get_result()
        try:
            result.success = self._handler.sd_rx_eq_cal_eye_get(args.dev_id, args.dev_port, args.lane)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_rx_eq_cal_eye_get", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_rx_eq_ical_run(self, seqid, iprot, oprot):
        args = sd_rx_eq_ical_run_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_rx_eq_ical_run_result()
        try:
            result.success = self._handler.sd_rx_eq_ical_run(args.dev_id, args.dev_port, args.lane)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_rx_eq_ical_run", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_rx_eq_ical_eye_get(self, seqid, iprot, oprot):
        args = sd_rx_eq_ical_eye_get_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_rx_eq_ical_eye_get_result()
        try:
            result.success = self._handler.sd_rx_eq_ical_eye_get(args.dev_id, args.dev_port, args.lane, args.cal_good_thres)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_rx_eq_ical_eye_get", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_rx_eq_pcal_run(self, seqid, iprot, oprot):
        args = sd_rx_eq_pcal_run_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_rx_eq_pcal_run_result()
        try:
            result.success = self._handler.sd_rx_eq_pcal_run(args.dev_id, args.dev_port, args.lane, args.cal_cont)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_rx_eq_pcal_run", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_rx_eq_status_get(self, seqid, iprot, oprot):
        args = sd_rx_eq_status_get_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_rx_eq_status_get_result()
        try:
            result.success = self._handler.sd_rx_eq_status_get(args.dev_id, args.dev_port, args.lane)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_rx_eq_status_get", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_rx_eye_offset_set(self, seqid, iprot, oprot):
        args = sd_rx_eye_offset_set_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_rx_eye_offset_set_result()
        try:
            result.success = self._handler.sd_rx_eye_offset_set(args.dev_id, args.dev_port, args.lane, args.offset_en, args.pos_x, args.pos_y)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_rx_eye_offset_set", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_rx_eye_get(self, seqid, iprot, oprot):
        args = sd_rx_eye_get_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_rx_eye_get_result()
        try:
            result.success = self._handler.sd_rx_eye_get(args.dev_id, args.dev_port, args.lane, args.meas_mode, args.meas_ber)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_rx_eye_get", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_rx_eye_3d_get(self, seqid, iprot, oprot):
        args = sd_rx_eye_3d_get_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_rx_eye_3d_get_result()
        try:
            result.success = self._handler.sd_rx_eye_3d_get(args.dev_id, args.dev_port, args.lane, args.meas_ber)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_rx_eye_3d_get", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_tx_err_inj_set(self, seqid, iprot, oprot):
        args = sd_tx_err_inj_set_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_tx_err_inj_set_result()
        try:
            result.success = self._handler.sd_tx_err_inj_set(args.dev_id, args.dev_port, args.lane, args.num_bits)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_tx_err_inj_set", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_rx_err_inj_set(self, seqid, iprot, oprot):
        args = sd_rx_err_inj_set_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_rx_err_inj_set_result()
        try:
            result.success = self._handler.sd_rx_err_inj_set(args.dev_id, args.dev_port, args.lane, args.num_bits)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_rx_err_inj_set", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_tx_patsel_set(self, seqid, iprot, oprot):
        args = sd_tx_patsel_set_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_tx_patsel_set_result()
        try:
            result.success = self._handler.sd_tx_patsel_set(args.dev_id, args.dev_port, args.lane, args.tx_patsel)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_tx_patsel_set", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_tx_patsel_get(self, seqid, iprot, oprot):
        args = sd_tx_patsel_get_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_tx_patsel_get_result()
        try:
            result.success = self._handler.sd_tx_patsel_get(args.dev_id, args.dev_port, args.lane)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_tx_patsel_get", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_rx_patsel_set(self, seqid, iprot, oprot):
        args = sd_rx_patsel_set_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_rx_patsel_set_result()
        try:
            result.success = self._handler.sd_rx_patsel_set(args.dev_id, args.dev_port, args.lane, args.rx_patsel)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_rx_patsel_set", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_rx_patsel_get(self, seqid, iprot, oprot):
        args = sd_rx_patsel_get_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_rx_patsel_get_result()
        try:
            result.success = self._handler.sd_rx_patsel_get(args.dev_id, args.dev_port, args.lane)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_rx_patsel_get", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_rx_err_cnt_get(self, seqid, iprot, oprot):
        args = sd_rx_err_cnt_get_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_rx_err_cnt_get_result()
        try:
            result.success = self._handler.sd_rx_err_cnt_get(args.dev_id, args.dev_port, args.lane)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_rx_err_cnt_get", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_tx_fixed_pat_set(self, seqid, iprot, oprot):
        args = sd_tx_fixed_pat_set_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_tx_fixed_pat_set_result()
        try:
            result.success = self._handler.sd_tx_fixed_pat_set(args.dev_id, args.dev_port, args.lane, args.tx_fixed_pat_0, args.tx_fixed_pat_1, args.tx_fixed_pat_2, args.tx_fixed_pat_3)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_tx_fixed_pat_set", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_tx_fixed_pat_get(self, seqid, iprot, oprot):
        args = sd_tx_fixed_pat_get_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_tx_fixed_pat_get_result()
        try:
            result.success = self._handler.sd_tx_fixed_pat_get(args.dev_id, args.dev_port, args.lane)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_tx_fixed_pat_get", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_rx_data_cap_get(self, seqid, iprot, oprot):
        args = sd_rx_data_cap_get_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_rx_data_cap_get_result()
        try:
            result.success = self._handler.sd_rx_data_cap_get(args.dev_id, args.dev_port, args.lane)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_rx_data_cap_get", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_get_tx_eq(self, seqid, iprot, oprot):
        args = sd_get_tx_eq_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_get_tx_eq_result()
        try:
            result.success = self._handler.sd_get_tx_eq(args.dev_id, args.dev_port, args.lane)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidSdOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_get_tx_eq", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_set_tx_eq(self, seqid, iprot, oprot):
        args = sd_set_tx_eq_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_set_tx_eq_result()
        try:
            result.success = self._handler.sd_set_tx_eq(args.dev_id, args.dev_port, args.lane, args.pre, args.atten, args.post)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidSdOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_set_tx_eq", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_get_pll_state(self, seqid, iprot, oprot):
        args = sd_get_pll_state_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_get_pll_state_result()
        try:
            result.success = self._handler.sd_get_pll_state(args.dev_id, args.dev_port, args.lane, args.expected_divider)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidSdOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_get_pll_state", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sd_get_tx_output_en(self, seqid, iprot, oprot):
        args = sd_get_tx_output_en_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sd_get_tx_output_en_result()
        try:
            result.success = self._handler.sd_get_tx_output_en(args.dev_id, args.dev_port, args.lane)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidSdOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sd_get_tx_output_en", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class sd_mgmt_clksel_set_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane
     - clk_src

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None, clk_src=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane
        self.clk_src = clk_src

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.clk_src = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_mgmt_clksel_set_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        if self.clk_src is not None:
            oprot.writeFieldBegin('clk_src', TType.I32, 4)
            oprot.writeI32(self.clk_src)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_mgmt_clksel_set_args)
sd_mgmt_clksel_set_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
    (4, TType.I32, 'clk_src', None, None, ),  # 4
)


class sd_mgmt_clksel_set_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidSdOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_mgmt_clksel_set_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_mgmt_clksel_set_result)
sd_mgmt_clksel_set_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidSdOperation, None], None, ),  # 1
)


class sd_mgmt_clksel_get_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_mgmt_clksel_get_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_mgmt_clksel_get_args)
sd_mgmt_clksel_get_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
)


class sd_mgmt_clksel_get_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = i32_value()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidSdOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_mgmt_clksel_get_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_mgmt_clksel_get_result)
sd_mgmt_clksel_get_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [i32_value, None], None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidSdOperation, None], None, ),  # 1
)


class sd_mgmt_access_method_set_args(object):
    """
    Attributes:
     - dev_id
     - method

    """


    def __init__(self, dev_id=None, method=None,):
        self.dev_id = dev_id
        self.method = method

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.method = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_mgmt_access_method_set_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.method is not None:
            oprot.writeFieldBegin('method', TType.I32, 2)
            oprot.writeI32(self.method)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_mgmt_access_method_set_args)
sd_mgmt_access_method_set_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'method', None, None, ),  # 2
)


class sd_mgmt_access_method_set_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidSdOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_mgmt_access_method_set_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_mgmt_access_method_set_result)
sd_mgmt_access_method_set_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidSdOperation, None], None, ),  # 1
)


class sd_mgmt_access_method_get_args(object):
    """
    Attributes:
     - dev_id

    """


    def __init__(self, dev_id=None,):
        self.dev_id = dev_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_mgmt_access_method_get_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_mgmt_access_method_get_args)
sd_mgmt_access_method_get_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
)


class sd_mgmt_access_method_get_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = i32_value()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidSdOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_mgmt_access_method_get_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_mgmt_access_method_get_result)
sd_mgmt_access_method_get_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [i32_value, None], None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidSdOperation, None], None, ),  # 1
)


class sd_mgmt_bcast_set_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane
     - tx_dir
     - en

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None, tx_dir=None, en=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane
        self.tx_dir = tx_dir
        self.en = en

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.tx_dir = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.en = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_mgmt_bcast_set_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        if self.tx_dir is not None:
            oprot.writeFieldBegin('tx_dir', TType.BOOL, 4)
            oprot.writeBool(self.tx_dir)
            oprot.writeFieldEnd()
        if self.en is not None:
            oprot.writeFieldBegin('en', TType.BOOL, 5)
            oprot.writeBool(self.en)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_mgmt_bcast_set_args)
sd_mgmt_bcast_set_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
    (4, TType.BOOL, 'tx_dir', None, None, ),  # 4
    (5, TType.BOOL, 'en', None, None, ),  # 5
)


class sd_mgmt_bcast_set_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidSdOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_mgmt_bcast_set_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_mgmt_bcast_set_result)
sd_mgmt_bcast_set_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidSdOperation, None], None, ),  # 1
)


class sd_mgmt_bcast_get_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane
     - tx_dir

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None, tx_dir=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane
        self.tx_dir = tx_dir

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.tx_dir = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_mgmt_bcast_get_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        if self.tx_dir is not None:
            oprot.writeFieldBegin('tx_dir', TType.BOOL, 4)
            oprot.writeBool(self.tx_dir)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_mgmt_bcast_get_args)
sd_mgmt_bcast_get_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
    (4, TType.BOOL, 'tx_dir', None, None, ),  # 4
)


class sd_mgmt_bcast_get_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = bool_value()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidSdOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_mgmt_bcast_get_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_mgmt_bcast_get_result)
sd_mgmt_bcast_get_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [bool_value, None], None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidSdOperation, None], None, ),  # 1
)


class sd_mgmt_reg_set_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane
     - tx_dir
     - reg
     - data

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None, tx_dir=None, reg=None, data=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane
        self.tx_dir = tx_dir
        self.reg = reg
        self.data = data

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.tx_dir = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.reg = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.data = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_mgmt_reg_set_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        if self.tx_dir is not None:
            oprot.writeFieldBegin('tx_dir', TType.BOOL, 4)
            oprot.writeBool(self.tx_dir)
            oprot.writeFieldEnd()
        if self.reg is not None:
            oprot.writeFieldBegin('reg', TType.I32, 5)
            oprot.writeI32(self.reg)
            oprot.writeFieldEnd()
        if self.data is not None:
            oprot.writeFieldBegin('data', TType.I32, 6)
            oprot.writeI32(self.data)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_mgmt_reg_set_args)
sd_mgmt_reg_set_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
    (4, TType.BOOL, 'tx_dir', None, None, ),  # 4
    (5, TType.I32, 'reg', None, None, ),  # 5
    (6, TType.I32, 'data', None, None, ),  # 6
)


class sd_mgmt_reg_set_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidSdOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_mgmt_reg_set_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_mgmt_reg_set_result)
sd_mgmt_reg_set_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidSdOperation, None], None, ),  # 1
)


class sd_mgmt_reg_get_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane
     - tx_dir
     - reg

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None, tx_dir=None, reg=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane
        self.tx_dir = tx_dir
        self.reg = reg

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.tx_dir = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.reg = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_mgmt_reg_get_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        if self.tx_dir is not None:
            oprot.writeFieldBegin('tx_dir', TType.BOOL, 4)
            oprot.writeBool(self.tx_dir)
            oprot.writeFieldEnd()
        if self.reg is not None:
            oprot.writeFieldBegin('reg', TType.I32, 5)
            oprot.writeI32(self.reg)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_mgmt_reg_get_args)
sd_mgmt_reg_get_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
    (4, TType.BOOL, 'tx_dir', None, None, ),  # 4
    (5, TType.I32, 'reg', None, None, ),  # 5
)


class sd_mgmt_reg_get_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = i32_value()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidSdOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_mgmt_reg_get_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_mgmt_reg_get_result)
sd_mgmt_reg_get_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [i32_value, None], None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidSdOperation, None], None, ),  # 1
)


class sd_mgmt_uc_int_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane
     - tx_dir
     - interrupt
     - int_data

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None, tx_dir=None, interrupt=None, int_data=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane
        self.tx_dir = tx_dir
        self.interrupt = interrupt
        self.int_data = int_data

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.tx_dir = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.interrupt = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.int_data = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_mgmt_uc_int_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        if self.tx_dir is not None:
            oprot.writeFieldBegin('tx_dir', TType.BOOL, 4)
            oprot.writeBool(self.tx_dir)
            oprot.writeFieldEnd()
        if self.interrupt is not None:
            oprot.writeFieldBegin('interrupt', TType.I32, 5)
            oprot.writeI32(self.interrupt)
            oprot.writeFieldEnd()
        if self.int_data is not None:
            oprot.writeFieldBegin('int_data', TType.I32, 6)
            oprot.writeI32(self.int_data)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_mgmt_uc_int_args)
sd_mgmt_uc_int_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
    (4, TType.BOOL, 'tx_dir', None, None, ),  # 4
    (5, TType.I32, 'interrupt', None, None, ),  # 5
    (6, TType.I32, 'int_data', None, None, ),  # 6
)


class sd_mgmt_uc_int_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = i32_value()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_mgmt_uc_int_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_mgmt_uc_int_result)
sd_mgmt_uc_int_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [i32_value, None], None, ),  # 0
)


class sd_port_lane_map_set_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - tx_l0
     - tx_l1
     - tx_l2
     - tx_l3
     - rx_l0
     - rx_l1
     - rx_l2
     - rx_l3

    """


    def __init__(self, dev_id=None, dev_port=None, tx_l0=None, tx_l1=None, tx_l2=None, tx_l3=None, rx_l0=None, rx_l1=None, rx_l2=None, rx_l3=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.tx_l0 = tx_l0
        self.tx_l1 = tx_l1
        self.tx_l2 = tx_l2
        self.tx_l3 = tx_l3
        self.rx_l0 = rx_l0
        self.rx_l1 = rx_l1
        self.rx_l2 = rx_l2
        self.rx_l3 = rx_l3

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.tx_l0 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.tx_l1 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.tx_l2 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.tx_l3 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.rx_l0 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.rx_l1 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.rx_l2 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.rx_l3 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_port_lane_map_set_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.tx_l0 is not None:
            oprot.writeFieldBegin('tx_l0', TType.I32, 3)
            oprot.writeI32(self.tx_l0)
            oprot.writeFieldEnd()
        if self.tx_l1 is not None:
            oprot.writeFieldBegin('tx_l1', TType.I32, 4)
            oprot.writeI32(self.tx_l1)
            oprot.writeFieldEnd()
        if self.tx_l2 is not None:
            oprot.writeFieldBegin('tx_l2', TType.I32, 5)
            oprot.writeI32(self.tx_l2)
            oprot.writeFieldEnd()
        if self.tx_l3 is not None:
            oprot.writeFieldBegin('tx_l3', TType.I32, 6)
            oprot.writeI32(self.tx_l3)
            oprot.writeFieldEnd()
        if self.rx_l0 is not None:
            oprot.writeFieldBegin('rx_l0', TType.I32, 7)
            oprot.writeI32(self.rx_l0)
            oprot.writeFieldEnd()
        if self.rx_l1 is not None:
            oprot.writeFieldBegin('rx_l1', TType.I32, 8)
            oprot.writeI32(self.rx_l1)
            oprot.writeFieldEnd()
        if self.rx_l2 is not None:
            oprot.writeFieldBegin('rx_l2', TType.I32, 9)
            oprot.writeI32(self.rx_l2)
            oprot.writeFieldEnd()
        if self.rx_l3 is not None:
            oprot.writeFieldBegin('rx_l3', TType.I32, 10)
            oprot.writeI32(self.rx_l3)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_port_lane_map_set_args)
sd_port_lane_map_set_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'tx_l0', None, None, ),  # 3
    (4, TType.I32, 'tx_l1', None, None, ),  # 4
    (5, TType.I32, 'tx_l2', None, None, ),  # 5
    (6, TType.I32, 'tx_l3', None, None, ),  # 6
    (7, TType.I32, 'rx_l0', None, None, ),  # 7
    (8, TType.I32, 'rx_l1', None, None, ),  # 8
    (9, TType.I32, 'rx_l2', None, None, ),  # 9
    (10, TType.I32, 'rx_l3', None, None, ),  # 10
)


class sd_port_lane_map_set_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_port_lane_map_set_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_port_lane_map_set_result)
sd_port_lane_map_set_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sd_port_lane_map_get_args(object):
    """
    Attributes:
     - dev_id
     - dev_port

    """


    def __init__(self, dev_id=None, dev_port=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_port_lane_map_get_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_port_lane_map_get_args)
sd_port_lane_map_get_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
)


class sd_port_lane_map_get_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = lane_map()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidSdOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_port_lane_map_get_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_port_lane_map_get_result)
sd_port_lane_map_get_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [lane_map, None], None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidSdOperation, None], None, ),  # 1
)


class sd_dev_rx_eq_cal_rr_set_args(object):
    """
    Attributes:
     - dev_id
     - fine_tune_lane_cnt

    """


    def __init__(self, dev_id=None, fine_tune_lane_cnt=None,):
        self.dev_id = dev_id
        self.fine_tune_lane_cnt = fine_tune_lane_cnt

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.fine_tune_lane_cnt = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_dev_rx_eq_cal_rr_set_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.fine_tune_lane_cnt is not None:
            oprot.writeFieldBegin('fine_tune_lane_cnt', TType.I32, 2)
            oprot.writeI32(self.fine_tune_lane_cnt)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_dev_rx_eq_cal_rr_set_args)
sd_dev_rx_eq_cal_rr_set_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'fine_tune_lane_cnt', None, None, ),  # 2
)


class sd_dev_rx_eq_cal_rr_set_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidSdOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_dev_rx_eq_cal_rr_set_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_dev_rx_eq_cal_rr_set_result)
sd_dev_rx_eq_cal_rr_set_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidSdOperation, None], None, ),  # 1
)


class sd_dev_rx_eq_cal_rr_get_args(object):
    """
    Attributes:
     - dev_id

    """


    def __init__(self, dev_id=None,):
        self.dev_id = dev_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_dev_rx_eq_cal_rr_get_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_dev_rx_eq_cal_rr_get_args)
sd_dev_rx_eq_cal_rr_get_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
)


class sd_dev_rx_eq_cal_rr_get_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = i32_value()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidSdOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_dev_rx_eq_cal_rr_get_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_dev_rx_eq_cal_rr_get_result)
sd_dev_rx_eq_cal_rr_get_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [i32_value, None], None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidSdOperation, None], None, ),  # 1
)


class sd_tx_pll_clksel_set_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane
     - clk_source

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None, clk_source=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane
        self.clk_source = clk_source

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.clk_source = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_tx_pll_clksel_set_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        if self.clk_source is not None:
            oprot.writeFieldBegin('clk_source', TType.I32, 4)
            oprot.writeI32(self.clk_source)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_tx_pll_clksel_set_args)
sd_tx_pll_clksel_set_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
    (4, TType.I32, 'clk_source', None, None, ),  # 4
)


class sd_tx_pll_clksel_set_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidSdOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_tx_pll_clksel_set_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_tx_pll_clksel_set_result)
sd_tx_pll_clksel_set_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidSdOperation, None], None, ),  # 1
)


class sd_tx_pll_clksel_get_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_tx_pll_clksel_get_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_tx_pll_clksel_get_args)
sd_tx_pll_clksel_get_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
)


class sd_tx_pll_clksel_get_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = i32_value()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidSdOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_tx_pll_clksel_get_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_tx_pll_clksel_get_result)
sd_tx_pll_clksel_get_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [i32_value, None], None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidSdOperation, None], None, ),  # 1
)


class sd_lane_init_run_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane
     - line_rate
     - init_rx
     - init_tx
     - tx_drv_en
     - phase_cal

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None, line_rate=None, init_rx=None, init_tx=None, tx_drv_en=None, phase_cal=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane
        self.line_rate = line_rate
        self.init_rx = init_rx
        self.init_tx = init_tx
        self.tx_drv_en = tx_drv_en
        self.phase_cal = phase_cal

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.line_rate = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.init_rx = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.init_tx = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.tx_drv_en = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BOOL:
                    self.phase_cal = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_lane_init_run_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        if self.line_rate is not None:
            oprot.writeFieldBegin('line_rate', TType.I32, 4)
            oprot.writeI32(self.line_rate)
            oprot.writeFieldEnd()
        if self.init_rx is not None:
            oprot.writeFieldBegin('init_rx', TType.BOOL, 5)
            oprot.writeBool(self.init_rx)
            oprot.writeFieldEnd()
        if self.init_tx is not None:
            oprot.writeFieldBegin('init_tx', TType.BOOL, 6)
            oprot.writeBool(self.init_tx)
            oprot.writeFieldEnd()
        if self.tx_drv_en is not None:
            oprot.writeFieldBegin('tx_drv_en', TType.BOOL, 7)
            oprot.writeBool(self.tx_drv_en)
            oprot.writeFieldEnd()
        if self.phase_cal is not None:
            oprot.writeFieldBegin('phase_cal', TType.BOOL, 8)
            oprot.writeBool(self.phase_cal)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_lane_init_run_args)
sd_lane_init_run_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
    (4, TType.I32, 'line_rate', None, None, ),  # 4
    (5, TType.BOOL, 'init_rx', None, None, ),  # 5
    (6, TType.BOOL, 'init_tx', None, None, ),  # 6
    (7, TType.BOOL, 'tx_drv_en', None, None, ),  # 7
    (8, TType.BOOL, 'phase_cal', None, None, ),  # 8
)


class sd_lane_init_run_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_lane_init_run_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_lane_init_run_result)
sd_lane_init_run_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sd_tx_pll_lock_get_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_tx_pll_lock_get_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_tx_pll_lock_get_args)
sd_tx_pll_lock_get_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
)


class sd_tx_pll_lock_get_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = bool_value()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidSdOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_tx_pll_lock_get_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_tx_pll_lock_get_result)
sd_tx_pll_lock_get_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [bool_value, None], None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidSdOperation, None], None, ),  # 1
)


class sd_rx_cdr_lock_get_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_cdr_lock_get_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_cdr_lock_get_args)
sd_rx_cdr_lock_get_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
)


class sd_rx_cdr_lock_get_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = bool_value()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidSdOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_cdr_lock_get_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_cdr_lock_get_result)
sd_rx_cdr_lock_get_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [bool_value, None], None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidSdOperation, None], None, ),  # 1
)


class sd_tx_pll_status_get_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_tx_pll_status_get_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_tx_pll_status_get_args)
sd_tx_pll_status_get_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
)


class sd_tx_pll_status_get_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = pll_status()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidSdOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_tx_pll_status_get_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_tx_pll_status_get_result)
sd_tx_pll_status_get_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [pll_status, None], None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidSdOperation, None], None, ),  # 1
)


class sd_rx_cdr_status_get_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_cdr_status_get_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_cdr_status_get_args)
sd_rx_cdr_status_get_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
)


class sd_rx_cdr_status_get_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = pll_status()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidSdOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_cdr_status_get_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_cdr_status_get_result)
sd_rx_cdr_status_get_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [pll_status, None], None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidSdOperation, None], None, ),  # 1
)


class sd_lane_loopback_set_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane
     - loopback_mode

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None, loopback_mode=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane
        self.loopback_mode = loopback_mode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.loopback_mode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_lane_loopback_set_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        if self.loopback_mode is not None:
            oprot.writeFieldBegin('loopback_mode', TType.I32, 4)
            oprot.writeI32(self.loopback_mode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_lane_loopback_set_args)
sd_lane_loopback_set_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
    (4, TType.I32, 'loopback_mode', None, None, ),  # 4
)


class sd_lane_loopback_set_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidSdOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_lane_loopback_set_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_lane_loopback_set_result)
sd_lane_loopback_set_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidSdOperation, None], None, ),  # 1
)


class sd_lane_loopback_get_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_lane_loopback_get_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_lane_loopback_get_args)
sd_lane_loopback_get_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
)


class sd_lane_loopback_get_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = i32_value()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidSdOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_lane_loopback_get_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_lane_loopback_get_result)
sd_lane_loopback_get_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [i32_value, None], None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidSdOperation, None], None, ),  # 1
)


class sd_tx_en_set_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane
     - tx_en

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None, tx_en=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane
        self.tx_en = tx_en

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.tx_en = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_tx_en_set_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        if self.tx_en is not None:
            oprot.writeFieldBegin('tx_en', TType.BOOL, 4)
            oprot.writeBool(self.tx_en)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_tx_en_set_args)
sd_tx_en_set_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
    (4, TType.BOOL, 'tx_en', None, None, ),  # 4
)


class sd_tx_en_set_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidSdOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_tx_en_set_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_tx_en_set_result)
sd_tx_en_set_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidSdOperation, None], None, ),  # 1
)


class sd_tx_en_get_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_tx_en_get_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_tx_en_get_args)
sd_tx_en_get_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
)


class sd_tx_en_get_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = bool_value()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidSdOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_tx_en_get_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_tx_en_get_result)
sd_tx_en_get_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [bool_value, None], None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidSdOperation, None], None, ),  # 1
)


class sd_tx_drv_en_set_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane
     - tx_en

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None, tx_en=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane
        self.tx_en = tx_en

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.tx_en = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_tx_drv_en_set_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        if self.tx_en is not None:
            oprot.writeFieldBegin('tx_en', TType.BOOL, 4)
            oprot.writeBool(self.tx_en)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_tx_drv_en_set_args)
sd_tx_drv_en_set_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
    (4, TType.BOOL, 'tx_en', None, None, ),  # 4
)


class sd_tx_drv_en_set_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidSdOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_tx_drv_en_set_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_tx_drv_en_set_result)
sd_tx_drv_en_set_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidSdOperation, None], None, ),  # 1
)


class sd_tx_drv_en_get_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_tx_drv_en_get_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_tx_drv_en_get_args)
sd_tx_drv_en_get_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
)


class sd_tx_drv_en_get_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = bool_value()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidSdOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_tx_drv_en_get_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_tx_drv_en_get_result)
sd_tx_drv_en_get_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [bool_value, None], None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidSdOperation, None], None, ),  # 1
)


class sd_tx_drv_inv_set_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane
     - inv

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None, inv=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane
        self.inv = inv

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.inv = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_tx_drv_inv_set_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        if self.inv is not None:
            oprot.writeFieldBegin('inv', TType.BOOL, 4)
            oprot.writeBool(self.inv)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_tx_drv_inv_set_args)
sd_tx_drv_inv_set_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
    (4, TType.BOOL, 'inv', None, None, ),  # 4
)


class sd_tx_drv_inv_set_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidSdOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_tx_drv_inv_set_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_tx_drv_inv_set_result)
sd_tx_drv_inv_set_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidSdOperation, None], None, ),  # 1
)


class sd_tx_drv_inv_get_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_tx_drv_inv_get_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_tx_drv_inv_get_args)
sd_tx_drv_inv_get_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
)


class sd_tx_drv_inv_get_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = bool_value()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidSdOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_tx_drv_inv_get_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_tx_drv_inv_get_result)
sd_tx_drv_inv_get_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [bool_value, None], None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidSdOperation, None], None, ),  # 1
)


class sd_tx_drv_attn_is_valid_args(object):
    """
    Attributes:
     - attn_main
     - attn_post
     - attn_pre

    """


    def __init__(self, attn_main=None, attn_post=None, attn_pre=None,):
        self.attn_main = attn_main
        self.attn_post = attn_post
        self.attn_pre = attn_pre

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.attn_main = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.attn_post = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.attn_pre = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_tx_drv_attn_is_valid_args')
        if self.attn_main is not None:
            oprot.writeFieldBegin('attn_main', TType.I32, 1)
            oprot.writeI32(self.attn_main)
            oprot.writeFieldEnd()
        if self.attn_post is not None:
            oprot.writeFieldBegin('attn_post', TType.I32, 2)
            oprot.writeI32(self.attn_post)
            oprot.writeFieldEnd()
        if self.attn_pre is not None:
            oprot.writeFieldBegin('attn_pre', TType.I32, 3)
            oprot.writeI32(self.attn_pre)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_tx_drv_attn_is_valid_args)
sd_tx_drv_attn_is_valid_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'attn_main', None, None, ),  # 1
    (2, TType.I32, 'attn_post', None, None, ),  # 2
    (3, TType.I32, 'attn_pre', None, None, ),  # 3
)


class sd_tx_drv_attn_is_valid_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_tx_drv_attn_is_valid_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_tx_drv_attn_is_valid_result)
sd_tx_drv_attn_is_valid_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sd_tx_drv_attn_set_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane
     - attn_main
     - attn_post
     - attn_pre

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None, attn_main=None, attn_post=None, attn_pre=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane
        self.attn_main = attn_main
        self.attn_post = attn_post
        self.attn_pre = attn_pre

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.attn_main = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.attn_post = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.attn_pre = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_tx_drv_attn_set_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        if self.attn_main is not None:
            oprot.writeFieldBegin('attn_main', TType.I32, 4)
            oprot.writeI32(self.attn_main)
            oprot.writeFieldEnd()
        if self.attn_post is not None:
            oprot.writeFieldBegin('attn_post', TType.I32, 5)
            oprot.writeI32(self.attn_post)
            oprot.writeFieldEnd()
        if self.attn_pre is not None:
            oprot.writeFieldBegin('attn_pre', TType.I32, 6)
            oprot.writeI32(self.attn_pre)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_tx_drv_attn_set_args)
sd_tx_drv_attn_set_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
    (4, TType.I32, 'attn_main', None, None, ),  # 4
    (5, TType.I32, 'attn_post', None, None, ),  # 5
    (6, TType.I32, 'attn_pre', None, None, ),  # 6
)


class sd_tx_drv_attn_set_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_tx_drv_attn_set_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_tx_drv_attn_set_result)
sd_tx_drv_attn_set_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sd_tx_drv_attn_get_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_tx_drv_attn_get_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_tx_drv_attn_get_args)
sd_tx_drv_attn_get_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
)


class sd_tx_drv_attn_get_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = drv_attn()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_tx_drv_attn_get_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_tx_drv_attn_get_result)
sd_tx_drv_attn_get_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [drv_attn, None], None, ),  # 0
)


class sd_tx_drv_amp_set_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane
     - amp_main
     - amp_post
     - amp_pre

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None, amp_main=None, amp_post=None, amp_pre=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane
        self.amp_main = amp_main
        self.amp_post = amp_post
        self.amp_pre = amp_pre

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.amp_main = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.amp_post = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.amp_pre = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_tx_drv_amp_set_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        if self.amp_main is not None:
            oprot.writeFieldBegin('amp_main', TType.I32, 4)
            oprot.writeI32(self.amp_main)
            oprot.writeFieldEnd()
        if self.amp_post is not None:
            oprot.writeFieldBegin('amp_post', TType.I32, 5)
            oprot.writeI32(self.amp_post)
            oprot.writeFieldEnd()
        if self.amp_pre is not None:
            oprot.writeFieldBegin('amp_pre', TType.I32, 6)
            oprot.writeI32(self.amp_pre)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_tx_drv_amp_set_args)
sd_tx_drv_amp_set_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
    (4, TType.I32, 'amp_main', None, None, ),  # 4
    (5, TType.I32, 'amp_post', None, None, ),  # 5
    (6, TType.I32, 'amp_pre', None, None, ),  # 6
)


class sd_tx_drv_amp_set_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_tx_drv_amp_set_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_tx_drv_amp_set_result)
sd_tx_drv_amp_set_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sd_tx_drv_amp_get_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_tx_drv_amp_get_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_tx_drv_amp_get_args)
sd_tx_drv_amp_get_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
)


class sd_tx_drv_amp_get_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = drv_amp()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_tx_drv_amp_get_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_tx_drv_amp_get_result)
sd_tx_drv_amp_get_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [drv_amp, None], None, ),  # 0
)


class sd_tx_drv_status_get_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_tx_drv_status_get_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_tx_drv_status_get_args)
sd_tx_drv_status_get_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
)


class sd_tx_drv_status_get_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = tx_drv_sts()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_tx_drv_status_get_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_tx_drv_status_get_result)
sd_tx_drv_status_get_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [tx_drv_sts, None], None, ),  # 0
)


class sd_rx_en_set_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane
     - rx_en

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None, rx_en=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane
        self.rx_en = rx_en

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.rx_en = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_en_set_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        if self.rx_en is not None:
            oprot.writeFieldBegin('rx_en', TType.BOOL, 4)
            oprot.writeBool(self.rx_en)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_en_set_args)
sd_rx_en_set_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
    (4, TType.BOOL, 'rx_en', None, None, ),  # 4
)


class sd_rx_en_set_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidSdOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_en_set_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_en_set_result)
sd_rx_en_set_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidSdOperation, None], None, ),  # 1
)


class sd_rx_en_get_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_en_get_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_en_get_args)
sd_rx_en_get_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
)


class sd_rx_en_get_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = bool_value()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidSdOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_en_get_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_en_get_result)
sd_rx_en_get_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [bool_value, None], None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidSdOperation, None], None, ),  # 1
)


class sd_rx_afe_inv_set_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane
     - inv_en

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None, inv_en=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane
        self.inv_en = inv_en

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.inv_en = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_afe_inv_set_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        if self.inv_en is not None:
            oprot.writeFieldBegin('inv_en', TType.BOOL, 4)
            oprot.writeBool(self.inv_en)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_afe_inv_set_args)
sd_rx_afe_inv_set_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
    (4, TType.BOOL, 'inv_en', None, None, ),  # 4
)


class sd_rx_afe_inv_set_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidSdOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_afe_inv_set_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_afe_inv_set_result)
sd_rx_afe_inv_set_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidSdOperation, None], None, ),  # 1
)


class sd_rx_afe_inv_get_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_afe_inv_get_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_afe_inv_get_args)
sd_rx_afe_inv_get_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
)


class sd_rx_afe_inv_get_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = bool_value()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidSdOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_afe_inv_get_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_afe_inv_get_result)
sd_rx_afe_inv_get_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [bool_value, None], None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidSdOperation, None], None, ),  # 1
)


class sd_rx_afe_term_set_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane
     - rx_term

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None, rx_term=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane
        self.rx_term = rx_term

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.rx_term = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_afe_term_set_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        if self.rx_term is not None:
            oprot.writeFieldBegin('rx_term', TType.I32, 4)
            oprot.writeI32(self.rx_term)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_afe_term_set_args)
sd_rx_afe_term_set_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
    (4, TType.I32, 'rx_term', None, None, ),  # 4
)


class sd_rx_afe_term_set_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidSdOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_afe_term_set_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_afe_term_set_result)
sd_rx_afe_term_set_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidSdOperation, None], None, ),  # 1
)


class sd_rx_afe_term_get_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_afe_term_get_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_afe_term_get_args)
sd_rx_afe_term_get_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
)


class sd_rx_afe_term_get_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = i32_value()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidSdOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_afe_term_get_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_afe_term_get_result)
sd_rx_afe_term_get_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [i32_value, None], None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidSdOperation, None], None, ),  # 1
)


class sd_rx_afe_los_thres_set_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane
     - rx_los_en
     - rx_los_thres

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None, rx_los_en=None, rx_los_thres=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane
        self.rx_los_en = rx_los_en
        self.rx_los_thres = rx_los_thres

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.rx_los_en = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.rx_los_thres = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_afe_los_thres_set_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        if self.rx_los_en is not None:
            oprot.writeFieldBegin('rx_los_en', TType.BOOL, 4)
            oprot.writeBool(self.rx_los_en)
            oprot.writeFieldEnd()
        if self.rx_los_thres is not None:
            oprot.writeFieldBegin('rx_los_thres', TType.I32, 5)
            oprot.writeI32(self.rx_los_thres)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_afe_los_thres_set_args)
sd_rx_afe_los_thres_set_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
    (4, TType.BOOL, 'rx_los_en', None, None, ),  # 4
    (5, TType.I32, 'rx_los_thres', None, None, ),  # 5
)


class sd_rx_afe_los_thres_set_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidSdOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_afe_los_thres_set_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_afe_los_thres_set_result)
sd_rx_afe_los_thres_set_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidSdOperation, None], None, ),  # 1
)


class sd_rx_afe_los_thres_get_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_afe_los_thres_get_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_afe_los_thres_get_args)
sd_rx_afe_los_thres_get_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
)


class sd_rx_afe_los_thres_get_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = rx_los_cfg()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidSdOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_afe_los_thres_get_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_afe_los_thres_get_result)
sd_rx_afe_los_thres_get_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [rx_los_cfg, None], None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidSdOperation, None], None, ),  # 1
)


class sd_rx_afe_los_get_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_afe_los_get_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_afe_los_get_args)
sd_rx_afe_los_get_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
)


class sd_rx_afe_los_get_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = bool_value()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidSdOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_afe_los_get_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_afe_los_get_result)
sd_rx_afe_los_get_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [bool_value, None], None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidSdOperation, None], None, ),  # 1
)


class sd_rx_eq_cal_busy_get_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane
     - chk_cnt
     - chk_wait

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None, chk_cnt=None, chk_wait=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane
        self.chk_cnt = chk_cnt
        self.chk_wait = chk_wait

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.chk_cnt = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.chk_wait = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_eq_cal_busy_get_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        if self.chk_cnt is not None:
            oprot.writeFieldBegin('chk_cnt', TType.I32, 4)
            oprot.writeI32(self.chk_cnt)
            oprot.writeFieldEnd()
        if self.chk_wait is not None:
            oprot.writeFieldBegin('chk_wait', TType.I32, 5)
            oprot.writeI32(self.chk_wait)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_eq_cal_busy_get_args)
sd_rx_eq_cal_busy_get_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
    (4, TType.I32, 'chk_cnt', None, None, ),  # 4
    (5, TType.I32, 'chk_wait', None, None, ),  # 5
)


class sd_rx_eq_cal_busy_get_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = bool_value()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_eq_cal_busy_get_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_eq_cal_busy_get_result)
sd_rx_eq_cal_busy_get_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [bool_value, None], None, ),  # 0
)


class sd_rx_eq_ctle_set_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane
     - ctle_dc
     - ctle_lf
     - ctle_hf
     - ctle_bw

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None, ctle_dc=None, ctle_lf=None, ctle_hf=None, ctle_bw=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane
        self.ctle_dc = ctle_dc
        self.ctle_lf = ctle_lf
        self.ctle_hf = ctle_hf
        self.ctle_bw = ctle_bw

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.ctle_dc = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.ctle_lf = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.ctle_hf = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.ctle_bw = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_eq_ctle_set_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        if self.ctle_dc is not None:
            oprot.writeFieldBegin('ctle_dc', TType.I32, 4)
            oprot.writeI32(self.ctle_dc)
            oprot.writeFieldEnd()
        if self.ctle_lf is not None:
            oprot.writeFieldBegin('ctle_lf', TType.I32, 5)
            oprot.writeI32(self.ctle_lf)
            oprot.writeFieldEnd()
        if self.ctle_hf is not None:
            oprot.writeFieldBegin('ctle_hf', TType.I32, 6)
            oprot.writeI32(self.ctle_hf)
            oprot.writeFieldEnd()
        if self.ctle_bw is not None:
            oprot.writeFieldBegin('ctle_bw', TType.I32, 7)
            oprot.writeI32(self.ctle_bw)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_eq_ctle_set_args)
sd_rx_eq_ctle_set_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
    (4, TType.I32, 'ctle_dc', None, None, ),  # 4
    (5, TType.I32, 'ctle_lf', None, None, ),  # 5
    (6, TType.I32, 'ctle_hf', None, None, ),  # 6
    (7, TType.I32, 'ctle_bw', None, None, ),  # 7
)


class sd_rx_eq_ctle_set_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_eq_ctle_set_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_eq_ctle_set_result)
sd_rx_eq_ctle_set_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sd_rx_eq_ctle_get_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_eq_ctle_get_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_eq_ctle_get_args)
sd_rx_eq_ctle_get_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
)


class sd_rx_eq_ctle_get_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = rx_eq_ctle()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_eq_ctle_get_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_eq_ctle_get_result)
sd_rx_eq_ctle_get_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [rx_eq_ctle, None], None, ),  # 0
)


class sd_rx_eq_dfe_adv_set_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane
     - dfe_tap_num
     - dfe_tap_val

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None, dfe_tap_num=None, dfe_tap_val=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane
        self.dfe_tap_num = dfe_tap_num
        self.dfe_tap_val = dfe_tap_val

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.dfe_tap_num = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.dfe_tap_val = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_eq_dfe_adv_set_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        if self.dfe_tap_num is not None:
            oprot.writeFieldBegin('dfe_tap_num', TType.I32, 4)
            oprot.writeI32(self.dfe_tap_num)
            oprot.writeFieldEnd()
        if self.dfe_tap_val is not None:
            oprot.writeFieldBegin('dfe_tap_val', TType.I32, 5)
            oprot.writeI32(self.dfe_tap_val)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_eq_dfe_adv_set_args)
sd_rx_eq_dfe_adv_set_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
    (4, TType.I32, 'dfe_tap_num', None, None, ),  # 4
    (5, TType.I32, 'dfe_tap_val', None, None, ),  # 5
)


class sd_rx_eq_dfe_adv_set_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_eq_dfe_adv_set_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_eq_dfe_adv_set_result)
sd_rx_eq_dfe_adv_set_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sd_rx_eq_dfe_adv_get_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane
     - dfe_tap_num

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None, dfe_tap_num=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane
        self.dfe_tap_num = dfe_tap_num

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.dfe_tap_num = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_eq_dfe_adv_get_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        if self.dfe_tap_num is not None:
            oprot.writeFieldBegin('dfe_tap_num', TType.I32, 4)
            oprot.writeI32(self.dfe_tap_num)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_eq_dfe_adv_get_args)
sd_rx_eq_dfe_adv_get_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
    (4, TType.I32, 'dfe_tap_num', None, None, ),  # 4
)


class sd_rx_eq_dfe_adv_get_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = i32_value()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_eq_dfe_adv_get_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_eq_dfe_adv_get_result)
sd_rx_eq_dfe_adv_get_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [i32_value, None], None, ),  # 0
)


class sd_rx_eq_dfe_set_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane
     - dfe_gain
     - dfe_tap1
     - dfe_tap2
     - dfe_tap3
     - dfe_tap4

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None, dfe_gain=None, dfe_tap1=None, dfe_tap2=None, dfe_tap3=None, dfe_tap4=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane
        self.dfe_gain = dfe_gain
        self.dfe_tap1 = dfe_tap1
        self.dfe_tap2 = dfe_tap2
        self.dfe_tap3 = dfe_tap3
        self.dfe_tap4 = dfe_tap4

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.dfe_gain = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.dfe_tap1 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.dfe_tap2 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.dfe_tap3 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.dfe_tap4 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_eq_dfe_set_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        if self.dfe_gain is not None:
            oprot.writeFieldBegin('dfe_gain', TType.I32, 4)
            oprot.writeI32(self.dfe_gain)
            oprot.writeFieldEnd()
        if self.dfe_tap1 is not None:
            oprot.writeFieldBegin('dfe_tap1', TType.I32, 5)
            oprot.writeI32(self.dfe_tap1)
            oprot.writeFieldEnd()
        if self.dfe_tap2 is not None:
            oprot.writeFieldBegin('dfe_tap2', TType.I32, 6)
            oprot.writeI32(self.dfe_tap2)
            oprot.writeFieldEnd()
        if self.dfe_tap3 is not None:
            oprot.writeFieldBegin('dfe_tap3', TType.I32, 7)
            oprot.writeI32(self.dfe_tap3)
            oprot.writeFieldEnd()
        if self.dfe_tap4 is not None:
            oprot.writeFieldBegin('dfe_tap4', TType.I32, 8)
            oprot.writeI32(self.dfe_tap4)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_eq_dfe_set_args)
sd_rx_eq_dfe_set_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
    (4, TType.I32, 'dfe_gain', None, None, ),  # 4
    (5, TType.I32, 'dfe_tap1', None, None, ),  # 5
    (6, TType.I32, 'dfe_tap2', None, None, ),  # 6
    (7, TType.I32, 'dfe_tap3', None, None, ),  # 7
    (8, TType.I32, 'dfe_tap4', None, None, ),  # 8
)


class sd_rx_eq_dfe_set_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_eq_dfe_set_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_eq_dfe_set_result)
sd_rx_eq_dfe_set_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sd_rx_eq_dfe_get_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_eq_dfe_get_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_eq_dfe_get_args)
sd_rx_eq_dfe_get_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
)


class sd_rx_eq_dfe_get_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = dfe_taps()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_eq_dfe_get_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_eq_dfe_get_result)
sd_rx_eq_dfe_get_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [dfe_taps, None], None, ),  # 0
)


class sd_rx_eq_cal_param_set_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane
     - ctle_dc_hint
     - dfe_gain_range
     - pcal_loop_cnt

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None, ctle_dc_hint=None, dfe_gain_range=None, pcal_loop_cnt=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane
        self.ctle_dc_hint = ctle_dc_hint
        self.dfe_gain_range = dfe_gain_range
        self.pcal_loop_cnt = pcal_loop_cnt

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.ctle_dc_hint = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.dfe_gain_range = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.pcal_loop_cnt = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_eq_cal_param_set_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        if self.ctle_dc_hint is not None:
            oprot.writeFieldBegin('ctle_dc_hint', TType.I32, 4)
            oprot.writeI32(self.ctle_dc_hint)
            oprot.writeFieldEnd()
        if self.dfe_gain_range is not None:
            oprot.writeFieldBegin('dfe_gain_range', TType.I32, 5)
            oprot.writeI32(self.dfe_gain_range)
            oprot.writeFieldEnd()
        if self.pcal_loop_cnt is not None:
            oprot.writeFieldBegin('pcal_loop_cnt', TType.I32, 6)
            oprot.writeI32(self.pcal_loop_cnt)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_eq_cal_param_set_args)
sd_rx_eq_cal_param_set_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
    (4, TType.I32, 'ctle_dc_hint', None, None, ),  # 4
    (5, TType.I32, 'dfe_gain_range', None, None, ),  # 5
    (6, TType.I32, 'pcal_loop_cnt', None, None, ),  # 6
)


class sd_rx_eq_cal_param_set_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_eq_cal_param_set_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_eq_cal_param_set_result)
sd_rx_eq_cal_param_set_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sd_rx_eq_cal_param_get_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_eq_cal_param_get_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_eq_cal_param_get_args)
sd_rx_eq_cal_param_get_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
)


class sd_rx_eq_cal_param_get_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = eq_cal_params()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_eq_cal_param_get_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_eq_cal_param_get_result)
sd_rx_eq_cal_param_get_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [eq_cal_params, None], None, ),  # 0
)


class sd_rx_eq_cal_adv_run_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane
     - cal_cmd
     - ctle_cal_cfg
     - dfe_fixed

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None, cal_cmd=None, ctle_cal_cfg=None, dfe_fixed=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane
        self.cal_cmd = cal_cmd
        self.ctle_cal_cfg = ctle_cal_cfg
        self.dfe_fixed = dfe_fixed

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.cal_cmd = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.ctle_cal_cfg = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.dfe_fixed = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_eq_cal_adv_run_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        if self.cal_cmd is not None:
            oprot.writeFieldBegin('cal_cmd', TType.I32, 4)
            oprot.writeI32(self.cal_cmd)
            oprot.writeFieldEnd()
        if self.ctle_cal_cfg is not None:
            oprot.writeFieldBegin('ctle_cal_cfg', TType.I32, 5)
            oprot.writeI32(self.ctle_cal_cfg)
            oprot.writeFieldEnd()
        if self.dfe_fixed is not None:
            oprot.writeFieldBegin('dfe_fixed', TType.I32, 6)
            oprot.writeI32(self.dfe_fixed)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_eq_cal_adv_run_args)
sd_rx_eq_cal_adv_run_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
    (4, TType.I32, 'cal_cmd', None, None, ),  # 4
    (5, TType.I32, 'ctle_cal_cfg', None, None, ),  # 5
    (6, TType.I32, 'dfe_fixed', None, None, ),  # 6
)


class sd_rx_eq_cal_adv_run_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_eq_cal_adv_run_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_eq_cal_adv_run_result)
sd_rx_eq_cal_adv_run_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sd_rx_eq_cal_eye_get_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_eq_cal_eye_get_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_eq_cal_eye_get_args)
sd_rx_eq_cal_eye_get_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
)


class sd_rx_eq_cal_eye_get_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = i32_value()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_eq_cal_eye_get_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_eq_cal_eye_get_result)
sd_rx_eq_cal_eye_get_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [i32_value, None], None, ),  # 0
)


class sd_rx_eq_ical_run_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_eq_ical_run_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_eq_ical_run_args)
sd_rx_eq_ical_run_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
)


class sd_rx_eq_ical_run_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_eq_ical_run_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_eq_ical_run_result)
sd_rx_eq_ical_run_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sd_rx_eq_ical_eye_get_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane
     - cal_good_thres

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None, cal_good_thres=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane
        self.cal_good_thres = cal_good_thres

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.cal_good_thres = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_eq_ical_eye_get_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        if self.cal_good_thres is not None:
            oprot.writeFieldBegin('cal_good_thres', TType.I32, 4)
            oprot.writeI32(self.cal_good_thres)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_eq_ical_eye_get_args)
sd_rx_eq_ical_eye_get_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
    (4, TType.I32, 'cal_good_thres', None, None, ),  # 4
)


class sd_rx_eq_ical_eye_get_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ical_result()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_eq_ical_eye_get_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_eq_ical_eye_get_result)
sd_rx_eq_ical_eye_get_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ical_result, None], None, ),  # 0
)


class sd_rx_eq_pcal_run_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane
     - cal_cont

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None, cal_cont=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane
        self.cal_cont = cal_cont

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.cal_cont = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_eq_pcal_run_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        if self.cal_cont is not None:
            oprot.writeFieldBegin('cal_cont', TType.I32, 4)
            oprot.writeI32(self.cal_cont)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_eq_pcal_run_args)
sd_rx_eq_pcal_run_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
    (4, TType.I32, 'cal_cont', None, None, ),  # 4
)


class sd_rx_eq_pcal_run_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_eq_pcal_run_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_eq_pcal_run_result)
sd_rx_eq_pcal_run_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sd_rx_eq_status_get_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_eq_status_get_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_eq_status_get_args)
sd_rx_eq_status_get_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
)


class sd_rx_eq_status_get_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = rx_eq_status()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_eq_status_get_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_eq_status_get_result)
sd_rx_eq_status_get_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [rx_eq_status, None], None, ),  # 0
)


class sd_rx_eye_offset_set_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane
     - offset_en
     - pos_x
     - pos_y

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None, offset_en=None, pos_x=None, pos_y=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane
        self.offset_en = offset_en
        self.pos_x = pos_x
        self.pos_y = pos_y

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.offset_en = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.pos_x = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.pos_y = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_eye_offset_set_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        if self.offset_en is not None:
            oprot.writeFieldBegin('offset_en', TType.I32, 4)
            oprot.writeI32(self.offset_en)
            oprot.writeFieldEnd()
        if self.pos_x is not None:
            oprot.writeFieldBegin('pos_x', TType.I32, 5)
            oprot.writeI32(self.pos_x)
            oprot.writeFieldEnd()
        if self.pos_y is not None:
            oprot.writeFieldBegin('pos_y', TType.I32, 6)
            oprot.writeI32(self.pos_y)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_eye_offset_set_args)
sd_rx_eye_offset_set_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
    (4, TType.I32, 'offset_en', None, None, ),  # 4
    (5, TType.I32, 'pos_x', None, None, ),  # 5
    (6, TType.I32, 'pos_y', None, None, ),  # 6
)


class sd_rx_eye_offset_set_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_eye_offset_set_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_eye_offset_set_result)
sd_rx_eye_offset_set_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sd_rx_eye_get_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane
     - meas_mode
     - meas_ber

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None, meas_mode=None, meas_ber=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane
        self.meas_mode = meas_mode
        self.meas_ber = meas_ber

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.meas_mode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.meas_ber = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_eye_get_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        if self.meas_mode is not None:
            oprot.writeFieldBegin('meas_mode', TType.I32, 4)
            oprot.writeI32(self.meas_mode)
            oprot.writeFieldEnd()
        if self.meas_ber is not None:
            oprot.writeFieldBegin('meas_ber', TType.I32, 5)
            oprot.writeI32(self.meas_ber)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_eye_get_args)
sd_rx_eye_get_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
    (4, TType.I32, 'meas_mode', None, None, ),  # 4
    (5, TType.I32, 'meas_ber', None, None, ),  # 5
)


class sd_rx_eye_get_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = i32_value()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_eye_get_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_eye_get_result)
sd_rx_eye_get_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [i32_value, None], None, ),  # 0
)


class sd_rx_eye_3d_get_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane
     - meas_ber

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None, meas_ber=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane
        self.meas_ber = meas_ber

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.meas_ber = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_eye_3d_get_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        if self.meas_ber is not None:
            oprot.writeFieldBegin('meas_ber', TType.I32, 4)
            oprot.writeI32(self.meas_ber)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_eye_3d_get_args)
sd_rx_eye_3d_get_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
    (4, TType.I32, 'meas_ber', None, None, ),  # 4
)


class sd_rx_eye_3d_get_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = i32_value()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_eye_3d_get_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_eye_3d_get_result)
sd_rx_eye_3d_get_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [i32_value, None], None, ),  # 0
)


class sd_tx_err_inj_set_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane
     - num_bits

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None, num_bits=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane
        self.num_bits = num_bits

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.num_bits = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_tx_err_inj_set_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        if self.num_bits is not None:
            oprot.writeFieldBegin('num_bits', TType.I32, 4)
            oprot.writeI32(self.num_bits)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_tx_err_inj_set_args)
sd_tx_err_inj_set_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
    (4, TType.I32, 'num_bits', None, None, ),  # 4
)


class sd_tx_err_inj_set_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_tx_err_inj_set_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_tx_err_inj_set_result)
sd_tx_err_inj_set_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sd_rx_err_inj_set_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane
     - num_bits

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None, num_bits=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane
        self.num_bits = num_bits

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.num_bits = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_err_inj_set_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        if self.num_bits is not None:
            oprot.writeFieldBegin('num_bits', TType.I32, 4)
            oprot.writeI32(self.num_bits)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_err_inj_set_args)
sd_rx_err_inj_set_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
    (4, TType.I32, 'num_bits', None, None, ),  # 4
)


class sd_rx_err_inj_set_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_err_inj_set_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_err_inj_set_result)
sd_rx_err_inj_set_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sd_tx_patsel_set_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane
     - tx_patsel

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None, tx_patsel=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane
        self.tx_patsel = tx_patsel

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.tx_patsel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_tx_patsel_set_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        if self.tx_patsel is not None:
            oprot.writeFieldBegin('tx_patsel', TType.I32, 4)
            oprot.writeI32(self.tx_patsel)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_tx_patsel_set_args)
sd_tx_patsel_set_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
    (4, TType.I32, 'tx_patsel', None, None, ),  # 4
)


class sd_tx_patsel_set_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_tx_patsel_set_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_tx_patsel_set_result)
sd_tx_patsel_set_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sd_tx_patsel_get_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_tx_patsel_get_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_tx_patsel_get_args)
sd_tx_patsel_get_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
)


class sd_tx_patsel_get_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = i32_value()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_tx_patsel_get_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_tx_patsel_get_result)
sd_tx_patsel_get_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [i32_value, None], None, ),  # 0
)


class sd_rx_patsel_set_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane
     - rx_patsel

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None, rx_patsel=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane
        self.rx_patsel = rx_patsel

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.rx_patsel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_patsel_set_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        if self.rx_patsel is not None:
            oprot.writeFieldBegin('rx_patsel', TType.I32, 4)
            oprot.writeI32(self.rx_patsel)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_patsel_set_args)
sd_rx_patsel_set_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
    (4, TType.I32, 'rx_patsel', None, None, ),  # 4
)


class sd_rx_patsel_set_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_patsel_set_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_patsel_set_result)
sd_rx_patsel_set_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sd_rx_patsel_get_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_patsel_get_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_patsel_get_args)
sd_rx_patsel_get_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
)


class sd_rx_patsel_get_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = i32_value()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_patsel_get_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_patsel_get_result)
sd_rx_patsel_get_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [i32_value, None], None, ),  # 0
)


class sd_rx_err_cnt_get_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_err_cnt_get_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_err_cnt_get_args)
sd_rx_err_cnt_get_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
)


class sd_rx_err_cnt_get_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = i32_value()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_err_cnt_get_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_err_cnt_get_result)
sd_rx_err_cnt_get_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [i32_value, None], None, ),  # 0
)


class sd_tx_fixed_pat_set_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane
     - tx_fixed_pat_0
     - tx_fixed_pat_1
     - tx_fixed_pat_2
     - tx_fixed_pat_3

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None, tx_fixed_pat_0=None, tx_fixed_pat_1=None, tx_fixed_pat_2=None, tx_fixed_pat_3=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane
        self.tx_fixed_pat_0 = tx_fixed_pat_0
        self.tx_fixed_pat_1 = tx_fixed_pat_1
        self.tx_fixed_pat_2 = tx_fixed_pat_2
        self.tx_fixed_pat_3 = tx_fixed_pat_3

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.tx_fixed_pat_0 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.tx_fixed_pat_1 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.tx_fixed_pat_2 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.tx_fixed_pat_3 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_tx_fixed_pat_set_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        if self.tx_fixed_pat_0 is not None:
            oprot.writeFieldBegin('tx_fixed_pat_0', TType.I32, 4)
            oprot.writeI32(self.tx_fixed_pat_0)
            oprot.writeFieldEnd()
        if self.tx_fixed_pat_1 is not None:
            oprot.writeFieldBegin('tx_fixed_pat_1', TType.I32, 5)
            oprot.writeI32(self.tx_fixed_pat_1)
            oprot.writeFieldEnd()
        if self.tx_fixed_pat_2 is not None:
            oprot.writeFieldBegin('tx_fixed_pat_2', TType.I32, 6)
            oprot.writeI32(self.tx_fixed_pat_2)
            oprot.writeFieldEnd()
        if self.tx_fixed_pat_3 is not None:
            oprot.writeFieldBegin('tx_fixed_pat_3', TType.I32, 7)
            oprot.writeI32(self.tx_fixed_pat_3)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_tx_fixed_pat_set_args)
sd_tx_fixed_pat_set_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
    (4, TType.I32, 'tx_fixed_pat_0', None, None, ),  # 4
    (5, TType.I32, 'tx_fixed_pat_1', None, None, ),  # 5
    (6, TType.I32, 'tx_fixed_pat_2', None, None, ),  # 6
    (7, TType.I32, 'tx_fixed_pat_3', None, None, ),  # 7
)


class sd_tx_fixed_pat_set_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_tx_fixed_pat_set_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_tx_fixed_pat_set_result)
sd_tx_fixed_pat_set_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class sd_tx_fixed_pat_get_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_tx_fixed_pat_get_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_tx_fixed_pat_get_args)
sd_tx_fixed_pat_get_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
)


class sd_tx_fixed_pat_get_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = tx_fixed_pat()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_tx_fixed_pat_get_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_tx_fixed_pat_get_result)
sd_tx_fixed_pat_get_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [tx_fixed_pat, None], None, ),  # 0
)


class sd_rx_data_cap_get_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_data_cap_get_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_data_cap_get_args)
sd_rx_data_cap_get_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
)


class sd_rx_data_cap_get_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = rx_cap_pat()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_rx_data_cap_get_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_rx_data_cap_get_result)
sd_rx_data_cap_get_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [rx_cap_pat, None], None, ),  # 0
)


class sd_get_tx_eq_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_get_tx_eq_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_get_tx_eq_args)
sd_get_tx_eq_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
)


class sd_get_tx_eq_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = tx_eq_data()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidSdOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_get_tx_eq_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_get_tx_eq_result)
sd_get_tx_eq_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [tx_eq_data, None], None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidSdOperation, None], None, ),  # 1
)


class sd_set_tx_eq_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane
     - pre
     - atten
     - post

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None, pre=None, atten=None, post=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane
        self.pre = pre
        self.atten = atten
        self.post = post

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.pre = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.atten = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.post = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_set_tx_eq_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        if self.pre is not None:
            oprot.writeFieldBegin('pre', TType.I32, 4)
            oprot.writeI32(self.pre)
            oprot.writeFieldEnd()
        if self.atten is not None:
            oprot.writeFieldBegin('atten', TType.I32, 5)
            oprot.writeI32(self.atten)
            oprot.writeFieldEnd()
        if self.post is not None:
            oprot.writeFieldBegin('post', TType.I32, 6)
            oprot.writeI32(self.post)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_set_tx_eq_args)
sd_set_tx_eq_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
    (4, TType.I32, 'pre', None, None, ),  # 4
    (5, TType.I32, 'atten', None, None, ),  # 5
    (6, TType.I32, 'post', None, None, ),  # 6
)


class sd_set_tx_eq_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidSdOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_set_tx_eq_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_set_tx_eq_result)
sd_set_tx_eq_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidSdOperation, None], None, ),  # 1
)


class sd_get_pll_state_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane
     - expected_divider

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None, expected_divider=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane
        self.expected_divider = expected_divider

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.expected_divider = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_get_pll_state_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        if self.expected_divider is not None:
            oprot.writeFieldBegin('expected_divider', TType.I32, 4)
            oprot.writeI32(self.expected_divider)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_get_pll_state_args)
sd_get_pll_state_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
    (4, TType.I32, 'expected_divider', None, None, ),  # 4
)


class sd_get_pll_state_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidSdOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_get_pll_state_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_get_pll_state_result)
sd_get_pll_state_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidSdOperation, None], None, ),  # 1
)


class sd_get_tx_output_en_args(object):
    """
    Attributes:
     - dev_id
     - dev_port
     - lane

    """


    def __init__(self, dev_id=None, dev_port=None, lane=None,):
        self.dev_id = dev_id
        self.dev_port = dev_port
        self.lane = lane

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dev_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lane = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_get_tx_output_en_args')
        if self.dev_id is not None:
            oprot.writeFieldBegin('dev_id', TType.I32, 1)
            oprot.writeI32(self.dev_id)
            oprot.writeFieldEnd()
        if self.dev_port is not None:
            oprot.writeFieldBegin('dev_port', TType.I32, 2)
            oprot.writeI32(self.dev_port)
            oprot.writeFieldEnd()
        if self.lane is not None:
            oprot.writeFieldBegin('lane', TType.I32, 3)
            oprot.writeI32(self.lane)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_get_tx_output_en_args)
sd_get_tx_output_en_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dev_id', None, None, ),  # 1
    (2, TType.I32, 'dev_port', None, None, ),  # 2
    (3, TType.I32, 'lane', None, None, ),  # 3
)


class sd_get_tx_output_en_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = bool_state()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidSdOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sd_get_tx_output_en_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sd_get_tx_output_en_result)
sd_get_tx_output_en_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [bool_state, None], None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidSdOperation, None], None, ),  # 1
)
fix_spec(all_structs)
del all_structs
