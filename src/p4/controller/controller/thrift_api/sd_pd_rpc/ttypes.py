#
# Autogenerated by Thrift Compiler (0.14.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:package_prefix=controller.thrift_api.
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import controller.thrift_api.res_pd_rpc.ttypes

from thrift.transport import TTransport
all_structs = []


class tx_eq_data(object):
    """
    Attributes:
     - status
     - pre
     - atten
     - post

    """


    def __init__(self, status=None, pre=None, atten=None, post=None,):
        self.status = status
        self.pre = pre
        self.atten = atten
        self.post = post

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.pre = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.atten = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.post = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('tx_eq_data')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 1)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.pre is not None:
            oprot.writeFieldBegin('pre', TType.I32, 2)
            oprot.writeI32(self.pre)
            oprot.writeFieldEnd()
        if self.atten is not None:
            oprot.writeFieldBegin('atten', TType.I32, 3)
            oprot.writeI32(self.atten)
            oprot.writeFieldEnd()
        if self.post is not None:
            oprot.writeFieldBegin('post', TType.I32, 4)
            oprot.writeI32(self.post)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.pre is None:
            raise TProtocolException(message='Required field pre is unset!')
        if self.atten is None:
            raise TProtocolException(message='Required field atten is unset!')
        if self.post is None:
            raise TProtocolException(message='Required field post is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class bool_state(object):
    """
    Attributes:
     - status
     - st

    """


    def __init__(self, status=None, st=None,):
        self.status = status
        self.st = st

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.st = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('bool_state')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 1)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.st is not None:
            oprot.writeFieldBegin('st', TType.BOOL, 2)
            oprot.writeBool(self.st)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.st is None:
            raise TProtocolException(message='Required field st is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class bool_value(object):
    """
    Attributes:
     - status
     - value

    """


    def __init__(self, status=None, value=None,):
        self.status = status
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.value = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('bool_value')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 1)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.BOOL, 2)
            oprot.writeBool(self.value)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.value is None:
            raise TProtocolException(message='Required field value is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class i32_value(object):
    """
    Attributes:
     - status
     - value

    """


    def __init__(self, status=None, value=None,):
        self.status = status
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.value = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('i32_value')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 1)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.I32, 2)
            oprot.writeI32(self.value)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.value is None:
            raise TProtocolException(message='Required field value is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class lane_map(object):
    """
    Attributes:
     - tx_l0
     - tx_l1
     - tx_l2
     - tx_l3
     - rx_l0
     - rx_l1
     - rx_l2
     - rx_l3
     - status

    """


    def __init__(self, tx_l0=None, tx_l1=None, tx_l2=None, tx_l3=None, rx_l0=None, rx_l1=None, rx_l2=None, rx_l3=None, status=None,):
        self.tx_l0 = tx_l0
        self.tx_l1 = tx_l1
        self.tx_l2 = tx_l2
        self.tx_l3 = tx_l3
        self.rx_l0 = rx_l0
        self.rx_l1 = rx_l1
        self.rx_l2 = rx_l2
        self.rx_l3 = rx_l3
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.tx_l0 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.tx_l1 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.tx_l2 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.tx_l3 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.rx_l0 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.rx_l1 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.rx_l2 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.rx_l3 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('lane_map')
        if self.tx_l0 is not None:
            oprot.writeFieldBegin('tx_l0', TType.I32, 1)
            oprot.writeI32(self.tx_l0)
            oprot.writeFieldEnd()
        if self.tx_l1 is not None:
            oprot.writeFieldBegin('tx_l1', TType.I32, 2)
            oprot.writeI32(self.tx_l1)
            oprot.writeFieldEnd()
        if self.tx_l2 is not None:
            oprot.writeFieldBegin('tx_l2', TType.I32, 3)
            oprot.writeI32(self.tx_l2)
            oprot.writeFieldEnd()
        if self.tx_l3 is not None:
            oprot.writeFieldBegin('tx_l3', TType.I32, 4)
            oprot.writeI32(self.tx_l3)
            oprot.writeFieldEnd()
        if self.rx_l0 is not None:
            oprot.writeFieldBegin('rx_l0', TType.I32, 5)
            oprot.writeI32(self.rx_l0)
            oprot.writeFieldEnd()
        if self.rx_l1 is not None:
            oprot.writeFieldBegin('rx_l1', TType.I32, 6)
            oprot.writeI32(self.rx_l1)
            oprot.writeFieldEnd()
        if self.rx_l2 is not None:
            oprot.writeFieldBegin('rx_l2', TType.I32, 7)
            oprot.writeI32(self.rx_l2)
            oprot.writeFieldEnd()
        if self.rx_l3 is not None:
            oprot.writeFieldBegin('rx_l3', TType.I32, 8)
            oprot.writeI32(self.rx_l3)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 9)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.tx_l0 is None:
            raise TProtocolException(message='Required field tx_l0 is unset!')
        if self.tx_l1 is None:
            raise TProtocolException(message='Required field tx_l1 is unset!')
        if self.tx_l2 is None:
            raise TProtocolException(message='Required field tx_l2 is unset!')
        if self.tx_l3 is None:
            raise TProtocolException(message='Required field tx_l3 is unset!')
        if self.rx_l0 is None:
            raise TProtocolException(message='Required field rx_l0 is unset!')
        if self.rx_l1 is None:
            raise TProtocolException(message='Required field rx_l1 is unset!')
        if self.rx_l2 is None:
            raise TProtocolException(message='Required field rx_l2 is unset!')
        if self.rx_l3 is None:
            raise TProtocolException(message='Required field rx_l3 is unset!')
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class pll_status(object):
    """
    Attributes:
     - status
     - locked
     - div
     - freq

    """


    def __init__(self, status=None, locked=None, div=None, freq=None,):
        self.status = status
        self.locked = locked
        self.div = div
        self.freq = freq

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.locked = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.div = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.freq = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('pll_status')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 1)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.locked is not None:
            oprot.writeFieldBegin('locked', TType.BOOL, 2)
            oprot.writeBool(self.locked)
            oprot.writeFieldEnd()
        if self.div is not None:
            oprot.writeFieldBegin('div', TType.I32, 3)
            oprot.writeI32(self.div)
            oprot.writeFieldEnd()
        if self.freq is not None:
            oprot.writeFieldBegin('freq', TType.I32, 4)
            oprot.writeI32(self.freq)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.locked is None:
            raise TProtocolException(message='Required field locked is unset!')
        if self.div is None:
            raise TProtocolException(message='Required field div is unset!')
        if self.freq is None:
            raise TProtocolException(message='Required field freq is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class drv_attn(object):
    """
    Attributes:
     - status
     - attn_main
     - attn_post
     - attn_pre

    """


    def __init__(self, status=None, attn_main=None, attn_post=None, attn_pre=None,):
        self.status = status
        self.attn_main = attn_main
        self.attn_post = attn_post
        self.attn_pre = attn_pre

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.attn_main = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.attn_post = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.attn_pre = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('drv_attn')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 1)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.attn_main is not None:
            oprot.writeFieldBegin('attn_main', TType.I32, 2)
            oprot.writeI32(self.attn_main)
            oprot.writeFieldEnd()
        if self.attn_post is not None:
            oprot.writeFieldBegin('attn_post', TType.I32, 3)
            oprot.writeI32(self.attn_post)
            oprot.writeFieldEnd()
        if self.attn_pre is not None:
            oprot.writeFieldBegin('attn_pre', TType.I32, 4)
            oprot.writeI32(self.attn_pre)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.attn_main is None:
            raise TProtocolException(message='Required field attn_main is unset!')
        if self.attn_post is None:
            raise TProtocolException(message='Required field attn_post is unset!')
        if self.attn_pre is None:
            raise TProtocolException(message='Required field attn_pre is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class drv_amp(object):
    """
    Attributes:
     - status
     - amp_main
     - amp_post
     - amp_pre

    """


    def __init__(self, status=None, amp_main=None, amp_post=None, amp_pre=None,):
        self.status = status
        self.amp_main = amp_main
        self.amp_post = amp_post
        self.amp_pre = amp_pre

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.amp_main = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.amp_post = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.amp_pre = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('drv_amp')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 1)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.amp_main is not None:
            oprot.writeFieldBegin('amp_main', TType.I32, 2)
            oprot.writeI32(self.amp_main)
            oprot.writeFieldEnd()
        if self.amp_post is not None:
            oprot.writeFieldBegin('amp_post', TType.I32, 3)
            oprot.writeI32(self.amp_post)
            oprot.writeFieldEnd()
        if self.amp_pre is not None:
            oprot.writeFieldBegin('amp_pre', TType.I32, 4)
            oprot.writeI32(self.amp_pre)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.amp_main is None:
            raise TProtocolException(message='Required field amp_main is unset!')
        if self.amp_post is None:
            raise TProtocolException(message='Required field amp_post is unset!')
        if self.amp_pre is None:
            raise TProtocolException(message='Required field amp_pre is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class tx_drv_sts(object):
    """
    Attributes:
     - status
     - tx_en
     - tx_drv_en
     - tx_inv
     - amp_main
     - amp_post
     - amp_pre

    """


    def __init__(self, status=None, tx_en=None, tx_drv_en=None, tx_inv=None, amp_main=None, amp_post=None, amp_pre=None,):
        self.status = status
        self.tx_en = tx_en
        self.tx_drv_en = tx_drv_en
        self.tx_inv = tx_inv
        self.amp_main = amp_main
        self.amp_post = amp_post
        self.amp_pre = amp_pre

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.tx_en = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.tx_drv_en = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.tx_inv = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.amp_main = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.amp_post = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.amp_pre = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('tx_drv_sts')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 1)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.tx_en is not None:
            oprot.writeFieldBegin('tx_en', TType.BOOL, 2)
            oprot.writeBool(self.tx_en)
            oprot.writeFieldEnd()
        if self.tx_drv_en is not None:
            oprot.writeFieldBegin('tx_drv_en', TType.BOOL, 3)
            oprot.writeBool(self.tx_drv_en)
            oprot.writeFieldEnd()
        if self.tx_inv is not None:
            oprot.writeFieldBegin('tx_inv', TType.BOOL, 4)
            oprot.writeBool(self.tx_inv)
            oprot.writeFieldEnd()
        if self.amp_main is not None:
            oprot.writeFieldBegin('amp_main', TType.I32, 5)
            oprot.writeI32(self.amp_main)
            oprot.writeFieldEnd()
        if self.amp_post is not None:
            oprot.writeFieldBegin('amp_post', TType.I32, 6)
            oprot.writeI32(self.amp_post)
            oprot.writeFieldEnd()
        if self.amp_pre is not None:
            oprot.writeFieldBegin('amp_pre', TType.I32, 7)
            oprot.writeI32(self.amp_pre)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.tx_en is None:
            raise TProtocolException(message='Required field tx_en is unset!')
        if self.tx_drv_en is None:
            raise TProtocolException(message='Required field tx_drv_en is unset!')
        if self.tx_inv is None:
            raise TProtocolException(message='Required field tx_inv is unset!')
        if self.amp_main is None:
            raise TProtocolException(message='Required field amp_main is unset!')
        if self.amp_post is None:
            raise TProtocolException(message='Required field amp_post is unset!')
        if self.amp_pre is None:
            raise TProtocolException(message='Required field amp_pre is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class rx_los_cfg(object):
    """
    Attributes:
     - status
     - rx_los_en
     - rx_los_thres

    """


    def __init__(self, status=None, rx_los_en=None, rx_los_thres=None,):
        self.status = status
        self.rx_los_en = rx_los_en
        self.rx_los_thres = rx_los_thres

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.rx_los_en = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.rx_los_thres = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('rx_los_cfg')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 1)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.rx_los_en is not None:
            oprot.writeFieldBegin('rx_los_en', TType.BOOL, 2)
            oprot.writeBool(self.rx_los_en)
            oprot.writeFieldEnd()
        if self.rx_los_thres is not None:
            oprot.writeFieldBegin('rx_los_thres', TType.I32, 3)
            oprot.writeI32(self.rx_los_thres)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.rx_los_en is None:
            raise TProtocolException(message='Required field rx_los_en is unset!')
        if self.rx_los_thres is None:
            raise TProtocolException(message='Required field rx_los_thres is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class rx_eq_ctle(object):
    """
    Attributes:
     - status
     - ctle_dc
     - ctle_lf
     - ctle_hf
     - ctle_bw

    """


    def __init__(self, status=None, ctle_dc=None, ctle_lf=None, ctle_hf=None, ctle_bw=None,):
        self.status = status
        self.ctle_dc = ctle_dc
        self.ctle_lf = ctle_lf
        self.ctle_hf = ctle_hf
        self.ctle_bw = ctle_bw

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.ctle_dc = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.ctle_lf = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.ctle_hf = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.ctle_bw = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('rx_eq_ctle')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 1)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.ctle_dc is not None:
            oprot.writeFieldBegin('ctle_dc', TType.I32, 2)
            oprot.writeI32(self.ctle_dc)
            oprot.writeFieldEnd()
        if self.ctle_lf is not None:
            oprot.writeFieldBegin('ctle_lf', TType.I32, 3)
            oprot.writeI32(self.ctle_lf)
            oprot.writeFieldEnd()
        if self.ctle_hf is not None:
            oprot.writeFieldBegin('ctle_hf', TType.I32, 4)
            oprot.writeI32(self.ctle_hf)
            oprot.writeFieldEnd()
        if self.ctle_bw is not None:
            oprot.writeFieldBegin('ctle_bw', TType.I32, 5)
            oprot.writeI32(self.ctle_bw)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.ctle_dc is None:
            raise TProtocolException(message='Required field ctle_dc is unset!')
        if self.ctle_lf is None:
            raise TProtocolException(message='Required field ctle_lf is unset!')
        if self.ctle_hf is None:
            raise TProtocolException(message='Required field ctle_hf is unset!')
        if self.ctle_bw is None:
            raise TProtocolException(message='Required field ctle_bw is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class dfe_tap(object):
    """
    Attributes:
     - status
     - tap_num
     - tap_val

    """


    def __init__(self, status=None, tap_num=None, tap_val=None,):
        self.status = status
        self.tap_num = tap_num
        self.tap_val = tap_val

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.tap_num = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.tap_val = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('dfe_tap')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 1)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.tap_num is not None:
            oprot.writeFieldBegin('tap_num', TType.I32, 2)
            oprot.writeI32(self.tap_num)
            oprot.writeFieldEnd()
        if self.tap_val is not None:
            oprot.writeFieldBegin('tap_val', TType.I32, 3)
            oprot.writeI32(self.tap_val)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.tap_num is None:
            raise TProtocolException(message='Required field tap_num is unset!')
        if self.tap_val is None:
            raise TProtocolException(message='Required field tap_val is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class dfe_taps(object):
    """
    Attributes:
     - status
     - dfe_gain
     - tap1
     - tap2
     - tap3
     - tap4

    """


    def __init__(self, status=None, dfe_gain=None, tap1=None, tap2=None, tap3=None, tap4=None,):
        self.status = status
        self.dfe_gain = dfe_gain
        self.tap1 = tap1
        self.tap2 = tap2
        self.tap3 = tap3
        self.tap4 = tap4

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dfe_gain = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.tap1 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.tap2 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.tap3 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.tap4 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('dfe_taps')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 1)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.dfe_gain is not None:
            oprot.writeFieldBegin('dfe_gain', TType.I32, 2)
            oprot.writeI32(self.dfe_gain)
            oprot.writeFieldEnd()
        if self.tap1 is not None:
            oprot.writeFieldBegin('tap1', TType.I32, 3)
            oprot.writeI32(self.tap1)
            oprot.writeFieldEnd()
        if self.tap2 is not None:
            oprot.writeFieldBegin('tap2', TType.I32, 4)
            oprot.writeI32(self.tap2)
            oprot.writeFieldEnd()
        if self.tap3 is not None:
            oprot.writeFieldBegin('tap3', TType.I32, 5)
            oprot.writeI32(self.tap3)
            oprot.writeFieldEnd()
        if self.tap4 is not None:
            oprot.writeFieldBegin('tap4', TType.I32, 6)
            oprot.writeI32(self.tap4)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.dfe_gain is None:
            raise TProtocolException(message='Required field dfe_gain is unset!')
        if self.tap1 is None:
            raise TProtocolException(message='Required field tap1 is unset!')
        if self.tap2 is None:
            raise TProtocolException(message='Required field tap2 is unset!')
        if self.tap3 is None:
            raise TProtocolException(message='Required field tap3 is unset!')
        if self.tap4 is None:
            raise TProtocolException(message='Required field tap4 is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class eq_cal_params(object):
    """
    Attributes:
     - status
     - ctle_dc_hint
     - dfe_gain_range
     - pcal_loop_cnt

    """


    def __init__(self, status=None, ctle_dc_hint=None, dfe_gain_range=None, pcal_loop_cnt=None,):
        self.status = status
        self.ctle_dc_hint = ctle_dc_hint
        self.dfe_gain_range = dfe_gain_range
        self.pcal_loop_cnt = pcal_loop_cnt

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.ctle_dc_hint = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.dfe_gain_range = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.pcal_loop_cnt = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('eq_cal_params')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 1)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.ctle_dc_hint is not None:
            oprot.writeFieldBegin('ctle_dc_hint', TType.I32, 2)
            oprot.writeI32(self.ctle_dc_hint)
            oprot.writeFieldEnd()
        if self.dfe_gain_range is not None:
            oprot.writeFieldBegin('dfe_gain_range', TType.I32, 3)
            oprot.writeI32(self.dfe_gain_range)
            oprot.writeFieldEnd()
        if self.pcal_loop_cnt is not None:
            oprot.writeFieldBegin('pcal_loop_cnt', TType.I32, 4)
            oprot.writeI32(self.pcal_loop_cnt)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.ctle_dc_hint is None:
            raise TProtocolException(message='Required field ctle_dc_hint is unset!')
        if self.dfe_gain_range is None:
            raise TProtocolException(message='Required field dfe_gain_range is unset!')
        if self.pcal_loop_cnt is None:
            raise TProtocolException(message='Required field pcal_loop_cnt is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ical_result(object):
    """
    Attributes:
     - status
     - cal_done
     - cal_good
     - cal_eye

    """


    def __init__(self, status=None, cal_done=None, cal_good=None, cal_eye=None,):
        self.status = status
        self.cal_done = cal_done
        self.cal_good = cal_good
        self.cal_eye = cal_eye

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.cal_done = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.cal_good = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.cal_eye = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ical_result')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 1)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.cal_done is not None:
            oprot.writeFieldBegin('cal_done', TType.I32, 2)
            oprot.writeI32(self.cal_done)
            oprot.writeFieldEnd()
        if self.cal_good is not None:
            oprot.writeFieldBegin('cal_good', TType.I32, 3)
            oprot.writeI32(self.cal_good)
            oprot.writeFieldEnd()
        if self.cal_eye is not None:
            oprot.writeFieldBegin('cal_eye', TType.I32, 4)
            oprot.writeI32(self.cal_eye)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.cal_done is None:
            raise TProtocolException(message='Required field cal_done is unset!')
        if self.cal_good is None:
            raise TProtocolException(message='Required field cal_good is unset!')
        if self.cal_eye is None:
            raise TProtocolException(message='Required field cal_eye is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class rx_eq_status(object):
    """
    Attributes:
     - status
     - cal_done
     - cal_good: < 1: Completed. 0: In progress
     - cal_eye: < 1: Good Eye. 0: Poor Eye. -1: Bad Eye
     - ctle_dc: < (mVppd) Eye height observed by cal algorithm
     - ctle_lf: < DC boost (0..255)
     - ctle_hf: < Peaking filter low frequency gain (0..15)
     - ctle_bw: < Peaking filter high frequency gain (0..15)
     - dfe_taps_0: < Peaking filter peakign frequency (0..15)
     - dfe_taps_1: < Array of DFE Taps (each -127..127)
     - dfe_taps_2: < Array of DFE Taps (each -127..127)
     - dfe_taps_3: < Array of DFE Taps (each -127..127)
     - dfe_taps_4: < Array of DFE Taps (each -127..127)
     - dfe_taps_5: < Array of DFE Taps (each -127..127)
     - dfe_taps_6: < Array of DFE Taps (each -127..127)
     - dfe_taps_7: < Array of DFE Taps (each -127..127)
     - dfe_taps_8: < Array of DFE Taps (each -127..127)
     - dfe_taps_9: < Array of DFE Taps (each -127..127)
     - dfe_taps_10: < Array of DFE Taps (each -127..127)
     - dfe_taps_11: < Array of DFE Taps (each -127..127)
     - dfe_taps_12: < Array of DFE Taps (each -127..127)
     - dfe_taps_13: < Array of DFE Taps (each -127..127)
     - dfe_taps_14: < Array of DFE Taps (each -127..127)
     - dfe_taps_15: < Array of DFE Taps (each -127..127)
     - dfe_taps_16: < Array of DFE Taps (each -127..127)

    """


    def __init__(self, status=None, cal_done=None, cal_good=None, cal_eye=None, ctle_dc=None, ctle_lf=None, ctle_hf=None, ctle_bw=None, dfe_taps_0=None, dfe_taps_1=None, dfe_taps_2=None, dfe_taps_3=None, dfe_taps_4=None, dfe_taps_5=None, dfe_taps_6=None, dfe_taps_7=None, dfe_taps_8=None, dfe_taps_9=None, dfe_taps_10=None, dfe_taps_11=None, dfe_taps_12=None, dfe_taps_13=None, dfe_taps_14=None, dfe_taps_15=None, dfe_taps_16=None,):
        self.status = status
        self.cal_done = cal_done
        self.cal_good = cal_good
        self.cal_eye = cal_eye
        self.ctle_dc = ctle_dc
        self.ctle_lf = ctle_lf
        self.ctle_hf = ctle_hf
        self.ctle_bw = ctle_bw
        self.dfe_taps_0 = dfe_taps_0
        self.dfe_taps_1 = dfe_taps_1
        self.dfe_taps_2 = dfe_taps_2
        self.dfe_taps_3 = dfe_taps_3
        self.dfe_taps_4 = dfe_taps_4
        self.dfe_taps_5 = dfe_taps_5
        self.dfe_taps_6 = dfe_taps_6
        self.dfe_taps_7 = dfe_taps_7
        self.dfe_taps_8 = dfe_taps_8
        self.dfe_taps_9 = dfe_taps_9
        self.dfe_taps_10 = dfe_taps_10
        self.dfe_taps_11 = dfe_taps_11
        self.dfe_taps_12 = dfe_taps_12
        self.dfe_taps_13 = dfe_taps_13
        self.dfe_taps_14 = dfe_taps_14
        self.dfe_taps_15 = dfe_taps_15
        self.dfe_taps_16 = dfe_taps_16

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.cal_done = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.cal_good = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.cal_eye = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.ctle_dc = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.ctle_lf = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.ctle_hf = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.ctle_bw = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.dfe_taps_0 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.dfe_taps_1 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.dfe_taps_2 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I32:
                    self.dfe_taps_3 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I32:
                    self.dfe_taps_4 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I32:
                    self.dfe_taps_5 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I32:
                    self.dfe_taps_6 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.I32:
                    self.dfe_taps_7 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.I32:
                    self.dfe_taps_8 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.I32:
                    self.dfe_taps_9 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.I32:
                    self.dfe_taps_10 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.I32:
                    self.dfe_taps_11 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.I32:
                    self.dfe_taps_12 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.I32:
                    self.dfe_taps_13 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.I32:
                    self.dfe_taps_14 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.I32:
                    self.dfe_taps_15 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.I32:
                    self.dfe_taps_16 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('rx_eq_status')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 1)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.cal_done is not None:
            oprot.writeFieldBegin('cal_done', TType.BOOL, 2)
            oprot.writeBool(self.cal_done)
            oprot.writeFieldEnd()
        if self.cal_good is not None:
            oprot.writeFieldBegin('cal_good', TType.I32, 3)
            oprot.writeI32(self.cal_good)
            oprot.writeFieldEnd()
        if self.cal_eye is not None:
            oprot.writeFieldBegin('cal_eye', TType.I32, 4)
            oprot.writeI32(self.cal_eye)
            oprot.writeFieldEnd()
        if self.ctle_dc is not None:
            oprot.writeFieldBegin('ctle_dc', TType.I32, 5)
            oprot.writeI32(self.ctle_dc)
            oprot.writeFieldEnd()
        if self.ctle_lf is not None:
            oprot.writeFieldBegin('ctle_lf', TType.I32, 6)
            oprot.writeI32(self.ctle_lf)
            oprot.writeFieldEnd()
        if self.ctle_hf is not None:
            oprot.writeFieldBegin('ctle_hf', TType.I32, 7)
            oprot.writeI32(self.ctle_hf)
            oprot.writeFieldEnd()
        if self.ctle_bw is not None:
            oprot.writeFieldBegin('ctle_bw', TType.I32, 8)
            oprot.writeI32(self.ctle_bw)
            oprot.writeFieldEnd()
        if self.dfe_taps_0 is not None:
            oprot.writeFieldBegin('dfe_taps_0', TType.I32, 9)
            oprot.writeI32(self.dfe_taps_0)
            oprot.writeFieldEnd()
        if self.dfe_taps_1 is not None:
            oprot.writeFieldBegin('dfe_taps_1', TType.I32, 10)
            oprot.writeI32(self.dfe_taps_1)
            oprot.writeFieldEnd()
        if self.dfe_taps_2 is not None:
            oprot.writeFieldBegin('dfe_taps_2', TType.I32, 11)
            oprot.writeI32(self.dfe_taps_2)
            oprot.writeFieldEnd()
        if self.dfe_taps_3 is not None:
            oprot.writeFieldBegin('dfe_taps_3', TType.I32, 12)
            oprot.writeI32(self.dfe_taps_3)
            oprot.writeFieldEnd()
        if self.dfe_taps_4 is not None:
            oprot.writeFieldBegin('dfe_taps_4', TType.I32, 13)
            oprot.writeI32(self.dfe_taps_4)
            oprot.writeFieldEnd()
        if self.dfe_taps_5 is not None:
            oprot.writeFieldBegin('dfe_taps_5', TType.I32, 14)
            oprot.writeI32(self.dfe_taps_5)
            oprot.writeFieldEnd()
        if self.dfe_taps_6 is not None:
            oprot.writeFieldBegin('dfe_taps_6', TType.I32, 15)
            oprot.writeI32(self.dfe_taps_6)
            oprot.writeFieldEnd()
        if self.dfe_taps_7 is not None:
            oprot.writeFieldBegin('dfe_taps_7', TType.I32, 16)
            oprot.writeI32(self.dfe_taps_7)
            oprot.writeFieldEnd()
        if self.dfe_taps_8 is not None:
            oprot.writeFieldBegin('dfe_taps_8', TType.I32, 17)
            oprot.writeI32(self.dfe_taps_8)
            oprot.writeFieldEnd()
        if self.dfe_taps_9 is not None:
            oprot.writeFieldBegin('dfe_taps_9', TType.I32, 18)
            oprot.writeI32(self.dfe_taps_9)
            oprot.writeFieldEnd()
        if self.dfe_taps_10 is not None:
            oprot.writeFieldBegin('dfe_taps_10', TType.I32, 19)
            oprot.writeI32(self.dfe_taps_10)
            oprot.writeFieldEnd()
        if self.dfe_taps_11 is not None:
            oprot.writeFieldBegin('dfe_taps_11', TType.I32, 20)
            oprot.writeI32(self.dfe_taps_11)
            oprot.writeFieldEnd()
        if self.dfe_taps_12 is not None:
            oprot.writeFieldBegin('dfe_taps_12', TType.I32, 21)
            oprot.writeI32(self.dfe_taps_12)
            oprot.writeFieldEnd()
        if self.dfe_taps_13 is not None:
            oprot.writeFieldBegin('dfe_taps_13', TType.I32, 22)
            oprot.writeI32(self.dfe_taps_13)
            oprot.writeFieldEnd()
        if self.dfe_taps_14 is not None:
            oprot.writeFieldBegin('dfe_taps_14', TType.I32, 23)
            oprot.writeI32(self.dfe_taps_14)
            oprot.writeFieldEnd()
        if self.dfe_taps_15 is not None:
            oprot.writeFieldBegin('dfe_taps_15', TType.I32, 24)
            oprot.writeI32(self.dfe_taps_15)
            oprot.writeFieldEnd()
        if self.dfe_taps_16 is not None:
            oprot.writeFieldBegin('dfe_taps_16', TType.I32, 25)
            oprot.writeI32(self.dfe_taps_16)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.cal_done is None:
            raise TProtocolException(message='Required field cal_done is unset!')
        if self.cal_good is None:
            raise TProtocolException(message='Required field cal_good is unset!')
        if self.cal_eye is None:
            raise TProtocolException(message='Required field cal_eye is unset!')
        if self.ctle_dc is None:
            raise TProtocolException(message='Required field ctle_dc is unset!')
        if self.ctle_lf is None:
            raise TProtocolException(message='Required field ctle_lf is unset!')
        if self.ctle_hf is None:
            raise TProtocolException(message='Required field ctle_hf is unset!')
        if self.ctle_bw is None:
            raise TProtocolException(message='Required field ctle_bw is unset!')
        if self.dfe_taps_0 is None:
            raise TProtocolException(message='Required field dfe_taps_0 is unset!')
        if self.dfe_taps_1 is None:
            raise TProtocolException(message='Required field dfe_taps_1 is unset!')
        if self.dfe_taps_2 is None:
            raise TProtocolException(message='Required field dfe_taps_2 is unset!')
        if self.dfe_taps_3 is None:
            raise TProtocolException(message='Required field dfe_taps_3 is unset!')
        if self.dfe_taps_4 is None:
            raise TProtocolException(message='Required field dfe_taps_4 is unset!')
        if self.dfe_taps_5 is None:
            raise TProtocolException(message='Required field dfe_taps_5 is unset!')
        if self.dfe_taps_6 is None:
            raise TProtocolException(message='Required field dfe_taps_6 is unset!')
        if self.dfe_taps_7 is None:
            raise TProtocolException(message='Required field dfe_taps_7 is unset!')
        if self.dfe_taps_8 is None:
            raise TProtocolException(message='Required field dfe_taps_8 is unset!')
        if self.dfe_taps_9 is None:
            raise TProtocolException(message='Required field dfe_taps_9 is unset!')
        if self.dfe_taps_10 is None:
            raise TProtocolException(message='Required field dfe_taps_10 is unset!')
        if self.dfe_taps_11 is None:
            raise TProtocolException(message='Required field dfe_taps_11 is unset!')
        if self.dfe_taps_12 is None:
            raise TProtocolException(message='Required field dfe_taps_12 is unset!')
        if self.dfe_taps_13 is None:
            raise TProtocolException(message='Required field dfe_taps_13 is unset!')
        if self.dfe_taps_14 is None:
            raise TProtocolException(message='Required field dfe_taps_14 is unset!')
        if self.dfe_taps_15 is None:
            raise TProtocolException(message='Required field dfe_taps_15 is unset!')
        if self.dfe_taps_16 is None:
            raise TProtocolException(message='Required field dfe_taps_16 is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class tx_fixed_pat(object):
    """
    < Array of DFE Taps (each -127..127)

    Attributes:
     - status
     - tx_fixed_pat_0
     - tx_fixed_pat_1
     - tx_fixed_pat_2
     - tx_fixed_pat_3

    """


    def __init__(self, status=None, tx_fixed_pat_0=None, tx_fixed_pat_1=None, tx_fixed_pat_2=None, tx_fixed_pat_3=None,):
        self.status = status
        self.tx_fixed_pat_0 = tx_fixed_pat_0
        self.tx_fixed_pat_1 = tx_fixed_pat_1
        self.tx_fixed_pat_2 = tx_fixed_pat_2
        self.tx_fixed_pat_3 = tx_fixed_pat_3

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.tx_fixed_pat_0 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.tx_fixed_pat_1 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.tx_fixed_pat_2 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.tx_fixed_pat_3 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('tx_fixed_pat')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 1)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.tx_fixed_pat_0 is not None:
            oprot.writeFieldBegin('tx_fixed_pat_0', TType.I32, 2)
            oprot.writeI32(self.tx_fixed_pat_0)
            oprot.writeFieldEnd()
        if self.tx_fixed_pat_1 is not None:
            oprot.writeFieldBegin('tx_fixed_pat_1', TType.I32, 3)
            oprot.writeI32(self.tx_fixed_pat_1)
            oprot.writeFieldEnd()
        if self.tx_fixed_pat_2 is not None:
            oprot.writeFieldBegin('tx_fixed_pat_2', TType.I32, 4)
            oprot.writeI32(self.tx_fixed_pat_2)
            oprot.writeFieldEnd()
        if self.tx_fixed_pat_3 is not None:
            oprot.writeFieldBegin('tx_fixed_pat_3', TType.I32, 5)
            oprot.writeI32(self.tx_fixed_pat_3)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.tx_fixed_pat_0 is None:
            raise TProtocolException(message='Required field tx_fixed_pat_0 is unset!')
        if self.tx_fixed_pat_1 is None:
            raise TProtocolException(message='Required field tx_fixed_pat_1 is unset!')
        if self.tx_fixed_pat_2 is None:
            raise TProtocolException(message='Required field tx_fixed_pat_2 is unset!')
        if self.tx_fixed_pat_3 is None:
            raise TProtocolException(message='Required field tx_fixed_pat_3 is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class rx_cap_pat(object):
    """
    Attributes:
     - status
     - rx_cap_pat_0
     - rx_cap_pat_1
     - rx_cap_pat_2
     - rx_cap_pat_3

    """


    def __init__(self, status=None, rx_cap_pat_0=None, rx_cap_pat_1=None, rx_cap_pat_2=None, rx_cap_pat_3=None,):
        self.status = status
        self.rx_cap_pat_0 = rx_cap_pat_0
        self.rx_cap_pat_1 = rx_cap_pat_1
        self.rx_cap_pat_2 = rx_cap_pat_2
        self.rx_cap_pat_3 = rx_cap_pat_3

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.rx_cap_pat_0 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.rx_cap_pat_1 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.rx_cap_pat_2 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.rx_cap_pat_3 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('rx_cap_pat')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 1)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.rx_cap_pat_0 is not None:
            oprot.writeFieldBegin('rx_cap_pat_0', TType.I32, 2)
            oprot.writeI32(self.rx_cap_pat_0)
            oprot.writeFieldEnd()
        if self.rx_cap_pat_1 is not None:
            oprot.writeFieldBegin('rx_cap_pat_1', TType.I32, 3)
            oprot.writeI32(self.rx_cap_pat_1)
            oprot.writeFieldEnd()
        if self.rx_cap_pat_2 is not None:
            oprot.writeFieldBegin('rx_cap_pat_2', TType.I32, 4)
            oprot.writeI32(self.rx_cap_pat_2)
            oprot.writeFieldEnd()
        if self.rx_cap_pat_3 is not None:
            oprot.writeFieldBegin('rx_cap_pat_3', TType.I32, 5)
            oprot.writeI32(self.rx_cap_pat_3)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.status is None:
            raise TProtocolException(message='Required field status is unset!')
        if self.rx_cap_pat_0 is None:
            raise TProtocolException(message='Required field rx_cap_pat_0 is unset!')
        if self.rx_cap_pat_1 is None:
            raise TProtocolException(message='Required field rx_cap_pat_1 is unset!')
        if self.rx_cap_pat_2 is None:
            raise TProtocolException(message='Required field rx_cap_pat_2 is unset!')
        if self.rx_cap_pat_3 is None:
            raise TProtocolException(message='Required field rx_cap_pat_3 is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class InvalidSdOperation(TException):
    """
    Attributes:
     - code

    """


    def __init__(self, code=None,):
        super(InvalidSdOperation, self).__setattr__('code', code)

    def __setattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __delattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __hash__(self):
        return hash(self.__class__) ^ hash((self.code, ))

    @classmethod
    def read(cls, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and cls.thrift_spec is not None:
            return iprot._fast_decode(None, iprot, [cls, cls.thrift_spec])
        iprot.readStructBegin()
        code = None
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    code = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        return cls(
            code=code,
        )

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('InvalidSdOperation')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.I32, 1)
            oprot.writeI32(self.code)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(tx_eq_data)
tx_eq_data.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'status', None, None, ),  # 1
    (2, TType.I32, 'pre', None, None, ),  # 2
    (3, TType.I32, 'atten', None, None, ),  # 3
    (4, TType.I32, 'post', None, None, ),  # 4
)
all_structs.append(bool_state)
bool_state.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'status', None, None, ),  # 1
    (2, TType.BOOL, 'st', None, None, ),  # 2
)
all_structs.append(bool_value)
bool_value.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'status', None, None, ),  # 1
    (2, TType.BOOL, 'value', None, None, ),  # 2
)
all_structs.append(i32_value)
i32_value.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'status', None, None, ),  # 1
    (2, TType.I32, 'value', None, None, ),  # 2
)
all_structs.append(lane_map)
lane_map.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'tx_l0', None, None, ),  # 1
    (2, TType.I32, 'tx_l1', None, None, ),  # 2
    (3, TType.I32, 'tx_l2', None, None, ),  # 3
    (4, TType.I32, 'tx_l3', None, None, ),  # 4
    (5, TType.I32, 'rx_l0', None, None, ),  # 5
    (6, TType.I32, 'rx_l1', None, None, ),  # 6
    (7, TType.I32, 'rx_l2', None, None, ),  # 7
    (8, TType.I32, 'rx_l3', None, None, ),  # 8
    (9, TType.I32, 'status', None, None, ),  # 9
)
all_structs.append(pll_status)
pll_status.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'status', None, None, ),  # 1
    (2, TType.BOOL, 'locked', None, None, ),  # 2
    (3, TType.I32, 'div', None, None, ),  # 3
    (4, TType.I32, 'freq', None, None, ),  # 4
)
all_structs.append(drv_attn)
drv_attn.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'status', None, None, ),  # 1
    (2, TType.I32, 'attn_main', None, None, ),  # 2
    (3, TType.I32, 'attn_post', None, None, ),  # 3
    (4, TType.I32, 'attn_pre', None, None, ),  # 4
)
all_structs.append(drv_amp)
drv_amp.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'status', None, None, ),  # 1
    (2, TType.I32, 'amp_main', None, None, ),  # 2
    (3, TType.I32, 'amp_post', None, None, ),  # 3
    (4, TType.I32, 'amp_pre', None, None, ),  # 4
)
all_structs.append(tx_drv_sts)
tx_drv_sts.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'status', None, None, ),  # 1
    (2, TType.BOOL, 'tx_en', None, None, ),  # 2
    (3, TType.BOOL, 'tx_drv_en', None, None, ),  # 3
    (4, TType.BOOL, 'tx_inv', None, None, ),  # 4
    (5, TType.I32, 'amp_main', None, None, ),  # 5
    (6, TType.I32, 'amp_post', None, None, ),  # 6
    (7, TType.I32, 'amp_pre', None, None, ),  # 7
)
all_structs.append(rx_los_cfg)
rx_los_cfg.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'status', None, None, ),  # 1
    (2, TType.BOOL, 'rx_los_en', None, None, ),  # 2
    (3, TType.I32, 'rx_los_thres', None, None, ),  # 3
)
all_structs.append(rx_eq_ctle)
rx_eq_ctle.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'status', None, None, ),  # 1
    (2, TType.I32, 'ctle_dc', None, None, ),  # 2
    (3, TType.I32, 'ctle_lf', None, None, ),  # 3
    (4, TType.I32, 'ctle_hf', None, None, ),  # 4
    (5, TType.I32, 'ctle_bw', None, None, ),  # 5
)
all_structs.append(dfe_tap)
dfe_tap.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'status', None, None, ),  # 1
    (2, TType.I32, 'tap_num', None, None, ),  # 2
    (3, TType.I32, 'tap_val', None, None, ),  # 3
)
all_structs.append(dfe_taps)
dfe_taps.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'status', None, None, ),  # 1
    (2, TType.I32, 'dfe_gain', None, None, ),  # 2
    (3, TType.I32, 'tap1', None, None, ),  # 3
    (4, TType.I32, 'tap2', None, None, ),  # 4
    (5, TType.I32, 'tap3', None, None, ),  # 5
    (6, TType.I32, 'tap4', None, None, ),  # 6
)
all_structs.append(eq_cal_params)
eq_cal_params.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'status', None, None, ),  # 1
    (2, TType.I32, 'ctle_dc_hint', None, None, ),  # 2
    (3, TType.I32, 'dfe_gain_range', None, None, ),  # 3
    (4, TType.I32, 'pcal_loop_cnt', None, None, ),  # 4
)
all_structs.append(ical_result)
ical_result.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'status', None, None, ),  # 1
    (2, TType.I32, 'cal_done', None, None, ),  # 2
    (3, TType.I32, 'cal_good', None, None, ),  # 3
    (4, TType.I32, 'cal_eye', None, None, ),  # 4
)
all_structs.append(rx_eq_status)
rx_eq_status.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'status', None, None, ),  # 1
    (2, TType.BOOL, 'cal_done', None, None, ),  # 2
    (3, TType.I32, 'cal_good', None, None, ),  # 3
    (4, TType.I32, 'cal_eye', None, None, ),  # 4
    (5, TType.I32, 'ctle_dc', None, None, ),  # 5
    (6, TType.I32, 'ctle_lf', None, None, ),  # 6
    (7, TType.I32, 'ctle_hf', None, None, ),  # 7
    (8, TType.I32, 'ctle_bw', None, None, ),  # 8
    (9, TType.I32, 'dfe_taps_0', None, None, ),  # 9
    (10, TType.I32, 'dfe_taps_1', None, None, ),  # 10
    (11, TType.I32, 'dfe_taps_2', None, None, ),  # 11
    (12, TType.I32, 'dfe_taps_3', None, None, ),  # 12
    (13, TType.I32, 'dfe_taps_4', None, None, ),  # 13
    (14, TType.I32, 'dfe_taps_5', None, None, ),  # 14
    (15, TType.I32, 'dfe_taps_6', None, None, ),  # 15
    (16, TType.I32, 'dfe_taps_7', None, None, ),  # 16
    (17, TType.I32, 'dfe_taps_8', None, None, ),  # 17
    (18, TType.I32, 'dfe_taps_9', None, None, ),  # 18
    (19, TType.I32, 'dfe_taps_10', None, None, ),  # 19
    (20, TType.I32, 'dfe_taps_11', None, None, ),  # 20
    (21, TType.I32, 'dfe_taps_12', None, None, ),  # 21
    (22, TType.I32, 'dfe_taps_13', None, None, ),  # 22
    (23, TType.I32, 'dfe_taps_14', None, None, ),  # 23
    (24, TType.I32, 'dfe_taps_15', None, None, ),  # 24
    (25, TType.I32, 'dfe_taps_16', None, None, ),  # 25
)
all_structs.append(tx_fixed_pat)
tx_fixed_pat.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'status', None, None, ),  # 1
    (2, TType.I32, 'tx_fixed_pat_0', None, None, ),  # 2
    (3, TType.I32, 'tx_fixed_pat_1', None, None, ),  # 3
    (4, TType.I32, 'tx_fixed_pat_2', None, None, ),  # 4
    (5, TType.I32, 'tx_fixed_pat_3', None, None, ),  # 5
)
all_structs.append(rx_cap_pat)
rx_cap_pat.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'status', None, None, ),  # 1
    (2, TType.I32, 'rx_cap_pat_0', None, None, ),  # 2
    (3, TType.I32, 'rx_cap_pat_1', None, None, ),  # 3
    (4, TType.I32, 'rx_cap_pat_2', None, None, ),  # 4
    (5, TType.I32, 'rx_cap_pat_3', None, None, ),  # 5
)
all_structs.append(InvalidSdOperation)
InvalidSdOperation.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'code', None, None, ),  # 1
)
fix_spec(all_structs)
del all_structs
