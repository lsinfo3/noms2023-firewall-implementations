#
# Autogenerated by Thrift Compiler (0.14.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:package_prefix=controller.thrift_api.
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    def mirror_session_create(self, sess_hdl, dev_tgt, mirr_sess_info):
        """
        Parameters:
         - sess_hdl
         - dev_tgt
         - mirr_sess_info

        """
        pass

    def mirror_session_update(self, sess_hdl, dev_tgt, mirr_sess_info, enable):
        """
        Parameters:
         - sess_hdl
         - dev_tgt
         - mirr_sess_info
         - enable

        """
        pass

    def mirror_session_delete(self, sess_hdl, dev_tgt, mir_id):
        """
        Parameters:
         - sess_hdl
         - dev_tgt
         - mir_id

        """
        pass

    def mirror_session_disable(self, sess_hdl, direction, dev_tgt, mir_id):
        """
        Parameters:
         - sess_hdl
         - direction
         - dev_tgt
         - mir_id

        """
        pass

    def mirror_session_enable(self, sess_hdl, direction, dev_tgt, mir_id):
        """
        Parameters:
         - sess_hdl
         - direction
         - dev_tgt
         - mir_id

        """
        pass

    def mirror_session_pipe_vec_set(self, sess_hdl, dev_tgt, mir_id, pipe_vec):
        """
        Parameters:
         - sess_hdl
         - dev_tgt
         - mir_id
         - pipe_vec

        """
        pass

    def mirror_session_pipe_vec_get(self, sess_hdl, dev_tgt, mir_id):
        """
        Parameters:
         - sess_hdl
         - dev_tgt
         - mir_id

        """
        pass

    def mirror_session_meta_flag_update(self, sess_hdl, dev_tgt, mir_id, flag, value):
        """
        Parameters:
         - sess_hdl
         - dev_tgt
         - mir_id
         - flag
         - value

        """
        pass

    def mirror_session_priority_update(self, sess_hdl, dev_tgt, mir_id, value):
        """
        Parameters:
         - sess_hdl
         - dev_tgt
         - mir_id
         - value

        """
        pass

    def mirror_session_coal_mode_update(self, sess_hdl, dev_tgt, mir_id, value):
        """
        Parameters:
         - sess_hdl
         - dev_tgt
         - mir_id
         - value

        """
        pass

    def mirror_session_get_first(self, sess_hdl, dev_tgt):
        """
        Parameters:
         - sess_hdl
         - dev_tgt

        """
        pass

    def mirror_session_get_next(self, sess_hdl, dev_tgt, id, pipe_id):
        """
        Parameters:
         - sess_hdl
         - dev_tgt
         - id
         - pipe_id

        """
        pass

    def mirror_session_get_max_session_id(self, sess_hdl, dev, mir_type):
        """
        Parameters:
         - sess_hdl
         - dev
         - mir_type

        """
        pass

    def mirror_session_get_base_session_id(self, sess_hdl, dev, mir_type):
        """
        Parameters:
         - sess_hdl
         - dev
         - mir_type

        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def mirror_session_create(self, sess_hdl, dev_tgt, mirr_sess_info):
        """
        Parameters:
         - sess_hdl
         - dev_tgt
         - mirr_sess_info

        """
        self.send_mirror_session_create(sess_hdl, dev_tgt, mirr_sess_info)
        self.recv_mirror_session_create()

    def send_mirror_session_create(self, sess_hdl, dev_tgt, mirr_sess_info):
        self._oprot.writeMessageBegin('mirror_session_create', TMessageType.CALL, self._seqid)
        args = mirror_session_create_args()
        args.sess_hdl = sess_hdl
        args.dev_tgt = dev_tgt
        args.mirr_sess_info = mirr_sess_info
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_mirror_session_create(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = mirror_session_create_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.ouch is not None:
            raise result.ouch
        return

    def mirror_session_update(self, sess_hdl, dev_tgt, mirr_sess_info, enable):
        """
        Parameters:
         - sess_hdl
         - dev_tgt
         - mirr_sess_info
         - enable

        """
        self.send_mirror_session_update(sess_hdl, dev_tgt, mirr_sess_info, enable)
        self.recv_mirror_session_update()

    def send_mirror_session_update(self, sess_hdl, dev_tgt, mirr_sess_info, enable):
        self._oprot.writeMessageBegin('mirror_session_update', TMessageType.CALL, self._seqid)
        args = mirror_session_update_args()
        args.sess_hdl = sess_hdl
        args.dev_tgt = dev_tgt
        args.mirr_sess_info = mirr_sess_info
        args.enable = enable
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_mirror_session_update(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = mirror_session_update_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.ouch is not None:
            raise result.ouch
        return

    def mirror_session_delete(self, sess_hdl, dev_tgt, mir_id):
        """
        Parameters:
         - sess_hdl
         - dev_tgt
         - mir_id

        """
        self.send_mirror_session_delete(sess_hdl, dev_tgt, mir_id)
        self.recv_mirror_session_delete()

    def send_mirror_session_delete(self, sess_hdl, dev_tgt, mir_id):
        self._oprot.writeMessageBegin('mirror_session_delete', TMessageType.CALL, self._seqid)
        args = mirror_session_delete_args()
        args.sess_hdl = sess_hdl
        args.dev_tgt = dev_tgt
        args.mir_id = mir_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_mirror_session_delete(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = mirror_session_delete_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.ouch is not None:
            raise result.ouch
        return

    def mirror_session_disable(self, sess_hdl, direction, dev_tgt, mir_id):
        """
        Parameters:
         - sess_hdl
         - direction
         - dev_tgt
         - mir_id

        """
        self.send_mirror_session_disable(sess_hdl, direction, dev_tgt, mir_id)
        self.recv_mirror_session_disable()

    def send_mirror_session_disable(self, sess_hdl, direction, dev_tgt, mir_id):
        self._oprot.writeMessageBegin('mirror_session_disable', TMessageType.CALL, self._seqid)
        args = mirror_session_disable_args()
        args.sess_hdl = sess_hdl
        args.direction = direction
        args.dev_tgt = dev_tgt
        args.mir_id = mir_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_mirror_session_disable(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = mirror_session_disable_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.ouch is not None:
            raise result.ouch
        return

    def mirror_session_enable(self, sess_hdl, direction, dev_tgt, mir_id):
        """
        Parameters:
         - sess_hdl
         - direction
         - dev_tgt
         - mir_id

        """
        self.send_mirror_session_enable(sess_hdl, direction, dev_tgt, mir_id)
        self.recv_mirror_session_enable()

    def send_mirror_session_enable(self, sess_hdl, direction, dev_tgt, mir_id):
        self._oprot.writeMessageBegin('mirror_session_enable', TMessageType.CALL, self._seqid)
        args = mirror_session_enable_args()
        args.sess_hdl = sess_hdl
        args.direction = direction
        args.dev_tgt = dev_tgt
        args.mir_id = mir_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_mirror_session_enable(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = mirror_session_enable_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.ouch is not None:
            raise result.ouch
        return

    def mirror_session_pipe_vec_set(self, sess_hdl, dev_tgt, mir_id, pipe_vec):
        """
        Parameters:
         - sess_hdl
         - dev_tgt
         - mir_id
         - pipe_vec

        """
        self.send_mirror_session_pipe_vec_set(sess_hdl, dev_tgt, mir_id, pipe_vec)
        self.recv_mirror_session_pipe_vec_set()

    def send_mirror_session_pipe_vec_set(self, sess_hdl, dev_tgt, mir_id, pipe_vec):
        self._oprot.writeMessageBegin('mirror_session_pipe_vec_set', TMessageType.CALL, self._seqid)
        args = mirror_session_pipe_vec_set_args()
        args.sess_hdl = sess_hdl
        args.dev_tgt = dev_tgt
        args.mir_id = mir_id
        args.pipe_vec = pipe_vec
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_mirror_session_pipe_vec_set(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = mirror_session_pipe_vec_set_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.ouch is not None:
            raise result.ouch
        return

    def mirror_session_pipe_vec_get(self, sess_hdl, dev_tgt, mir_id):
        """
        Parameters:
         - sess_hdl
         - dev_tgt
         - mir_id

        """
        self.send_mirror_session_pipe_vec_get(sess_hdl, dev_tgt, mir_id)
        return self.recv_mirror_session_pipe_vec_get()

    def send_mirror_session_pipe_vec_get(self, sess_hdl, dev_tgt, mir_id):
        self._oprot.writeMessageBegin('mirror_session_pipe_vec_get', TMessageType.CALL, self._seqid)
        args = mirror_session_pipe_vec_get_args()
        args.sess_hdl = sess_hdl
        args.dev_tgt = dev_tgt
        args.mir_id = mir_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_mirror_session_pipe_vec_get(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = mirror_session_pipe_vec_get_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "mirror_session_pipe_vec_get failed: unknown result")

    def mirror_session_meta_flag_update(self, sess_hdl, dev_tgt, mir_id, flag, value):
        """
        Parameters:
         - sess_hdl
         - dev_tgt
         - mir_id
         - flag
         - value

        """
        self.send_mirror_session_meta_flag_update(sess_hdl, dev_tgt, mir_id, flag, value)
        self.recv_mirror_session_meta_flag_update()

    def send_mirror_session_meta_flag_update(self, sess_hdl, dev_tgt, mir_id, flag, value):
        self._oprot.writeMessageBegin('mirror_session_meta_flag_update', TMessageType.CALL, self._seqid)
        args = mirror_session_meta_flag_update_args()
        args.sess_hdl = sess_hdl
        args.dev_tgt = dev_tgt
        args.mir_id = mir_id
        args.flag = flag
        args.value = value
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_mirror_session_meta_flag_update(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = mirror_session_meta_flag_update_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.ouch is not None:
            raise result.ouch
        return

    def mirror_session_priority_update(self, sess_hdl, dev_tgt, mir_id, value):
        """
        Parameters:
         - sess_hdl
         - dev_tgt
         - mir_id
         - value

        """
        self.send_mirror_session_priority_update(sess_hdl, dev_tgt, mir_id, value)
        self.recv_mirror_session_priority_update()

    def send_mirror_session_priority_update(self, sess_hdl, dev_tgt, mir_id, value):
        self._oprot.writeMessageBegin('mirror_session_priority_update', TMessageType.CALL, self._seqid)
        args = mirror_session_priority_update_args()
        args.sess_hdl = sess_hdl
        args.dev_tgt = dev_tgt
        args.mir_id = mir_id
        args.value = value
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_mirror_session_priority_update(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = mirror_session_priority_update_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.ouch is not None:
            raise result.ouch
        return

    def mirror_session_coal_mode_update(self, sess_hdl, dev_tgt, mir_id, value):
        """
        Parameters:
         - sess_hdl
         - dev_tgt
         - mir_id
         - value

        """
        self.send_mirror_session_coal_mode_update(sess_hdl, dev_tgt, mir_id, value)
        self.recv_mirror_session_coal_mode_update()

    def send_mirror_session_coal_mode_update(self, sess_hdl, dev_tgt, mir_id, value):
        self._oprot.writeMessageBegin('mirror_session_coal_mode_update', TMessageType.CALL, self._seqid)
        args = mirror_session_coal_mode_update_args()
        args.sess_hdl = sess_hdl
        args.dev_tgt = dev_tgt
        args.mir_id = mir_id
        args.value = value
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_mirror_session_coal_mode_update(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = mirror_session_coal_mode_update_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.ouch is not None:
            raise result.ouch
        return

    def mirror_session_get_first(self, sess_hdl, dev_tgt):
        """
        Parameters:
         - sess_hdl
         - dev_tgt

        """
        self.send_mirror_session_get_first(sess_hdl, dev_tgt)
        return self.recv_mirror_session_get_first()

    def send_mirror_session_get_first(self, sess_hdl, dev_tgt):
        self._oprot.writeMessageBegin('mirror_session_get_first', TMessageType.CALL, self._seqid)
        args = mirror_session_get_first_args()
        args.sess_hdl = sess_hdl
        args.dev_tgt = dev_tgt
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_mirror_session_get_first(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = mirror_session_get_first_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "mirror_session_get_first failed: unknown result")

    def mirror_session_get_next(self, sess_hdl, dev_tgt, id, pipe_id):
        """
        Parameters:
         - sess_hdl
         - dev_tgt
         - id
         - pipe_id

        """
        self.send_mirror_session_get_next(sess_hdl, dev_tgt, id, pipe_id)
        return self.recv_mirror_session_get_next()

    def send_mirror_session_get_next(self, sess_hdl, dev_tgt, id, pipe_id):
        self._oprot.writeMessageBegin('mirror_session_get_next', TMessageType.CALL, self._seqid)
        args = mirror_session_get_next_args()
        args.sess_hdl = sess_hdl
        args.dev_tgt = dev_tgt
        args.id = id
        args.pipe_id = pipe_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_mirror_session_get_next(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = mirror_session_get_next_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "mirror_session_get_next failed: unknown result")

    def mirror_session_get_max_session_id(self, sess_hdl, dev, mir_type):
        """
        Parameters:
         - sess_hdl
         - dev
         - mir_type

        """
        self.send_mirror_session_get_max_session_id(sess_hdl, dev, mir_type)
        return self.recv_mirror_session_get_max_session_id()

    def send_mirror_session_get_max_session_id(self, sess_hdl, dev, mir_type):
        self._oprot.writeMessageBegin('mirror_session_get_max_session_id', TMessageType.CALL, self._seqid)
        args = mirror_session_get_max_session_id_args()
        args.sess_hdl = sess_hdl
        args.dev = dev
        args.mir_type = mir_type
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_mirror_session_get_max_session_id(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = mirror_session_get_max_session_id_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "mirror_session_get_max_session_id failed: unknown result")

    def mirror_session_get_base_session_id(self, sess_hdl, dev, mir_type):
        """
        Parameters:
         - sess_hdl
         - dev
         - mir_type

        """
        self.send_mirror_session_get_base_session_id(sess_hdl, dev, mir_type)
        return self.recv_mirror_session_get_base_session_id()

    def send_mirror_session_get_base_session_id(self, sess_hdl, dev, mir_type):
        self._oprot.writeMessageBegin('mirror_session_get_base_session_id', TMessageType.CALL, self._seqid)
        args = mirror_session_get_base_session_id_args()
        args.sess_hdl = sess_hdl
        args.dev = dev
        args.mir_type = mir_type
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_mirror_session_get_base_session_id(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = mirror_session_get_base_session_id_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ouch is not None:
            raise result.ouch
        raise TApplicationException(TApplicationException.MISSING_RESULT, "mirror_session_get_base_session_id failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["mirror_session_create"] = Processor.process_mirror_session_create
        self._processMap["mirror_session_update"] = Processor.process_mirror_session_update
        self._processMap["mirror_session_delete"] = Processor.process_mirror_session_delete
        self._processMap["mirror_session_disable"] = Processor.process_mirror_session_disable
        self._processMap["mirror_session_enable"] = Processor.process_mirror_session_enable
        self._processMap["mirror_session_pipe_vec_set"] = Processor.process_mirror_session_pipe_vec_set
        self._processMap["mirror_session_pipe_vec_get"] = Processor.process_mirror_session_pipe_vec_get
        self._processMap["mirror_session_meta_flag_update"] = Processor.process_mirror_session_meta_flag_update
        self._processMap["mirror_session_priority_update"] = Processor.process_mirror_session_priority_update
        self._processMap["mirror_session_coal_mode_update"] = Processor.process_mirror_session_coal_mode_update
        self._processMap["mirror_session_get_first"] = Processor.process_mirror_session_get_first
        self._processMap["mirror_session_get_next"] = Processor.process_mirror_session_get_next
        self._processMap["mirror_session_get_max_session_id"] = Processor.process_mirror_session_get_max_session_id
        self._processMap["mirror_session_get_base_session_id"] = Processor.process_mirror_session_get_base_session_id
        self._on_message_begin = None

    def on_message_begin(self, func):
        self._on_message_begin = func

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if self._on_message_begin:
            self._on_message_begin(name, type, seqid)
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_mirror_session_create(self, seqid, iprot, oprot):
        args = mirror_session_create_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = mirror_session_create_result()
        try:
            self._handler.mirror_session_create(args.sess_hdl, args.dev_tgt, args.mirr_sess_info)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidPipeMgrOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("mirror_session_create", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_mirror_session_update(self, seqid, iprot, oprot):
        args = mirror_session_update_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = mirror_session_update_result()
        try:
            self._handler.mirror_session_update(args.sess_hdl, args.dev_tgt, args.mirr_sess_info, args.enable)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidPipeMgrOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("mirror_session_update", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_mirror_session_delete(self, seqid, iprot, oprot):
        args = mirror_session_delete_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = mirror_session_delete_result()
        try:
            self._handler.mirror_session_delete(args.sess_hdl, args.dev_tgt, args.mir_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidPipeMgrOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("mirror_session_delete", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_mirror_session_disable(self, seqid, iprot, oprot):
        args = mirror_session_disable_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = mirror_session_disable_result()
        try:
            self._handler.mirror_session_disable(args.sess_hdl, args.direction, args.dev_tgt, args.mir_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidPipeMgrOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("mirror_session_disable", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_mirror_session_enable(self, seqid, iprot, oprot):
        args = mirror_session_enable_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = mirror_session_enable_result()
        try:
            self._handler.mirror_session_enable(args.sess_hdl, args.direction, args.dev_tgt, args.mir_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidPipeMgrOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("mirror_session_enable", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_mirror_session_pipe_vec_set(self, seqid, iprot, oprot):
        args = mirror_session_pipe_vec_set_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = mirror_session_pipe_vec_set_result()
        try:
            self._handler.mirror_session_pipe_vec_set(args.sess_hdl, args.dev_tgt, args.mir_id, args.pipe_vec)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidPipeMgrOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("mirror_session_pipe_vec_set", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_mirror_session_pipe_vec_get(self, seqid, iprot, oprot):
        args = mirror_session_pipe_vec_get_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = mirror_session_pipe_vec_get_result()
        try:
            result.success = self._handler.mirror_session_pipe_vec_get(args.sess_hdl, args.dev_tgt, args.mir_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidPipeMgrOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("mirror_session_pipe_vec_get", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_mirror_session_meta_flag_update(self, seqid, iprot, oprot):
        args = mirror_session_meta_flag_update_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = mirror_session_meta_flag_update_result()
        try:
            self._handler.mirror_session_meta_flag_update(args.sess_hdl, args.dev_tgt, args.mir_id, args.flag, args.value)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidPipeMgrOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("mirror_session_meta_flag_update", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_mirror_session_priority_update(self, seqid, iprot, oprot):
        args = mirror_session_priority_update_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = mirror_session_priority_update_result()
        try:
            self._handler.mirror_session_priority_update(args.sess_hdl, args.dev_tgt, args.mir_id, args.value)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidPipeMgrOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("mirror_session_priority_update", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_mirror_session_coal_mode_update(self, seqid, iprot, oprot):
        args = mirror_session_coal_mode_update_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = mirror_session_coal_mode_update_result()
        try:
            self._handler.mirror_session_coal_mode_update(args.sess_hdl, args.dev_tgt, args.mir_id, args.value)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidPipeMgrOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("mirror_session_coal_mode_update", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_mirror_session_get_first(self, seqid, iprot, oprot):
        args = mirror_session_get_first_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = mirror_session_get_first_result()
        try:
            result.success = self._handler.mirror_session_get_first(args.sess_hdl, args.dev_tgt)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidPipeMgrOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("mirror_session_get_first", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_mirror_session_get_next(self, seqid, iprot, oprot):
        args = mirror_session_get_next_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = mirror_session_get_next_result()
        try:
            result.success = self._handler.mirror_session_get_next(args.sess_hdl, args.dev_tgt, args.id, args.pipe_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidPipeMgrOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("mirror_session_get_next", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_mirror_session_get_max_session_id(self, seqid, iprot, oprot):
        args = mirror_session_get_max_session_id_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = mirror_session_get_max_session_id_result()
        try:
            result.success = self._handler.mirror_session_get_max_session_id(args.sess_hdl, args.dev, args.mir_type)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidPipeMgrOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("mirror_session_get_max_session_id", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_mirror_session_get_base_session_id(self, seqid, iprot, oprot):
        args = mirror_session_get_base_session_id_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = mirror_session_get_base_session_id_result()
        try:
            result.success = self._handler.mirror_session_get_base_session_id(args.sess_hdl, args.dev, args.mir_type)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except InvalidPipeMgrOperation as ouch:
            msg_type = TMessageType.REPLY
            result.ouch = ouch
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("mirror_session_get_base_session_id", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class mirror_session_create_args(object):
    """
    Attributes:
     - sess_hdl
     - dev_tgt
     - mirr_sess_info

    """


    def __init__(self, sess_hdl=None, dev_tgt=None, mirr_sess_info=None,):
        self.sess_hdl = sess_hdl
        self.dev_tgt = dev_tgt
        self.mirr_sess_info = mirr_sess_info

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.sess_hdl = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.dev_tgt = controller.thrift_api.res_pd_rpc.ttypes.DevTarget_t()
                    self.dev_tgt.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.mirr_sess_info = MirrorSessionInfo_t()
                    self.mirr_sess_info.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('mirror_session_create_args')
        if self.sess_hdl is not None:
            oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
            oprot.writeI32(self.sess_hdl)
            oprot.writeFieldEnd()
        if self.dev_tgt is not None:
            oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
            self.dev_tgt.write(oprot)
            oprot.writeFieldEnd()
        if self.mirr_sess_info is not None:
            oprot.writeFieldBegin('mirr_sess_info', TType.STRUCT, 3)
            self.mirr_sess_info.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(mirror_session_create_args)
mirror_session_create_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'sess_hdl', None, None, ),  # 1
    (2, TType.STRUCT, 'dev_tgt', [controller.thrift_api.res_pd_rpc.ttypes.DevTarget_t, None], None, ),  # 2
    (3, TType.STRUCT, 'mirr_sess_info', [MirrorSessionInfo_t, None], None, ),  # 3
)


class mirror_session_create_result(object):
    """
    Attributes:
     - ouch

    """


    def __init__(self, ouch=None,):
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidPipeMgrOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('mirror_session_create_result')
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(mirror_session_create_result)
mirror_session_create_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'ouch', [InvalidPipeMgrOperation, None], None, ),  # 1
)


class mirror_session_update_args(object):
    """
    Attributes:
     - sess_hdl
     - dev_tgt
     - mirr_sess_info
     - enable

    """


    def __init__(self, sess_hdl=None, dev_tgt=None, mirr_sess_info=None, enable=None,):
        self.sess_hdl = sess_hdl
        self.dev_tgt = dev_tgt
        self.mirr_sess_info = mirr_sess_info
        self.enable = enable

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.sess_hdl = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.dev_tgt = controller.thrift_api.res_pd_rpc.ttypes.DevTarget_t()
                    self.dev_tgt.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.mirr_sess_info = MirrorSessionInfo_t()
                    self.mirr_sess_info.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.enable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('mirror_session_update_args')
        if self.sess_hdl is not None:
            oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
            oprot.writeI32(self.sess_hdl)
            oprot.writeFieldEnd()
        if self.dev_tgt is not None:
            oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
            self.dev_tgt.write(oprot)
            oprot.writeFieldEnd()
        if self.mirr_sess_info is not None:
            oprot.writeFieldBegin('mirr_sess_info', TType.STRUCT, 3)
            self.mirr_sess_info.write(oprot)
            oprot.writeFieldEnd()
        if self.enable is not None:
            oprot.writeFieldBegin('enable', TType.BOOL, 4)
            oprot.writeBool(self.enable)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(mirror_session_update_args)
mirror_session_update_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'sess_hdl', None, None, ),  # 1
    (2, TType.STRUCT, 'dev_tgt', [controller.thrift_api.res_pd_rpc.ttypes.DevTarget_t, None], None, ),  # 2
    (3, TType.STRUCT, 'mirr_sess_info', [MirrorSessionInfo_t, None], None, ),  # 3
    (4, TType.BOOL, 'enable', None, None, ),  # 4
)


class mirror_session_update_result(object):
    """
    Attributes:
     - ouch

    """


    def __init__(self, ouch=None,):
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidPipeMgrOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('mirror_session_update_result')
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(mirror_session_update_result)
mirror_session_update_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'ouch', [InvalidPipeMgrOperation, None], None, ),  # 1
)


class mirror_session_delete_args(object):
    """
    Attributes:
     - sess_hdl
     - dev_tgt
     - mir_id

    """


    def __init__(self, sess_hdl=None, dev_tgt=None, mir_id=None,):
        self.sess_hdl = sess_hdl
        self.dev_tgt = dev_tgt
        self.mir_id = mir_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.sess_hdl = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.dev_tgt = controller.thrift_api.res_pd_rpc.ttypes.DevTarget_t()
                    self.dev_tgt.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I16:
                    self.mir_id = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('mirror_session_delete_args')
        if self.sess_hdl is not None:
            oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
            oprot.writeI32(self.sess_hdl)
            oprot.writeFieldEnd()
        if self.dev_tgt is not None:
            oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
            self.dev_tgt.write(oprot)
            oprot.writeFieldEnd()
        if self.mir_id is not None:
            oprot.writeFieldBegin('mir_id', TType.I16, 3)
            oprot.writeI16(self.mir_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(mirror_session_delete_args)
mirror_session_delete_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'sess_hdl', None, None, ),  # 1
    (2, TType.STRUCT, 'dev_tgt', [controller.thrift_api.res_pd_rpc.ttypes.DevTarget_t, None], None, ),  # 2
    (3, TType.I16, 'mir_id', None, None, ),  # 3
)


class mirror_session_delete_result(object):
    """
    Attributes:
     - ouch

    """


    def __init__(self, ouch=None,):
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidPipeMgrOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('mirror_session_delete_result')
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(mirror_session_delete_result)
mirror_session_delete_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'ouch', [InvalidPipeMgrOperation, None], None, ),  # 1
)


class mirror_session_disable_args(object):
    """
    Attributes:
     - sess_hdl
     - direction
     - dev_tgt
     - mir_id

    """


    def __init__(self, sess_hdl=None, direction=None, dev_tgt=None, mir_id=None,):
        self.sess_hdl = sess_hdl
        self.direction = direction
        self.dev_tgt = dev_tgt
        self.mir_id = mir_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.sess_hdl = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.direction = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.dev_tgt = controller.thrift_api.res_pd_rpc.ttypes.DevTarget_t()
                    self.dev_tgt.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I16:
                    self.mir_id = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('mirror_session_disable_args')
        if self.sess_hdl is not None:
            oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
            oprot.writeI32(self.sess_hdl)
            oprot.writeFieldEnd()
        if self.direction is not None:
            oprot.writeFieldBegin('direction', TType.I32, 2)
            oprot.writeI32(self.direction)
            oprot.writeFieldEnd()
        if self.dev_tgt is not None:
            oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 3)
            self.dev_tgt.write(oprot)
            oprot.writeFieldEnd()
        if self.mir_id is not None:
            oprot.writeFieldBegin('mir_id', TType.I16, 4)
            oprot.writeI16(self.mir_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(mirror_session_disable_args)
mirror_session_disable_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'sess_hdl', None, None, ),  # 1
    (2, TType.I32, 'direction', None, None, ),  # 2
    (3, TType.STRUCT, 'dev_tgt', [controller.thrift_api.res_pd_rpc.ttypes.DevTarget_t, None], None, ),  # 3
    (4, TType.I16, 'mir_id', None, None, ),  # 4
)


class mirror_session_disable_result(object):
    """
    Attributes:
     - ouch

    """


    def __init__(self, ouch=None,):
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidPipeMgrOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('mirror_session_disable_result')
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(mirror_session_disable_result)
mirror_session_disable_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'ouch', [InvalidPipeMgrOperation, None], None, ),  # 1
)


class mirror_session_enable_args(object):
    """
    Attributes:
     - sess_hdl
     - direction
     - dev_tgt
     - mir_id

    """


    def __init__(self, sess_hdl=None, direction=None, dev_tgt=None, mir_id=None,):
        self.sess_hdl = sess_hdl
        self.direction = direction
        self.dev_tgt = dev_tgt
        self.mir_id = mir_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.sess_hdl = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.direction = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.dev_tgt = controller.thrift_api.res_pd_rpc.ttypes.DevTarget_t()
                    self.dev_tgt.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I16:
                    self.mir_id = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('mirror_session_enable_args')
        if self.sess_hdl is not None:
            oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
            oprot.writeI32(self.sess_hdl)
            oprot.writeFieldEnd()
        if self.direction is not None:
            oprot.writeFieldBegin('direction', TType.I32, 2)
            oprot.writeI32(self.direction)
            oprot.writeFieldEnd()
        if self.dev_tgt is not None:
            oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 3)
            self.dev_tgt.write(oprot)
            oprot.writeFieldEnd()
        if self.mir_id is not None:
            oprot.writeFieldBegin('mir_id', TType.I16, 4)
            oprot.writeI16(self.mir_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(mirror_session_enable_args)
mirror_session_enable_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'sess_hdl', None, None, ),  # 1
    (2, TType.I32, 'direction', None, None, ),  # 2
    (3, TType.STRUCT, 'dev_tgt', [controller.thrift_api.res_pd_rpc.ttypes.DevTarget_t, None], None, ),  # 3
    (4, TType.I16, 'mir_id', None, None, ),  # 4
)


class mirror_session_enable_result(object):
    """
    Attributes:
     - ouch

    """


    def __init__(self, ouch=None,):
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidPipeMgrOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('mirror_session_enable_result')
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(mirror_session_enable_result)
mirror_session_enable_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'ouch', [InvalidPipeMgrOperation, None], None, ),  # 1
)


class mirror_session_pipe_vec_set_args(object):
    """
    Attributes:
     - sess_hdl
     - dev_tgt
     - mir_id
     - pipe_vec

    """


    def __init__(self, sess_hdl=None, dev_tgt=None, mir_id=None, pipe_vec=None,):
        self.sess_hdl = sess_hdl
        self.dev_tgt = dev_tgt
        self.mir_id = mir_id
        self.pipe_vec = pipe_vec

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.sess_hdl = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.dev_tgt = controller.thrift_api.res_pd_rpc.ttypes.DevTarget_t()
                    self.dev_tgt.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I16:
                    self.mir_id = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.pipe_vec = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('mirror_session_pipe_vec_set_args')
        if self.sess_hdl is not None:
            oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
            oprot.writeI32(self.sess_hdl)
            oprot.writeFieldEnd()
        if self.dev_tgt is not None:
            oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
            self.dev_tgt.write(oprot)
            oprot.writeFieldEnd()
        if self.mir_id is not None:
            oprot.writeFieldBegin('mir_id', TType.I16, 3)
            oprot.writeI16(self.mir_id)
            oprot.writeFieldEnd()
        if self.pipe_vec is not None:
            oprot.writeFieldBegin('pipe_vec', TType.I32, 4)
            oprot.writeI32(self.pipe_vec)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(mirror_session_pipe_vec_set_args)
mirror_session_pipe_vec_set_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'sess_hdl', None, None, ),  # 1
    (2, TType.STRUCT, 'dev_tgt', [controller.thrift_api.res_pd_rpc.ttypes.DevTarget_t, None], None, ),  # 2
    (3, TType.I16, 'mir_id', None, None, ),  # 3
    (4, TType.I32, 'pipe_vec', None, None, ),  # 4
)


class mirror_session_pipe_vec_set_result(object):
    """
    Attributes:
     - ouch

    """


    def __init__(self, ouch=None,):
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidPipeMgrOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('mirror_session_pipe_vec_set_result')
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(mirror_session_pipe_vec_set_result)
mirror_session_pipe_vec_set_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'ouch', [InvalidPipeMgrOperation, None], None, ),  # 1
)


class mirror_session_pipe_vec_get_args(object):
    """
    Attributes:
     - sess_hdl
     - dev_tgt
     - mir_id

    """


    def __init__(self, sess_hdl=None, dev_tgt=None, mir_id=None,):
        self.sess_hdl = sess_hdl
        self.dev_tgt = dev_tgt
        self.mir_id = mir_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.sess_hdl = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.dev_tgt = controller.thrift_api.res_pd_rpc.ttypes.DevTarget_t()
                    self.dev_tgt.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I16:
                    self.mir_id = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('mirror_session_pipe_vec_get_args')
        if self.sess_hdl is not None:
            oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
            oprot.writeI32(self.sess_hdl)
            oprot.writeFieldEnd()
        if self.dev_tgt is not None:
            oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
            self.dev_tgt.write(oprot)
            oprot.writeFieldEnd()
        if self.mir_id is not None:
            oprot.writeFieldBegin('mir_id', TType.I16, 3)
            oprot.writeI16(self.mir_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(mirror_session_pipe_vec_get_args)
mirror_session_pipe_vec_get_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'sess_hdl', None, None, ),  # 1
    (2, TType.STRUCT, 'dev_tgt', [controller.thrift_api.res_pd_rpc.ttypes.DevTarget_t, None], None, ),  # 2
    (3, TType.I16, 'mir_id', None, None, ),  # 3
)


class mirror_session_pipe_vec_get_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidPipeMgrOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('mirror_session_pipe_vec_get_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(mirror_session_pipe_vec_get_result)
mirror_session_pipe_vec_get_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidPipeMgrOperation, None], None, ),  # 1
)


class mirror_session_meta_flag_update_args(object):
    """
    Attributes:
     - sess_hdl
     - dev_tgt
     - mir_id
     - flag
     - value

    """


    def __init__(self, sess_hdl=None, dev_tgt=None, mir_id=None, flag=None, value=None,):
        self.sess_hdl = sess_hdl
        self.dev_tgt = dev_tgt
        self.mir_id = mir_id
        self.flag = flag
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.sess_hdl = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.dev_tgt = controller.thrift_api.res_pd_rpc.ttypes.DevTarget_t()
                    self.dev_tgt.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I16:
                    self.mir_id = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.flag = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.value = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('mirror_session_meta_flag_update_args')
        if self.sess_hdl is not None:
            oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
            oprot.writeI32(self.sess_hdl)
            oprot.writeFieldEnd()
        if self.dev_tgt is not None:
            oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
            self.dev_tgt.write(oprot)
            oprot.writeFieldEnd()
        if self.mir_id is not None:
            oprot.writeFieldBegin('mir_id', TType.I16, 3)
            oprot.writeI16(self.mir_id)
            oprot.writeFieldEnd()
        if self.flag is not None:
            oprot.writeFieldBegin('flag', TType.I32, 4)
            oprot.writeI32(self.flag)
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.BOOL, 5)
            oprot.writeBool(self.value)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(mirror_session_meta_flag_update_args)
mirror_session_meta_flag_update_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'sess_hdl', None, None, ),  # 1
    (2, TType.STRUCT, 'dev_tgt', [controller.thrift_api.res_pd_rpc.ttypes.DevTarget_t, None], None, ),  # 2
    (3, TType.I16, 'mir_id', None, None, ),  # 3
    (4, TType.I32, 'flag', None, None, ),  # 4
    (5, TType.BOOL, 'value', None, None, ),  # 5
)


class mirror_session_meta_flag_update_result(object):
    """
    Attributes:
     - ouch

    """


    def __init__(self, ouch=None,):
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidPipeMgrOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('mirror_session_meta_flag_update_result')
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(mirror_session_meta_flag_update_result)
mirror_session_meta_flag_update_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'ouch', [InvalidPipeMgrOperation, None], None, ),  # 1
)


class mirror_session_priority_update_args(object):
    """
    Attributes:
     - sess_hdl
     - dev_tgt
     - mir_id
     - value

    """


    def __init__(self, sess_hdl=None, dev_tgt=None, mir_id=None, value=None,):
        self.sess_hdl = sess_hdl
        self.dev_tgt = dev_tgt
        self.mir_id = mir_id
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.sess_hdl = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.dev_tgt = controller.thrift_api.res_pd_rpc.ttypes.DevTarget_t()
                    self.dev_tgt.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I16:
                    self.mir_id = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.value = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('mirror_session_priority_update_args')
        if self.sess_hdl is not None:
            oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
            oprot.writeI32(self.sess_hdl)
            oprot.writeFieldEnd()
        if self.dev_tgt is not None:
            oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
            self.dev_tgt.write(oprot)
            oprot.writeFieldEnd()
        if self.mir_id is not None:
            oprot.writeFieldBegin('mir_id', TType.I16, 3)
            oprot.writeI16(self.mir_id)
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.BOOL, 4)
            oprot.writeBool(self.value)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(mirror_session_priority_update_args)
mirror_session_priority_update_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'sess_hdl', None, None, ),  # 1
    (2, TType.STRUCT, 'dev_tgt', [controller.thrift_api.res_pd_rpc.ttypes.DevTarget_t, None], None, ),  # 2
    (3, TType.I16, 'mir_id', None, None, ),  # 3
    (4, TType.BOOL, 'value', None, None, ),  # 4
)


class mirror_session_priority_update_result(object):
    """
    Attributes:
     - ouch

    """


    def __init__(self, ouch=None,):
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidPipeMgrOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('mirror_session_priority_update_result')
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(mirror_session_priority_update_result)
mirror_session_priority_update_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'ouch', [InvalidPipeMgrOperation, None], None, ),  # 1
)


class mirror_session_coal_mode_update_args(object):
    """
    Attributes:
     - sess_hdl
     - dev_tgt
     - mir_id
     - value

    """


    def __init__(self, sess_hdl=None, dev_tgt=None, mir_id=None, value=None,):
        self.sess_hdl = sess_hdl
        self.dev_tgt = dev_tgt
        self.mir_id = mir_id
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.sess_hdl = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.dev_tgt = controller.thrift_api.res_pd_rpc.ttypes.DevTarget_t()
                    self.dev_tgt.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I16:
                    self.mir_id = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.value = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('mirror_session_coal_mode_update_args')
        if self.sess_hdl is not None:
            oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
            oprot.writeI32(self.sess_hdl)
            oprot.writeFieldEnd()
        if self.dev_tgt is not None:
            oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
            self.dev_tgt.write(oprot)
            oprot.writeFieldEnd()
        if self.mir_id is not None:
            oprot.writeFieldBegin('mir_id', TType.I16, 3)
            oprot.writeI16(self.mir_id)
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.BOOL, 4)
            oprot.writeBool(self.value)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(mirror_session_coal_mode_update_args)
mirror_session_coal_mode_update_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'sess_hdl', None, None, ),  # 1
    (2, TType.STRUCT, 'dev_tgt', [controller.thrift_api.res_pd_rpc.ttypes.DevTarget_t, None], None, ),  # 2
    (3, TType.I16, 'mir_id', None, None, ),  # 3
    (4, TType.BOOL, 'value', None, None, ),  # 4
)


class mirror_session_coal_mode_update_result(object):
    """
    Attributes:
     - ouch

    """


    def __init__(self, ouch=None,):
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidPipeMgrOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('mirror_session_coal_mode_update_result')
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(mirror_session_coal_mode_update_result)
mirror_session_coal_mode_update_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'ouch', [InvalidPipeMgrOperation, None], None, ),  # 1
)


class mirror_session_get_first_args(object):
    """
    Attributes:
     - sess_hdl
     - dev_tgt

    """


    def __init__(self, sess_hdl=None, dev_tgt=None,):
        self.sess_hdl = sess_hdl
        self.dev_tgt = dev_tgt

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.sess_hdl = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.dev_tgt = controller.thrift_api.res_pd_rpc.ttypes.DevTarget_t()
                    self.dev_tgt.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('mirror_session_get_first_args')
        if self.sess_hdl is not None:
            oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
            oprot.writeI32(self.sess_hdl)
            oprot.writeFieldEnd()
        if self.dev_tgt is not None:
            oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
            self.dev_tgt.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(mirror_session_get_first_args)
mirror_session_get_first_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'sess_hdl', None, None, ),  # 1
    (2, TType.STRUCT, 'dev_tgt', [controller.thrift_api.res_pd_rpc.ttypes.DevTarget_t, None], None, ),  # 2
)


class mirror_session_get_first_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = MirrorSessionGetResult_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidPipeMgrOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('mirror_session_get_first_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(mirror_session_get_first_result)
mirror_session_get_first_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [MirrorSessionGetResult_t, None], None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidPipeMgrOperation, None], None, ),  # 1
)


class mirror_session_get_next_args(object):
    """
    Attributes:
     - sess_hdl
     - dev_tgt
     - id
     - pipe_id

    """


    def __init__(self, sess_hdl=None, dev_tgt=None, id=None, pipe_id=None,):
        self.sess_hdl = sess_hdl
        self.dev_tgt = dev_tgt
        self.id = id
        self.pipe_id = pipe_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.sess_hdl = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.dev_tgt = controller.thrift_api.res_pd_rpc.ttypes.DevTarget_t()
                    self.dev_tgt.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I16:
                    self.id = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I16:
                    self.pipe_id = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('mirror_session_get_next_args')
        if self.sess_hdl is not None:
            oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
            oprot.writeI32(self.sess_hdl)
            oprot.writeFieldEnd()
        if self.dev_tgt is not None:
            oprot.writeFieldBegin('dev_tgt', TType.STRUCT, 2)
            self.dev_tgt.write(oprot)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I16, 3)
            oprot.writeI16(self.id)
            oprot.writeFieldEnd()
        if self.pipe_id is not None:
            oprot.writeFieldBegin('pipe_id', TType.I16, 4)
            oprot.writeI16(self.pipe_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(mirror_session_get_next_args)
mirror_session_get_next_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'sess_hdl', None, None, ),  # 1
    (2, TType.STRUCT, 'dev_tgt', [controller.thrift_api.res_pd_rpc.ttypes.DevTarget_t, None], None, ),  # 2
    (3, TType.I16, 'id', None, None, ),  # 3
    (4, TType.I16, 'pipe_id', None, None, ),  # 4
)


class mirror_session_get_next_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = MirrorSessionGetResult_t()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidPipeMgrOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('mirror_session_get_next_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(mirror_session_get_next_result)
mirror_session_get_next_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [MirrorSessionGetResult_t, None], None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidPipeMgrOperation, None], None, ),  # 1
)


class mirror_session_get_max_session_id_args(object):
    """
    Attributes:
     - sess_hdl
     - dev
     - mir_type

    """


    def __init__(self, sess_hdl=None, dev=None, mir_type=None,):
        self.sess_hdl = sess_hdl
        self.dev = dev
        self.mir_type = mir_type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.sess_hdl = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.mir_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('mirror_session_get_max_session_id_args')
        if self.sess_hdl is not None:
            oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
            oprot.writeI32(self.sess_hdl)
            oprot.writeFieldEnd()
        if self.dev is not None:
            oprot.writeFieldBegin('dev', TType.I32, 2)
            oprot.writeI32(self.dev)
            oprot.writeFieldEnd()
        if self.mir_type is not None:
            oprot.writeFieldBegin('mir_type', TType.I32, 3)
            oprot.writeI32(self.mir_type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(mirror_session_get_max_session_id_args)
mirror_session_get_max_session_id_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'sess_hdl', None, None, ),  # 1
    (2, TType.I32, 'dev', None, None, ),  # 2
    (3, TType.I32, 'mir_type', None, None, ),  # 3
)


class mirror_session_get_max_session_id_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I16:
                    self.success = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidPipeMgrOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('mirror_session_get_max_session_id_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I16, 0)
            oprot.writeI16(self.success)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(mirror_session_get_max_session_id_result)
mirror_session_get_max_session_id_result.thrift_spec = (
    (0, TType.I16, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidPipeMgrOperation, None], None, ),  # 1
)


class mirror_session_get_base_session_id_args(object):
    """
    Attributes:
     - sess_hdl
     - dev
     - mir_type

    """


    def __init__(self, sess_hdl=None, dev=None, mir_type=None,):
        self.sess_hdl = sess_hdl
        self.dev = dev
        self.mir_type = mir_type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.sess_hdl = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dev = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.mir_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('mirror_session_get_base_session_id_args')
        if self.sess_hdl is not None:
            oprot.writeFieldBegin('sess_hdl', TType.I32, 1)
            oprot.writeI32(self.sess_hdl)
            oprot.writeFieldEnd()
        if self.dev is not None:
            oprot.writeFieldBegin('dev', TType.I32, 2)
            oprot.writeI32(self.dev)
            oprot.writeFieldEnd()
        if self.mir_type is not None:
            oprot.writeFieldBegin('mir_type', TType.I32, 3)
            oprot.writeI32(self.mir_type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(mirror_session_get_base_session_id_args)
mirror_session_get_base_session_id_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'sess_hdl', None, None, ),  # 1
    (2, TType.I32, 'dev', None, None, ),  # 2
    (3, TType.I32, 'mir_type', None, None, ),  # 3
)


class mirror_session_get_base_session_id_result(object):
    """
    Attributes:
     - success
     - ouch

    """


    def __init__(self, success=None, ouch=None,):
        self.success = success
        self.ouch = ouch

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I16:
                    self.success = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ouch = InvalidPipeMgrOperation.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('mirror_session_get_base_session_id_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I16, 0)
            oprot.writeI16(self.success)
            oprot.writeFieldEnd()
        if self.ouch is not None:
            oprot.writeFieldBegin('ouch', TType.STRUCT, 1)
            self.ouch.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(mirror_session_get_base_session_id_result)
mirror_session_get_base_session_id_result.thrift_spec = (
    (0, TType.I16, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'ouch', [InvalidPipeMgrOperation, None], None, ),  # 1
)
fix_spec(all_structs)
del all_structs
