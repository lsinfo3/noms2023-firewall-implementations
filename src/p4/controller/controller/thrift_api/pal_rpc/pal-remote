#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.14.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:package_prefix=controller.thrift_api.
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from pal_rpc import pal
from pal_rpc.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  pal_status_t pal_port_add(pal_device_t device, pal_dev_port_t dev_port, pal_port_speed_t ps, pal_fec_type_t fec)')
    print('  pal_status_t pal_port_add_all(pal_device_t device, pal_port_speed_t ps, pal_fec_type_t fec)')
    print('  pal_status_t pal_port_del(pal_device_t device, pal_dev_port_t dev_port)')
    print('  pal_status_t pal_port_del_all(pal_device_t device)')
    print('  pal_status_t pal_port_enable(pal_device_t device, pal_dev_port_t dev_port)')
    print('  pal_status_t pal_port_enable_all(pal_device_t device)')
    print('  pal_status_t pal_port_dis(pal_device_t device, pal_dev_port_t dev_port)')
    print('  pal_oper_status_t pal_port_oper_status_get(pal_device_t device, pal_dev_port_t dev_port)')
    print('  bool pal_port_is_valid(pal_device_t device, pal_dev_port_t dev_port)')
    print('  pal_autoneg_policy_t pal_port_an_get(pal_device_t device, pal_dev_port_t dev_port)')
    print('  pal_status_t pal_port_an_set(pal_device_t device, pal_dev_port_t dev_port, pal_autoneg_policy_t an)')
    print('  pal_status_t pal_port_an_set_all(pal_device_t device, pal_autoneg_policy_t an)')
    print('  pal_dev_port_t pal_port_get_first(pal_device_t device)')
    print('  pal_dev_port_t pal_port_get_next(pal_device_t device, pal_dev_port_t curr_dev_port)')
    print('  pal_stats_t pal_port_stats_direct_get(pal_device_t device, pal_dev_port_t dev_port, pal_rmon_counters_array_t ctr_type)')
    print('  pal_stats_t pal_port_all_stats_get(pal_device_t device, pal_dev_port_t dev_port)')
    print('  pal_stats_with_ts_t pal_port_all_stats_get_with_ts(pal_device_t device, pal_dev_port_t dev_port)')
    print('  i64 pal_port_this_stat_get(pal_device_t device, pal_dev_port_t dev_port, pal_rmon_counter_t ctr_type)')
    print('  pal_string_t pal_port_this_stat_id_to_str(pal_rmon_counter_t ctr_type)')
    print('  pal_status_t pal_port_this_stat_clear(pal_device_t device, pal_dev_port_t dev_port, pal_rmon_counter_t ctr_type)')
    print('  pal_status_t pal_port_all_stats_clear(pal_device_t device, pal_dev_port_t dev_port)')
    print('  i32 pal_port_stats_poll_intvl_get(pal_device_t device)')
    print('  pal_status_t pal_port_stats_poll_intvl_set(pal_device_t device, i32 poll_intvl_ms)')
    print('  pal_status_t pal_port_all_stats_update(pal_device_t device, pal_dev_port_t dev_port)')
    print('  i32 pal_port_num_lanes_get(pal_device_t device, pal_dev_port_t dev_port)')
    print('  pal_mtu_t pal_port_mtu_get(pal_device_t device, pal_dev_port_t dev_port)')
    print('  pal_status_t pal_port_mtu_set(pal_device_t device, pal_dev_port_t dev_port, i32 tx_mtu, i32 rx_mtu)')
    print('  pal_pfc_t pal_port_flow_control_pfc_get(pal_device_t device, pal_dev_port_t dev_port)')
    print('  pal_status_t pal_port_flow_control_pfc_set(pal_device_t device, pal_dev_port_t dev_port, i32 tx_en_map, i32 rx_en_map)')
    print('  pal_link_pause_t pal_port_flow_control_link_pause_get(pal_device_t device, pal_dev_port_t dev_port)')
    print('  pal_status_t pal_port_flow_control_link_pause_set(pal_device_t device, pal_dev_port_t dev_port, bool tx_en, bool rx_en)')
    print('  pal_fec_type_t pal_port_fec_get(pal_device_t device, pal_dev_port_t dev_port)')
    print('  pal_status_t pal_port_fec_set(pal_device_t device, pal_dev_port_t dev_port, pal_fec_type_t fec)')
    print('  pal_media_type_t pal_port_media_type_get(pal_device_t device, pal_dev_port_t dev_port)')
    print('  pal_status_t pal_port_cut_through_enable(pal_device_t device, pal_dev_port_t dev_port)')
    print('  pal_status_t pal_port_cut_through_disable(pal_device_t device, pal_dev_port_t dev_port)')
    print('  bool pal_port_cut_through_enable_status_get(pal_device_t device, pal_dev_port_t dev_port)')
    print('  i32 pal_num_pipes_get(pal_device_t device)')
    print('  pal_loopback_mod_t pal_port_loopback_mode_get(pal_device_t dev, pal_dev_port_t dev_port)')
    print('  pal_status_t pal_port_loopback_mode_set(pal_device_t dev, pal_dev_port_t dev_port, pal_loopback_mod_t mode)')
    print('  pal_dev_port_t pal_port_front_panel_port_to_dev_port_get(pal_device_t dev, pal_front_port_t front_port, pal_front_chnl_t front_chnl)')
    print('  pal_front_panel_port_t pal_port_dev_port_to_front_panel_port_get(pal_device_t dev, pal_dev_port_t dev_port)')
    print('  i32 pal_max_ports_get(pal_device_t device)')
    print('  pal_dev_port_t pal_fp_idx_to_dev_port_map(pal_device_t device, i32 fp_idx)')
    print('  pal_dev_port_t pal_recirc_port_to_dev_port_map(pal_device_t device, i32 recirc_port)')
    print('  pal_recirc_ports_t pal_recirc_port_range_get(pal_device_t device)')
    print('  bool pal_is_port_internal(pal_device_t device, pal_dev_port_t dev_port)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = pal.Client(protocol)
transport.open()

if cmd == 'pal_port_add':
    if len(args) != 4:
        print('pal_port_add requires 4 args')
        sys.exit(1)
    pp.pprint(client.pal_port_add(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'pal_port_add_all':
    if len(args) != 3:
        print('pal_port_add_all requires 3 args')
        sys.exit(1)
    pp.pprint(client.pal_port_add_all(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'pal_port_del':
    if len(args) != 2:
        print('pal_port_del requires 2 args')
        sys.exit(1)
    pp.pprint(client.pal_port_del(eval(args[0]), eval(args[1]),))

elif cmd == 'pal_port_del_all':
    if len(args) != 1:
        print('pal_port_del_all requires 1 args')
        sys.exit(1)
    pp.pprint(client.pal_port_del_all(eval(args[0]),))

elif cmd == 'pal_port_enable':
    if len(args) != 2:
        print('pal_port_enable requires 2 args')
        sys.exit(1)
    pp.pprint(client.pal_port_enable(eval(args[0]), eval(args[1]),))

elif cmd == 'pal_port_enable_all':
    if len(args) != 1:
        print('pal_port_enable_all requires 1 args')
        sys.exit(1)
    pp.pprint(client.pal_port_enable_all(eval(args[0]),))

elif cmd == 'pal_port_dis':
    if len(args) != 2:
        print('pal_port_dis requires 2 args')
        sys.exit(1)
    pp.pprint(client.pal_port_dis(eval(args[0]), eval(args[1]),))

elif cmd == 'pal_port_oper_status_get':
    if len(args) != 2:
        print('pal_port_oper_status_get requires 2 args')
        sys.exit(1)
    pp.pprint(client.pal_port_oper_status_get(eval(args[0]), eval(args[1]),))

elif cmd == 'pal_port_is_valid':
    if len(args) != 2:
        print('pal_port_is_valid requires 2 args')
        sys.exit(1)
    pp.pprint(client.pal_port_is_valid(eval(args[0]), eval(args[1]),))

elif cmd == 'pal_port_an_get':
    if len(args) != 2:
        print('pal_port_an_get requires 2 args')
        sys.exit(1)
    pp.pprint(client.pal_port_an_get(eval(args[0]), eval(args[1]),))

elif cmd == 'pal_port_an_set':
    if len(args) != 3:
        print('pal_port_an_set requires 3 args')
        sys.exit(1)
    pp.pprint(client.pal_port_an_set(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'pal_port_an_set_all':
    if len(args) != 2:
        print('pal_port_an_set_all requires 2 args')
        sys.exit(1)
    pp.pprint(client.pal_port_an_set_all(eval(args[0]), eval(args[1]),))

elif cmd == 'pal_port_get_first':
    if len(args) != 1:
        print('pal_port_get_first requires 1 args')
        sys.exit(1)
    pp.pprint(client.pal_port_get_first(eval(args[0]),))

elif cmd == 'pal_port_get_next':
    if len(args) != 2:
        print('pal_port_get_next requires 2 args')
        sys.exit(1)
    pp.pprint(client.pal_port_get_next(eval(args[0]), eval(args[1]),))

elif cmd == 'pal_port_stats_direct_get':
    if len(args) != 3:
        print('pal_port_stats_direct_get requires 3 args')
        sys.exit(1)
    pp.pprint(client.pal_port_stats_direct_get(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'pal_port_all_stats_get':
    if len(args) != 2:
        print('pal_port_all_stats_get requires 2 args')
        sys.exit(1)
    pp.pprint(client.pal_port_all_stats_get(eval(args[0]), eval(args[1]),))

elif cmd == 'pal_port_all_stats_get_with_ts':
    if len(args) != 2:
        print('pal_port_all_stats_get_with_ts requires 2 args')
        sys.exit(1)
    pp.pprint(client.pal_port_all_stats_get_with_ts(eval(args[0]), eval(args[1]),))

elif cmd == 'pal_port_this_stat_get':
    if len(args) != 3:
        print('pal_port_this_stat_get requires 3 args')
        sys.exit(1)
    pp.pprint(client.pal_port_this_stat_get(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'pal_port_this_stat_id_to_str':
    if len(args) != 1:
        print('pal_port_this_stat_id_to_str requires 1 args')
        sys.exit(1)
    pp.pprint(client.pal_port_this_stat_id_to_str(eval(args[0]),))

elif cmd == 'pal_port_this_stat_clear':
    if len(args) != 3:
        print('pal_port_this_stat_clear requires 3 args')
        sys.exit(1)
    pp.pprint(client.pal_port_this_stat_clear(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'pal_port_all_stats_clear':
    if len(args) != 2:
        print('pal_port_all_stats_clear requires 2 args')
        sys.exit(1)
    pp.pprint(client.pal_port_all_stats_clear(eval(args[0]), eval(args[1]),))

elif cmd == 'pal_port_stats_poll_intvl_get':
    if len(args) != 1:
        print('pal_port_stats_poll_intvl_get requires 1 args')
        sys.exit(1)
    pp.pprint(client.pal_port_stats_poll_intvl_get(eval(args[0]),))

elif cmd == 'pal_port_stats_poll_intvl_set':
    if len(args) != 2:
        print('pal_port_stats_poll_intvl_set requires 2 args')
        sys.exit(1)
    pp.pprint(client.pal_port_stats_poll_intvl_set(eval(args[0]), eval(args[1]),))

elif cmd == 'pal_port_all_stats_update':
    if len(args) != 2:
        print('pal_port_all_stats_update requires 2 args')
        sys.exit(1)
    pp.pprint(client.pal_port_all_stats_update(eval(args[0]), eval(args[1]),))

elif cmd == 'pal_port_num_lanes_get':
    if len(args) != 2:
        print('pal_port_num_lanes_get requires 2 args')
        sys.exit(1)
    pp.pprint(client.pal_port_num_lanes_get(eval(args[0]), eval(args[1]),))

elif cmd == 'pal_port_mtu_get':
    if len(args) != 2:
        print('pal_port_mtu_get requires 2 args')
        sys.exit(1)
    pp.pprint(client.pal_port_mtu_get(eval(args[0]), eval(args[1]),))

elif cmd == 'pal_port_mtu_set':
    if len(args) != 4:
        print('pal_port_mtu_set requires 4 args')
        sys.exit(1)
    pp.pprint(client.pal_port_mtu_set(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'pal_port_flow_control_pfc_get':
    if len(args) != 2:
        print('pal_port_flow_control_pfc_get requires 2 args')
        sys.exit(1)
    pp.pprint(client.pal_port_flow_control_pfc_get(eval(args[0]), eval(args[1]),))

elif cmd == 'pal_port_flow_control_pfc_set':
    if len(args) != 4:
        print('pal_port_flow_control_pfc_set requires 4 args')
        sys.exit(1)
    pp.pprint(client.pal_port_flow_control_pfc_set(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'pal_port_flow_control_link_pause_get':
    if len(args) != 2:
        print('pal_port_flow_control_link_pause_get requires 2 args')
        sys.exit(1)
    pp.pprint(client.pal_port_flow_control_link_pause_get(eval(args[0]), eval(args[1]),))

elif cmd == 'pal_port_flow_control_link_pause_set':
    if len(args) != 4:
        print('pal_port_flow_control_link_pause_set requires 4 args')
        sys.exit(1)
    pp.pprint(client.pal_port_flow_control_link_pause_set(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'pal_port_fec_get':
    if len(args) != 2:
        print('pal_port_fec_get requires 2 args')
        sys.exit(1)
    pp.pprint(client.pal_port_fec_get(eval(args[0]), eval(args[1]),))

elif cmd == 'pal_port_fec_set':
    if len(args) != 3:
        print('pal_port_fec_set requires 3 args')
        sys.exit(1)
    pp.pprint(client.pal_port_fec_set(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'pal_port_media_type_get':
    if len(args) != 2:
        print('pal_port_media_type_get requires 2 args')
        sys.exit(1)
    pp.pprint(client.pal_port_media_type_get(eval(args[0]), eval(args[1]),))

elif cmd == 'pal_port_cut_through_enable':
    if len(args) != 2:
        print('pal_port_cut_through_enable requires 2 args')
        sys.exit(1)
    pp.pprint(client.pal_port_cut_through_enable(eval(args[0]), eval(args[1]),))

elif cmd == 'pal_port_cut_through_disable':
    if len(args) != 2:
        print('pal_port_cut_through_disable requires 2 args')
        sys.exit(1)
    pp.pprint(client.pal_port_cut_through_disable(eval(args[0]), eval(args[1]),))

elif cmd == 'pal_port_cut_through_enable_status_get':
    if len(args) != 2:
        print('pal_port_cut_through_enable_status_get requires 2 args')
        sys.exit(1)
    pp.pprint(client.pal_port_cut_through_enable_status_get(eval(args[0]), eval(args[1]),))

elif cmd == 'pal_num_pipes_get':
    if len(args) != 1:
        print('pal_num_pipes_get requires 1 args')
        sys.exit(1)
    pp.pprint(client.pal_num_pipes_get(eval(args[0]),))

elif cmd == 'pal_port_loopback_mode_get':
    if len(args) != 2:
        print('pal_port_loopback_mode_get requires 2 args')
        sys.exit(1)
    pp.pprint(client.pal_port_loopback_mode_get(eval(args[0]), eval(args[1]),))

elif cmd == 'pal_port_loopback_mode_set':
    if len(args) != 3:
        print('pal_port_loopback_mode_set requires 3 args')
        sys.exit(1)
    pp.pprint(client.pal_port_loopback_mode_set(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'pal_port_front_panel_port_to_dev_port_get':
    if len(args) != 3:
        print('pal_port_front_panel_port_to_dev_port_get requires 3 args')
        sys.exit(1)
    pp.pprint(client.pal_port_front_panel_port_to_dev_port_get(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'pal_port_dev_port_to_front_panel_port_get':
    if len(args) != 2:
        print('pal_port_dev_port_to_front_panel_port_get requires 2 args')
        sys.exit(1)
    pp.pprint(client.pal_port_dev_port_to_front_panel_port_get(eval(args[0]), eval(args[1]),))

elif cmd == 'pal_max_ports_get':
    if len(args) != 1:
        print('pal_max_ports_get requires 1 args')
        sys.exit(1)
    pp.pprint(client.pal_max_ports_get(eval(args[0]),))

elif cmd == 'pal_fp_idx_to_dev_port_map':
    if len(args) != 2:
        print('pal_fp_idx_to_dev_port_map requires 2 args')
        sys.exit(1)
    pp.pprint(client.pal_fp_idx_to_dev_port_map(eval(args[0]), eval(args[1]),))

elif cmd == 'pal_recirc_port_to_dev_port_map':
    if len(args) != 2:
        print('pal_recirc_port_to_dev_port_map requires 2 args')
        sys.exit(1)
    pp.pprint(client.pal_recirc_port_to_dev_port_map(eval(args[0]), eval(args[1]),))

elif cmd == 'pal_recirc_port_range_get':
    if len(args) != 1:
        print('pal_recirc_port_range_get requires 1 args')
        sys.exit(1)
    pp.pprint(client.pal_recirc_port_range_get(eval(args[0]),))

elif cmd == 'pal_is_port_internal':
    if len(args) != 2:
        print('pal_is_port_internal requires 2 args')
        sys.exit(1)
    pp.pprint(client.pal_is_port_internal(eval(args[0]), eval(args[1]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
