#
# Autogenerated by Thrift Compiler (0.14.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:package_prefix=controller.thrift_api.
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import controller.thrift_api.res_pd_rpc.ttypes

from thrift.transport import TTransport
all_structs = []


class pal_port_speed_t(object):
    BF_SPEED_NONE = 0
    BF_SPEED_1G = 1
    BF_SPEED_10G = 2
    BF_SPEED_25G = 3
    BF_SPEED_40G = 4
    BF_SPEED_40G_NB = 5
    BF_SPEED_50G = 6
    BF_SPEED_100G = 7
    BF_SPEED_40G_NON_BREAKABLE = 8
    BF_SPEED_200G = 9
    BF_SPEED_400G = 10

    _VALUES_TO_NAMES = {
        0: "BF_SPEED_NONE",
        1: "BF_SPEED_1G",
        2: "BF_SPEED_10G",
        3: "BF_SPEED_25G",
        4: "BF_SPEED_40G",
        5: "BF_SPEED_40G_NB",
        6: "BF_SPEED_50G",
        7: "BF_SPEED_100G",
        8: "BF_SPEED_40G_NON_BREAKABLE",
        9: "BF_SPEED_200G",
        10: "BF_SPEED_400G",
    }

    _NAMES_TO_VALUES = {
        "BF_SPEED_NONE": 0,
        "BF_SPEED_1G": 1,
        "BF_SPEED_10G": 2,
        "BF_SPEED_25G": 3,
        "BF_SPEED_40G": 4,
        "BF_SPEED_40G_NB": 5,
        "BF_SPEED_50G": 6,
        "BF_SPEED_100G": 7,
        "BF_SPEED_40G_NON_BREAKABLE": 8,
        "BF_SPEED_200G": 9,
        "BF_SPEED_400G": 10,
    }


class pal_fec_type_t(object):
    BF_FEC_TYP_NONE = 0
    BF_FEC_TYP_FIRECODE = 1
    BF_FEC_TYP_REED_SOLOMON = 2

    _VALUES_TO_NAMES = {
        0: "BF_FEC_TYP_NONE",
        1: "BF_FEC_TYP_FIRECODE",
        2: "BF_FEC_TYP_REED_SOLOMON",
    }

    _NAMES_TO_VALUES = {
        "BF_FEC_TYP_NONE": 0,
        "BF_FEC_TYP_FIRECODE": 1,
        "BF_FEC_TYP_REED_SOLOMON": 2,
    }


class pal_oper_status_t(object):
    BF_PORT_DOWN = 0
    BF_PORT_UP = 1

    _VALUES_TO_NAMES = {
        0: "BF_PORT_DOWN",
        1: "BF_PORT_UP",
    }

    _NAMES_TO_VALUES = {
        "BF_PORT_DOWN": 0,
        "BF_PORT_UP": 1,
    }


class pal_autoneg_policy_t(object):
    BF_AN_DEFAULT = 0
    BF_AN_FORCE_ENABLE = 1
    BF_AN_FORCE_DISABLE = 2

    _VALUES_TO_NAMES = {
        0: "BF_AN_DEFAULT",
        1: "BF_AN_FORCE_ENABLE",
        2: "BF_AN_FORCE_DISABLE",
    }

    _NAMES_TO_VALUES = {
        "BF_AN_DEFAULT": 0,
        "BF_AN_FORCE_ENABLE": 1,
        "BF_AN_FORCE_DISABLE": 2,
    }


class pal_loopback_mod_t(object):
    BF_LPBK_NONE = 0
    BF_LPBK_MAC_NEAR = 1
    BF_LPBK_MAC_FAR = 2
    BF_LPBK_PCS_NEAR = 3
    BF_LPBK_SERDES_NEAR = 4
    BF_LPBK_SERDES_FAR = 5

    _VALUES_TO_NAMES = {
        0: "BF_LPBK_NONE",
        1: "BF_LPBK_MAC_NEAR",
        2: "BF_LPBK_MAC_FAR",
        3: "BF_LPBK_PCS_NEAR",
        4: "BF_LPBK_SERDES_NEAR",
        5: "BF_LPBK_SERDES_FAR",
    }

    _NAMES_TO_VALUES = {
        "BF_LPBK_NONE": 0,
        "BF_LPBK_MAC_NEAR": 1,
        "BF_LPBK_MAC_FAR": 2,
        "BF_LPBK_PCS_NEAR": 3,
        "BF_LPBK_SERDES_NEAR": 4,
        "BF_LPBK_SERDES_FAR": 5,
    }


class pal_rmon_counter_t(object):
    pal_mac_stat_FramesReceivedOK = 0
    pal_mac_stat_FramesReceivedAll = 1
    pal_mac_stat_FramesReceivedwithFCSError = 2
    pal_mac_stat_FrameswithanyError = 3
    pal_mac_stat_OctetsReceivedinGoodFrames = 4
    pal_mac_stat_OctetsReceived = 5
    pal_mac_stat_FramesReceivedwithUnicastAddresses = 6
    pal_mac_stat_FramesReceivedwithMulticastAddresses = 7
    pal_mac_stat_FramesReceivedwithBroadcastAddresses = 8
    pal_mac_stat_FramesReceivedoftypePAUSE = 9
    pal_mac_stat_FramesReceivedwithLengthError = 10
    pal_mac_stat_FramesReceivedUndersized = 11
    pal_mac_stat_FramesReceivedOversized = 12
    pal_mac_stat_FragmentsReceived = 13
    pal_mac_stat_JabberReceived = 14
    pal_mac_stat_PriorityPauseFrames = 15
    pal_mac_stat_CRCErrorStomped = 16
    pal_mac_stat_FrameTooLong = 17
    pal_mac_stat_RxVLANFramesGood = 18
    pal_mac_stat_FramesDroppedBufferFull = 19
    pal_mac_stat_FramesReceivedLength_lt_64 = 20
    pal_mac_stat_FramesReceivedLength_eq_64 = 21
    pal_mac_stat_FramesReceivedLength_65_127 = 22
    pal_mac_stat_FramesReceivedLength_128_255 = 23
    pal_mac_stat_FramesReceivedLength_256_511 = 24
    pal_mac_stat_FramesReceivedLength_512_1023 = 25
    pal_mac_stat_FramesReceivedLength_1024_1518 = 26
    pal_mac_stat_FramesReceivedLength_1519_2047 = 27
    pal_mac_stat_FramesReceivedLength_2048_4095 = 28
    pal_mac_stat_FramesReceivedLength_4096_8191 = 29
    pal_mac_stat_FramesReceivedLength_8192_9215 = 30
    pal_mac_stat_FramesReceivedLength_9216 = 31
    pal_mac_stat_FramesTransmittedOK = 32
    pal_mac_stat_FramesTransmittedAll = 33
    pal_mac_stat_FramesTransmittedwithError = 34
    pal_mac_stat_OctetsTransmittedwithouterror = 35
    pal_mac_stat_OctetsTransmittedTotal = 36
    pal_mac_stat_FramesTransmittedUnicast = 37
    pal_mac_stat_FramesTransmittedMulticast = 38
    pal_mac_stat_FramesTransmittedBroadcast = 39
    pal_mac_stat_FramesTransmittedPause = 40
    pal_mac_stat_FramesTransmittedPriPause = 41
    pal_mac_stat_FramesTransmittedVLAN = 42
    pal_mac_stat_FramesTransmittedLength_lt_64 = 43
    pal_mac_stat_FramesTransmittedLength_eq_64 = 44
    pal_mac_stat_FramesTransmittedLength_65_127 = 45
    pal_mac_stat_FramesTransmittedLength_128_255 = 46
    pal_mac_stat_FramesTransmittedLength_256_511 = 47
    pal_mac_stat_FramesTransmittedLength_512_1023 = 48
    pal_mac_stat_FramesTransmittedLength_1024_1518 = 49
    pal_mac_stat_FramesTransmittedLength_1519_2047 = 50
    pal_mac_stat_FramesTransmittedLength_2048_4095 = 51
    pal_mac_stat_FramesTransmittedLength_4096_8191 = 52
    pal_mac_stat_FramesTransmittedLength_8192_9215 = 53
    pal_mac_stat_FramesTransmittedLength_9216 = 54
    pal_mac_stat_Pri0FramesTransmitted = 55
    pal_mac_stat_Pri1FramesTransmitted = 56
    pal_mac_stat_Pri2FramesTransmitted = 57
    pal_mac_stat_Pri3FramesTransmitted = 58
    pal_mac_stat_Pri4FramesTransmitted = 59
    pal_mac_stat_Pri5FramesTransmitted = 60
    pal_mac_stat_Pri6FramesTransmitted = 61
    pal_mac_stat_Pri7FramesTransmitted = 62
    pal_mac_stat_Pri0FramesReceived = 63
    pal_mac_stat_Pri1FramesReceived = 64
    pal_mac_stat_Pri2FramesReceived = 65
    pal_mac_stat_Pri3FramesReceived = 66
    pal_mac_stat_Pri4FramesReceived = 67
    pal_mac_stat_Pri5FramesReceived = 68
    pal_mac_stat_Pri6FramesReceived = 69
    pal_mac_stat_Pri7FramesReceived = 70
    pal_mac_stat_TransmitPri0Pause1USCount = 71
    pal_mac_stat_TransmitPri1Pause1USCount = 72
    pal_mac_stat_TransmitPri2Pause1USCount = 73
    pal_mac_stat_TransmitPri3Pause1USCount = 74
    pal_mac_stat_TransmitPri4Pause1USCount = 75
    pal_mac_stat_TransmitPri5Pause1USCount = 76
    pal_mac_stat_TransmitPri6Pause1USCount = 77
    pal_mac_stat_TransmitPri7Pause1USCount = 78
    pal_mac_stat_ReceivePri0Pause1USCount = 79
    pal_mac_stat_ReceivePri1Pause1USCount = 80
    pal_mac_stat_ReceivePri2Pause1USCount = 81
    pal_mac_stat_ReceivePri3Pause1USCount = 82
    pal_mac_stat_ReceivePri4Pause1USCount = 83
    pal_mac_stat_ReceivePri5Pause1USCount = 84
    pal_mac_stat_ReceivePri6Pause1USCount = 85
    pal_mac_stat_ReceivePri7Pause1USCount = 86
    pal_mac_stat_ReceiveStandardPause1USCount = 87
    pal_mac_stat_FramesTruncated = 88
    PAL_NUM_RMON_COUNTERS = 89

    _VALUES_TO_NAMES = {
        0: "pal_mac_stat_FramesReceivedOK",
        1: "pal_mac_stat_FramesReceivedAll",
        2: "pal_mac_stat_FramesReceivedwithFCSError",
        3: "pal_mac_stat_FrameswithanyError",
        4: "pal_mac_stat_OctetsReceivedinGoodFrames",
        5: "pal_mac_stat_OctetsReceived",
        6: "pal_mac_stat_FramesReceivedwithUnicastAddresses",
        7: "pal_mac_stat_FramesReceivedwithMulticastAddresses",
        8: "pal_mac_stat_FramesReceivedwithBroadcastAddresses",
        9: "pal_mac_stat_FramesReceivedoftypePAUSE",
        10: "pal_mac_stat_FramesReceivedwithLengthError",
        11: "pal_mac_stat_FramesReceivedUndersized",
        12: "pal_mac_stat_FramesReceivedOversized",
        13: "pal_mac_stat_FragmentsReceived",
        14: "pal_mac_stat_JabberReceived",
        15: "pal_mac_stat_PriorityPauseFrames",
        16: "pal_mac_stat_CRCErrorStomped",
        17: "pal_mac_stat_FrameTooLong",
        18: "pal_mac_stat_RxVLANFramesGood",
        19: "pal_mac_stat_FramesDroppedBufferFull",
        20: "pal_mac_stat_FramesReceivedLength_lt_64",
        21: "pal_mac_stat_FramesReceivedLength_eq_64",
        22: "pal_mac_stat_FramesReceivedLength_65_127",
        23: "pal_mac_stat_FramesReceivedLength_128_255",
        24: "pal_mac_stat_FramesReceivedLength_256_511",
        25: "pal_mac_stat_FramesReceivedLength_512_1023",
        26: "pal_mac_stat_FramesReceivedLength_1024_1518",
        27: "pal_mac_stat_FramesReceivedLength_1519_2047",
        28: "pal_mac_stat_FramesReceivedLength_2048_4095",
        29: "pal_mac_stat_FramesReceivedLength_4096_8191",
        30: "pal_mac_stat_FramesReceivedLength_8192_9215",
        31: "pal_mac_stat_FramesReceivedLength_9216",
        32: "pal_mac_stat_FramesTransmittedOK",
        33: "pal_mac_stat_FramesTransmittedAll",
        34: "pal_mac_stat_FramesTransmittedwithError",
        35: "pal_mac_stat_OctetsTransmittedwithouterror",
        36: "pal_mac_stat_OctetsTransmittedTotal",
        37: "pal_mac_stat_FramesTransmittedUnicast",
        38: "pal_mac_stat_FramesTransmittedMulticast",
        39: "pal_mac_stat_FramesTransmittedBroadcast",
        40: "pal_mac_stat_FramesTransmittedPause",
        41: "pal_mac_stat_FramesTransmittedPriPause",
        42: "pal_mac_stat_FramesTransmittedVLAN",
        43: "pal_mac_stat_FramesTransmittedLength_lt_64",
        44: "pal_mac_stat_FramesTransmittedLength_eq_64",
        45: "pal_mac_stat_FramesTransmittedLength_65_127",
        46: "pal_mac_stat_FramesTransmittedLength_128_255",
        47: "pal_mac_stat_FramesTransmittedLength_256_511",
        48: "pal_mac_stat_FramesTransmittedLength_512_1023",
        49: "pal_mac_stat_FramesTransmittedLength_1024_1518",
        50: "pal_mac_stat_FramesTransmittedLength_1519_2047",
        51: "pal_mac_stat_FramesTransmittedLength_2048_4095",
        52: "pal_mac_stat_FramesTransmittedLength_4096_8191",
        53: "pal_mac_stat_FramesTransmittedLength_8192_9215",
        54: "pal_mac_stat_FramesTransmittedLength_9216",
        55: "pal_mac_stat_Pri0FramesTransmitted",
        56: "pal_mac_stat_Pri1FramesTransmitted",
        57: "pal_mac_stat_Pri2FramesTransmitted",
        58: "pal_mac_stat_Pri3FramesTransmitted",
        59: "pal_mac_stat_Pri4FramesTransmitted",
        60: "pal_mac_stat_Pri5FramesTransmitted",
        61: "pal_mac_stat_Pri6FramesTransmitted",
        62: "pal_mac_stat_Pri7FramesTransmitted",
        63: "pal_mac_stat_Pri0FramesReceived",
        64: "pal_mac_stat_Pri1FramesReceived",
        65: "pal_mac_stat_Pri2FramesReceived",
        66: "pal_mac_stat_Pri3FramesReceived",
        67: "pal_mac_stat_Pri4FramesReceived",
        68: "pal_mac_stat_Pri5FramesReceived",
        69: "pal_mac_stat_Pri6FramesReceived",
        70: "pal_mac_stat_Pri7FramesReceived",
        71: "pal_mac_stat_TransmitPri0Pause1USCount",
        72: "pal_mac_stat_TransmitPri1Pause1USCount",
        73: "pal_mac_stat_TransmitPri2Pause1USCount",
        74: "pal_mac_stat_TransmitPri3Pause1USCount",
        75: "pal_mac_stat_TransmitPri4Pause1USCount",
        76: "pal_mac_stat_TransmitPri5Pause1USCount",
        77: "pal_mac_stat_TransmitPri6Pause1USCount",
        78: "pal_mac_stat_TransmitPri7Pause1USCount",
        79: "pal_mac_stat_ReceivePri0Pause1USCount",
        80: "pal_mac_stat_ReceivePri1Pause1USCount",
        81: "pal_mac_stat_ReceivePri2Pause1USCount",
        82: "pal_mac_stat_ReceivePri3Pause1USCount",
        83: "pal_mac_stat_ReceivePri4Pause1USCount",
        84: "pal_mac_stat_ReceivePri5Pause1USCount",
        85: "pal_mac_stat_ReceivePri6Pause1USCount",
        86: "pal_mac_stat_ReceivePri7Pause1USCount",
        87: "pal_mac_stat_ReceiveStandardPause1USCount",
        88: "pal_mac_stat_FramesTruncated",
        89: "PAL_NUM_RMON_COUNTERS",
    }

    _NAMES_TO_VALUES = {
        "pal_mac_stat_FramesReceivedOK": 0,
        "pal_mac_stat_FramesReceivedAll": 1,
        "pal_mac_stat_FramesReceivedwithFCSError": 2,
        "pal_mac_stat_FrameswithanyError": 3,
        "pal_mac_stat_OctetsReceivedinGoodFrames": 4,
        "pal_mac_stat_OctetsReceived": 5,
        "pal_mac_stat_FramesReceivedwithUnicastAddresses": 6,
        "pal_mac_stat_FramesReceivedwithMulticastAddresses": 7,
        "pal_mac_stat_FramesReceivedwithBroadcastAddresses": 8,
        "pal_mac_stat_FramesReceivedoftypePAUSE": 9,
        "pal_mac_stat_FramesReceivedwithLengthError": 10,
        "pal_mac_stat_FramesReceivedUndersized": 11,
        "pal_mac_stat_FramesReceivedOversized": 12,
        "pal_mac_stat_FragmentsReceived": 13,
        "pal_mac_stat_JabberReceived": 14,
        "pal_mac_stat_PriorityPauseFrames": 15,
        "pal_mac_stat_CRCErrorStomped": 16,
        "pal_mac_stat_FrameTooLong": 17,
        "pal_mac_stat_RxVLANFramesGood": 18,
        "pal_mac_stat_FramesDroppedBufferFull": 19,
        "pal_mac_stat_FramesReceivedLength_lt_64": 20,
        "pal_mac_stat_FramesReceivedLength_eq_64": 21,
        "pal_mac_stat_FramesReceivedLength_65_127": 22,
        "pal_mac_stat_FramesReceivedLength_128_255": 23,
        "pal_mac_stat_FramesReceivedLength_256_511": 24,
        "pal_mac_stat_FramesReceivedLength_512_1023": 25,
        "pal_mac_stat_FramesReceivedLength_1024_1518": 26,
        "pal_mac_stat_FramesReceivedLength_1519_2047": 27,
        "pal_mac_stat_FramesReceivedLength_2048_4095": 28,
        "pal_mac_stat_FramesReceivedLength_4096_8191": 29,
        "pal_mac_stat_FramesReceivedLength_8192_9215": 30,
        "pal_mac_stat_FramesReceivedLength_9216": 31,
        "pal_mac_stat_FramesTransmittedOK": 32,
        "pal_mac_stat_FramesTransmittedAll": 33,
        "pal_mac_stat_FramesTransmittedwithError": 34,
        "pal_mac_stat_OctetsTransmittedwithouterror": 35,
        "pal_mac_stat_OctetsTransmittedTotal": 36,
        "pal_mac_stat_FramesTransmittedUnicast": 37,
        "pal_mac_stat_FramesTransmittedMulticast": 38,
        "pal_mac_stat_FramesTransmittedBroadcast": 39,
        "pal_mac_stat_FramesTransmittedPause": 40,
        "pal_mac_stat_FramesTransmittedPriPause": 41,
        "pal_mac_stat_FramesTransmittedVLAN": 42,
        "pal_mac_stat_FramesTransmittedLength_lt_64": 43,
        "pal_mac_stat_FramesTransmittedLength_eq_64": 44,
        "pal_mac_stat_FramesTransmittedLength_65_127": 45,
        "pal_mac_stat_FramesTransmittedLength_128_255": 46,
        "pal_mac_stat_FramesTransmittedLength_256_511": 47,
        "pal_mac_stat_FramesTransmittedLength_512_1023": 48,
        "pal_mac_stat_FramesTransmittedLength_1024_1518": 49,
        "pal_mac_stat_FramesTransmittedLength_1519_2047": 50,
        "pal_mac_stat_FramesTransmittedLength_2048_4095": 51,
        "pal_mac_stat_FramesTransmittedLength_4096_8191": 52,
        "pal_mac_stat_FramesTransmittedLength_8192_9215": 53,
        "pal_mac_stat_FramesTransmittedLength_9216": 54,
        "pal_mac_stat_Pri0FramesTransmitted": 55,
        "pal_mac_stat_Pri1FramesTransmitted": 56,
        "pal_mac_stat_Pri2FramesTransmitted": 57,
        "pal_mac_stat_Pri3FramesTransmitted": 58,
        "pal_mac_stat_Pri4FramesTransmitted": 59,
        "pal_mac_stat_Pri5FramesTransmitted": 60,
        "pal_mac_stat_Pri6FramesTransmitted": 61,
        "pal_mac_stat_Pri7FramesTransmitted": 62,
        "pal_mac_stat_Pri0FramesReceived": 63,
        "pal_mac_stat_Pri1FramesReceived": 64,
        "pal_mac_stat_Pri2FramesReceived": 65,
        "pal_mac_stat_Pri3FramesReceived": 66,
        "pal_mac_stat_Pri4FramesReceived": 67,
        "pal_mac_stat_Pri5FramesReceived": 68,
        "pal_mac_stat_Pri6FramesReceived": 69,
        "pal_mac_stat_Pri7FramesReceived": 70,
        "pal_mac_stat_TransmitPri0Pause1USCount": 71,
        "pal_mac_stat_TransmitPri1Pause1USCount": 72,
        "pal_mac_stat_TransmitPri2Pause1USCount": 73,
        "pal_mac_stat_TransmitPri3Pause1USCount": 74,
        "pal_mac_stat_TransmitPri4Pause1USCount": 75,
        "pal_mac_stat_TransmitPri5Pause1USCount": 76,
        "pal_mac_stat_TransmitPri6Pause1USCount": 77,
        "pal_mac_stat_TransmitPri7Pause1USCount": 78,
        "pal_mac_stat_ReceivePri0Pause1USCount": 79,
        "pal_mac_stat_ReceivePri1Pause1USCount": 80,
        "pal_mac_stat_ReceivePri2Pause1USCount": 81,
        "pal_mac_stat_ReceivePri3Pause1USCount": 82,
        "pal_mac_stat_ReceivePri4Pause1USCount": 83,
        "pal_mac_stat_ReceivePri5Pause1USCount": 84,
        "pal_mac_stat_ReceivePri6Pause1USCount": 85,
        "pal_mac_stat_ReceivePri7Pause1USCount": 86,
        "pal_mac_stat_ReceiveStandardPause1USCount": 87,
        "pal_mac_stat_FramesTruncated": 88,
        "PAL_NUM_RMON_COUNTERS": 89,
    }


class pal_media_type_t(object):
    BF_MEDIA_TYPE_COPPER = 0
    BF_MEDIA_TYPE_OPTICAL = 1
    BF_MEDIA_TYPE_UNKNOWN = 2

    _VALUES_TO_NAMES = {
        0: "BF_MEDIA_TYPE_COPPER",
        1: "BF_MEDIA_TYPE_OPTICAL",
        2: "BF_MEDIA_TYPE_UNKNOWN",
    }

    _NAMES_TO_VALUES = {
        "BF_MEDIA_TYPE_COPPER": 0,
        "BF_MEDIA_TYPE_OPTICAL": 1,
        "BF_MEDIA_TYPE_UNKNOWN": 2,
    }


class InvalidPalOperation(TException):
    """
    Attributes:
     - code

    """


    def __init__(self, code=None,):
        super(InvalidPalOperation, self).__setattr__('code', code)

    def __setattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __delattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __hash__(self):
        return hash(self.__class__) ^ hash((self.code, ))

    @classmethod
    def read(cls, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and cls.thrift_spec is not None:
            return iprot._fast_decode(None, iprot, [cls, cls.thrift_spec])
        iprot.readStructBegin()
        code = None
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    code = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        return cls(
            code=code,
        )

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('InvalidPalOperation')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.I32, 1)
            oprot.writeI32(self.code)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class pal_stats_t(object):
    """
    Attributes:
     - entry
     - entry_count
     - status

    """


    def __init__(self, entry=None, entry_count=None, status=None,):
        self.entry = entry
        self.entry_count = entry_count
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.entry = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readI64()
                        self.entry.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.entry_count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('pal_stats_t')
        if self.entry is not None:
            oprot.writeFieldBegin('entry', TType.LIST, 1)
            oprot.writeListBegin(TType.I64, len(self.entry))
            for iter6 in self.entry:
                oprot.writeI64(iter6)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.entry_count is not None:
            oprot.writeFieldBegin('entry_count', TType.I32, 2)
            oprot.writeI32(self.entry_count)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 3)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class pal_rmon_counters_array_t(object):
    """
    Attributes:
     - array
     - array_count

    """


    def __init__(self, array=None, array_count=None,):
        self.array = array
        self.array_count = array_count

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.array = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = iprot.readI32()
                        self.array.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.array_count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('pal_rmon_counters_array_t')
        if self.array is not None:
            oprot.writeFieldBegin('array', TType.LIST, 1)
            oprot.writeListBegin(TType.I32, len(self.array))
            for iter13 in self.array:
                oprot.writeI32(iter13)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.array_count is not None:
            oprot.writeFieldBegin('array_count', TType.I32, 2)
            oprot.writeI32(self.array_count)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class pal_stats_with_ts_t(object):
    """
    Attributes:
     - entry
     - entry_count
     - timestamp_s
     - timestamp_ns
     - status

    """


    def __init__(self, entry=None, entry_count=None, timestamp_s=None, timestamp_ns=None, status=None,):
        self.entry = entry
        self.entry_count = entry_count
        self.timestamp_s = timestamp_s
        self.timestamp_ns = timestamp_ns
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.entry = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = iprot.readI64()
                        self.entry.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.entry_count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.timestamp_s = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.timestamp_ns = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('pal_stats_with_ts_t')
        if self.entry is not None:
            oprot.writeFieldBegin('entry', TType.LIST, 1)
            oprot.writeListBegin(TType.I64, len(self.entry))
            for iter20 in self.entry:
                oprot.writeI64(iter20)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.entry_count is not None:
            oprot.writeFieldBegin('entry_count', TType.I32, 2)
            oprot.writeI32(self.entry_count)
            oprot.writeFieldEnd()
        if self.timestamp_s is not None:
            oprot.writeFieldBegin('timestamp_s', TType.I64, 3)
            oprot.writeI64(self.timestamp_s)
            oprot.writeFieldEnd()
        if self.timestamp_ns is not None:
            oprot.writeFieldBegin('timestamp_ns', TType.I64, 4)
            oprot.writeI64(self.timestamp_ns)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 5)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class pal_mtu_t(object):
    """
    Attributes:
     - tx_mtu
     - rx_mtu
     - status

    """


    def __init__(self, tx_mtu=None, rx_mtu=None, status=None,):
        self.tx_mtu = tx_mtu
        self.rx_mtu = rx_mtu
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.tx_mtu = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.rx_mtu = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('pal_mtu_t')
        if self.tx_mtu is not None:
            oprot.writeFieldBegin('tx_mtu', TType.I32, 1)
            oprot.writeI32(self.tx_mtu)
            oprot.writeFieldEnd()
        if self.rx_mtu is not None:
            oprot.writeFieldBegin('rx_mtu', TType.I32, 2)
            oprot.writeI32(self.rx_mtu)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 3)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class pal_pfc_t(object):
    """
    Attributes:
     - tx_en_map
     - rx_en_map
     - status

    """


    def __init__(self, tx_en_map=None, rx_en_map=None, status=None,):
        self.tx_en_map = tx_en_map
        self.rx_en_map = rx_en_map
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.tx_en_map = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.rx_en_map = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('pal_pfc_t')
        if self.tx_en_map is not None:
            oprot.writeFieldBegin('tx_en_map', TType.I32, 1)
            oprot.writeI32(self.tx_en_map)
            oprot.writeFieldEnd()
        if self.rx_en_map is not None:
            oprot.writeFieldBegin('rx_en_map', TType.I32, 2)
            oprot.writeI32(self.rx_en_map)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 3)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class pal_link_pause_t(object):
    """
    Attributes:
     - tx_en
     - rx_en
     - status

    """


    def __init__(self, tx_en=None, rx_en=None, status=None,):
        self.tx_en = tx_en
        self.rx_en = rx_en
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.tx_en = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.rx_en = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('pal_link_pause_t')
        if self.tx_en is not None:
            oprot.writeFieldBegin('tx_en', TType.BOOL, 1)
            oprot.writeBool(self.tx_en)
            oprot.writeFieldEnd()
        if self.rx_en is not None:
            oprot.writeFieldBegin('rx_en', TType.BOOL, 2)
            oprot.writeBool(self.rx_en)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 3)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class pal_string_t(object):
    """
    Attributes:
     - entry
     - entry_count
     - status

    """


    def __init__(self, entry=None, entry_count=None, status=None,):
        self.entry = entry
        self.entry_count = entry_count
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.entry = []
                    (_etype24, _size21) = iprot.readListBegin()
                    for _i25 in range(_size21):
                        _elem26 = iprot.readByte()
                        self.entry.append(_elem26)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.entry_count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('pal_string_t')
        if self.entry is not None:
            oprot.writeFieldBegin('entry', TType.LIST, 1)
            oprot.writeListBegin(TType.BYTE, len(self.entry))
            for iter27 in self.entry:
                oprot.writeByte(iter27)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.entry_count is not None:
            oprot.writeFieldBegin('entry_count', TType.I32, 2)
            oprot.writeI32(self.entry_count)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 3)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class pal_recirc_ports_t(object):
    """
    Attributes:
     - start_recirc_port
     - end_recirc_port
     - status

    """


    def __init__(self, start_recirc_port=None, end_recirc_port=None, status=None,):
        self.start_recirc_port = start_recirc_port
        self.end_recirc_port = end_recirc_port
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.start_recirc_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.end_recirc_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('pal_recirc_ports_t')
        if self.start_recirc_port is not None:
            oprot.writeFieldBegin('start_recirc_port', TType.I32, 1)
            oprot.writeI32(self.start_recirc_port)
            oprot.writeFieldEnd()
        if self.end_recirc_port is not None:
            oprot.writeFieldBegin('end_recirc_port', TType.I32, 2)
            oprot.writeI32(self.end_recirc_port)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 3)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class pal_front_panel_port_t(object):
    """
    Attributes:
     - pal_front_port
     - pal_front_chnl

    """


    def __init__(self, pal_front_port=None, pal_front_chnl=None,):
        self.pal_front_port = pal_front_port
        self.pal_front_chnl = pal_front_chnl

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.pal_front_port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.pal_front_chnl = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('pal_front_panel_port_t')
        if self.pal_front_port is not None:
            oprot.writeFieldBegin('pal_front_port', TType.I32, 1)
            oprot.writeI32(self.pal_front_port)
            oprot.writeFieldEnd()
        if self.pal_front_chnl is not None:
            oprot.writeFieldBegin('pal_front_chnl', TType.I32, 2)
            oprot.writeI32(self.pal_front_chnl)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(InvalidPalOperation)
InvalidPalOperation.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'code', None, None, ),  # 1
)
all_structs.append(pal_stats_t)
pal_stats_t.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'entry', (TType.I64, None, False), None, ),  # 1
    (2, TType.I32, 'entry_count', None, None, ),  # 2
    (3, TType.I32, 'status', None, None, ),  # 3
)
all_structs.append(pal_rmon_counters_array_t)
pal_rmon_counters_array_t.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'array', (TType.I32, None, False), None, ),  # 1
    (2, TType.I32, 'array_count', None, None, ),  # 2
)
all_structs.append(pal_stats_with_ts_t)
pal_stats_with_ts_t.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'entry', (TType.I64, None, False), None, ),  # 1
    (2, TType.I32, 'entry_count', None, None, ),  # 2
    (3, TType.I64, 'timestamp_s', None, None, ),  # 3
    (4, TType.I64, 'timestamp_ns', None, None, ),  # 4
    (5, TType.I32, 'status', None, None, ),  # 5
)
all_structs.append(pal_mtu_t)
pal_mtu_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'tx_mtu', None, None, ),  # 1
    (2, TType.I32, 'rx_mtu', None, None, ),  # 2
    (3, TType.I32, 'status', None, None, ),  # 3
)
all_structs.append(pal_pfc_t)
pal_pfc_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'tx_en_map', None, None, ),  # 1
    (2, TType.I32, 'rx_en_map', None, None, ),  # 2
    (3, TType.I32, 'status', None, None, ),  # 3
)
all_structs.append(pal_link_pause_t)
pal_link_pause_t.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'tx_en', None, None, ),  # 1
    (2, TType.BOOL, 'rx_en', None, None, ),  # 2
    (3, TType.I32, 'status', None, None, ),  # 3
)
all_structs.append(pal_string_t)
pal_string_t.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'entry', (TType.BYTE, None, False), None, ),  # 1
    (2, TType.I32, 'entry_count', None, None, ),  # 2
    (3, TType.I32, 'status', None, None, ),  # 3
)
all_structs.append(pal_recirc_ports_t)
pal_recirc_ports_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'start_recirc_port', None, None, ),  # 1
    (2, TType.I32, 'end_recirc_port', None, None, ),  # 2
    (3, TType.I32, 'status', None, None, ),  # 3
)
all_structs.append(pal_front_panel_port_t)
pal_front_panel_port_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'pal_front_port', None, None, ),  # 1
    (2, TType.I32, 'pal_front_chnl', None, None, ),  # 2
)
fix_spec(all_structs)
del all_structs
