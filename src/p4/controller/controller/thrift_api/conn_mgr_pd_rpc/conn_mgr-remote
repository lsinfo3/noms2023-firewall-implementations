#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.14.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:package_prefix=controller.thrift_api.
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from conn_mgr_pd_rpc import conn_mgr
from conn_mgr_pd_rpc.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void echo(string s)')
    print('  void init()')
    print('  void cleanup()')
    print('  SessionHandle_t client_init()')
    print('  void client_cleanup(SessionHandle_t sess_hdl)')
    print('  void begin_txn(SessionHandle_t sess_hdl, bool isAtomic)')
    print('  void verify_txn(SessionHandle_t sess_hdl)')
    print('  void abort_txn(SessionHandle_t sess_hdl)')
    print('  void commit_txn(SessionHandle_t sess_hdl, bool hwSynchronous)')
    print('  void complete_operations(SessionHandle_t sess_hdl)')
    print('  void begin_batch(SessionHandle_t sess_hdl)')
    print('  void flush_batch(SessionHandle_t sess_hdl)')
    print('  void end_batch(SessionHandle_t sess_hdl, bool hwSynchronous)')
    print('  void log_state(i32 device_id, string filepath)')
    print('  void restore_state(i32 device_id, string filepath)')
    print('  void advance_model_time(SessionHandle_t sess_hdl, i32 device_id, i64 tick_time)')
    print('  void recirculation_enable(SessionHandle_t sess_hdl, i32 dev, i32 port)')
    print('  void recirculation_disable(SessionHandle_t sess_hdl, i32 dev, i32 port)')
    print('  void pktgen_enable(SessionHandle_t sess_hdl, i32 dev, i32 port)')
    print('  void pktgen_disable(SessionHandle_t sess_hdl, i32 dev, i32 port)')
    print('  void pktgen_enable_recirc_pattern_matching(SessionHandle_t sess_hdl, i32 dev, i32 port)')
    print('  void pktgen_disable_recirc_pattern_matching(SessionHandle_t sess_hdl, i32 dev, i32 port)')
    print('  void pktgen_clear_port_down(SessionHandle_t sess_hdl, i32 dev, i32 port)')
    print('  void pktgen_cfg_app(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, i32 app_id, PktGenAppCfg_t cfg)')
    print('  void pktgen_cfg_app_tof2(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, i32 app_id, PktGenAppCfg_tof2_t cfg)')
    print('  void pktgen_cfg_port_mask_tof2(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, i32 sel, PortMask_t mask_in)')
    print('  void pktgen_app_enable(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, i32 app_id)')
    print('  void pktgen_app_disable(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, i32 app_id)')
    print('  void pktgen_write_pkt_buffer(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, i32 offset, i32 size, string buf)')
    print('  i64 pktgen_get_batch_counter(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, i32 app_id)')
    print('  i64 pktgen_get_pkt_counter(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, i32 app_id)')
    print('  i64 pktgen_get_trigger_counter(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, i32 app_id)')
    print('  void pktgen_set_batch_counter(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, i32 app_id, i64 count)')
    print('  void pktgen_set_pkt_counter(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, i32 app_id, i64 count)')
    print('  void pktgen_set_trigger_counter(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, i32 app_id, i64 count)')
    print('  void pktgen_port_down_replay_mode_set(SessionHandle_t sess_hdl, DevTarget_t dev_tgt, PktGenPortDownReplay_t mode)')
    print('  PktGenPortDownReplay_t pktgen_port_down_replay_mode_get(SessionHandle_t sess_hdl, DevTarget_t dev_tgt)')
    print('  void reg_wr(i32 dev, i32 addr, i32 data)')
    print('  i32 reg_rd(i32 dev, i32 addr)')
    print('  void ind_reg_wr(i32 dev, i64 addr, indirect_reg_data_t data)')
    print('  indirect_reg_data_t ind_reg_rd(i32 dev, i64 addr)')
    print('  void tcam_scrub_timer_set(i32 dev, i32 msec_timer)')
    print('  i32 tcam_scrub_timer_get(i32 dev)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = conn_mgr.Client(protocol)
transport.open()

if cmd == 'echo':
    if len(args) != 1:
        print('echo requires 1 args')
        sys.exit(1)
    pp.pprint(client.echo(args[0],))

elif cmd == 'init':
    if len(args) != 0:
        print('init requires 0 args')
        sys.exit(1)
    pp.pprint(client.init())

elif cmd == 'cleanup':
    if len(args) != 0:
        print('cleanup requires 0 args')
        sys.exit(1)
    pp.pprint(client.cleanup())

elif cmd == 'client_init':
    if len(args) != 0:
        print('client_init requires 0 args')
        sys.exit(1)
    pp.pprint(client.client_init())

elif cmd == 'client_cleanup':
    if len(args) != 1:
        print('client_cleanup requires 1 args')
        sys.exit(1)
    pp.pprint(client.client_cleanup(eval(args[0]),))

elif cmd == 'begin_txn':
    if len(args) != 2:
        print('begin_txn requires 2 args')
        sys.exit(1)
    pp.pprint(client.begin_txn(eval(args[0]), eval(args[1]),))

elif cmd == 'verify_txn':
    if len(args) != 1:
        print('verify_txn requires 1 args')
        sys.exit(1)
    pp.pprint(client.verify_txn(eval(args[0]),))

elif cmd == 'abort_txn':
    if len(args) != 1:
        print('abort_txn requires 1 args')
        sys.exit(1)
    pp.pprint(client.abort_txn(eval(args[0]),))

elif cmd == 'commit_txn':
    if len(args) != 2:
        print('commit_txn requires 2 args')
        sys.exit(1)
    pp.pprint(client.commit_txn(eval(args[0]), eval(args[1]),))

elif cmd == 'complete_operations':
    if len(args) != 1:
        print('complete_operations requires 1 args')
        sys.exit(1)
    pp.pprint(client.complete_operations(eval(args[0]),))

elif cmd == 'begin_batch':
    if len(args) != 1:
        print('begin_batch requires 1 args')
        sys.exit(1)
    pp.pprint(client.begin_batch(eval(args[0]),))

elif cmd == 'flush_batch':
    if len(args) != 1:
        print('flush_batch requires 1 args')
        sys.exit(1)
    pp.pprint(client.flush_batch(eval(args[0]),))

elif cmd == 'end_batch':
    if len(args) != 2:
        print('end_batch requires 2 args')
        sys.exit(1)
    pp.pprint(client.end_batch(eval(args[0]), eval(args[1]),))

elif cmd == 'log_state':
    if len(args) != 2:
        print('log_state requires 2 args')
        sys.exit(1)
    pp.pprint(client.log_state(eval(args[0]), args[1],))

elif cmd == 'restore_state':
    if len(args) != 2:
        print('restore_state requires 2 args')
        sys.exit(1)
    pp.pprint(client.restore_state(eval(args[0]), args[1],))

elif cmd == 'advance_model_time':
    if len(args) != 3:
        print('advance_model_time requires 3 args')
        sys.exit(1)
    pp.pprint(client.advance_model_time(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'recirculation_enable':
    if len(args) != 3:
        print('recirculation_enable requires 3 args')
        sys.exit(1)
    pp.pprint(client.recirculation_enable(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'recirculation_disable':
    if len(args) != 3:
        print('recirculation_disable requires 3 args')
        sys.exit(1)
    pp.pprint(client.recirculation_disable(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'pktgen_enable':
    if len(args) != 3:
        print('pktgen_enable requires 3 args')
        sys.exit(1)
    pp.pprint(client.pktgen_enable(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'pktgen_disable':
    if len(args) != 3:
        print('pktgen_disable requires 3 args')
        sys.exit(1)
    pp.pprint(client.pktgen_disable(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'pktgen_enable_recirc_pattern_matching':
    if len(args) != 3:
        print('pktgen_enable_recirc_pattern_matching requires 3 args')
        sys.exit(1)
    pp.pprint(client.pktgen_enable_recirc_pattern_matching(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'pktgen_disable_recirc_pattern_matching':
    if len(args) != 3:
        print('pktgen_disable_recirc_pattern_matching requires 3 args')
        sys.exit(1)
    pp.pprint(client.pktgen_disable_recirc_pattern_matching(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'pktgen_clear_port_down':
    if len(args) != 3:
        print('pktgen_clear_port_down requires 3 args')
        sys.exit(1)
    pp.pprint(client.pktgen_clear_port_down(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'pktgen_cfg_app':
    if len(args) != 4:
        print('pktgen_cfg_app requires 4 args')
        sys.exit(1)
    pp.pprint(client.pktgen_cfg_app(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'pktgen_cfg_app_tof2':
    if len(args) != 4:
        print('pktgen_cfg_app_tof2 requires 4 args')
        sys.exit(1)
    pp.pprint(client.pktgen_cfg_app_tof2(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'pktgen_cfg_port_mask_tof2':
    if len(args) != 4:
        print('pktgen_cfg_port_mask_tof2 requires 4 args')
        sys.exit(1)
    pp.pprint(client.pktgen_cfg_port_mask_tof2(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'pktgen_app_enable':
    if len(args) != 3:
        print('pktgen_app_enable requires 3 args')
        sys.exit(1)
    pp.pprint(client.pktgen_app_enable(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'pktgen_app_disable':
    if len(args) != 3:
        print('pktgen_app_disable requires 3 args')
        sys.exit(1)
    pp.pprint(client.pktgen_app_disable(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'pktgen_write_pkt_buffer':
    if len(args) != 5:
        print('pktgen_write_pkt_buffer requires 5 args')
        sys.exit(1)
    pp.pprint(client.pktgen_write_pkt_buffer(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), args[4],))

elif cmd == 'pktgen_get_batch_counter':
    if len(args) != 3:
        print('pktgen_get_batch_counter requires 3 args')
        sys.exit(1)
    pp.pprint(client.pktgen_get_batch_counter(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'pktgen_get_pkt_counter':
    if len(args) != 3:
        print('pktgen_get_pkt_counter requires 3 args')
        sys.exit(1)
    pp.pprint(client.pktgen_get_pkt_counter(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'pktgen_get_trigger_counter':
    if len(args) != 3:
        print('pktgen_get_trigger_counter requires 3 args')
        sys.exit(1)
    pp.pprint(client.pktgen_get_trigger_counter(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'pktgen_set_batch_counter':
    if len(args) != 4:
        print('pktgen_set_batch_counter requires 4 args')
        sys.exit(1)
    pp.pprint(client.pktgen_set_batch_counter(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'pktgen_set_pkt_counter':
    if len(args) != 4:
        print('pktgen_set_pkt_counter requires 4 args')
        sys.exit(1)
    pp.pprint(client.pktgen_set_pkt_counter(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'pktgen_set_trigger_counter':
    if len(args) != 4:
        print('pktgen_set_trigger_counter requires 4 args')
        sys.exit(1)
    pp.pprint(client.pktgen_set_trigger_counter(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'pktgen_port_down_replay_mode_set':
    if len(args) != 3:
        print('pktgen_port_down_replay_mode_set requires 3 args')
        sys.exit(1)
    pp.pprint(client.pktgen_port_down_replay_mode_set(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'pktgen_port_down_replay_mode_get':
    if len(args) != 2:
        print('pktgen_port_down_replay_mode_get requires 2 args')
        sys.exit(1)
    pp.pprint(client.pktgen_port_down_replay_mode_get(eval(args[0]), eval(args[1]),))

elif cmd == 'reg_wr':
    if len(args) != 3:
        print('reg_wr requires 3 args')
        sys.exit(1)
    pp.pprint(client.reg_wr(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'reg_rd':
    if len(args) != 2:
        print('reg_rd requires 2 args')
        sys.exit(1)
    pp.pprint(client.reg_rd(eval(args[0]), eval(args[1]),))

elif cmd == 'ind_reg_wr':
    if len(args) != 3:
        print('ind_reg_wr requires 3 args')
        sys.exit(1)
    pp.pprint(client.ind_reg_wr(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'ind_reg_rd':
    if len(args) != 2:
        print('ind_reg_rd requires 2 args')
        sys.exit(1)
    pp.pprint(client.ind_reg_rd(eval(args[0]), eval(args[1]),))

elif cmd == 'tcam_scrub_timer_set':
    if len(args) != 2:
        print('tcam_scrub_timer_set requires 2 args')
        sys.exit(1)
    pp.pprint(client.tcam_scrub_timer_set(eval(args[0]), eval(args[1]),))

elif cmd == 'tcam_scrub_timer_get':
    if len(args) != 1:
        print('tcam_scrub_timer_get requires 1 args')
        sys.exit(1)
    pp.pprint(client.tcam_scrub_timer_get(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
