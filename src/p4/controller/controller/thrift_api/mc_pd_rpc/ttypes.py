#
# Autogenerated by Thrift Compiler (0.14.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:package_prefix=controller.thrift_api.
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import controller.thrift_api.res_pd_rpc.ttypes

from thrift.transport import TTransport
all_structs = []


class InvalidMcOperation(TException):
    """
    Attributes:
     - code

    """


    def __init__(self, code=None,):
        super(InvalidMcOperation, self).__setattr__('code', code)

    def __setattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __delattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __hash__(self):
        return hash(self.__class__) ^ hash((self.code, ))

    @classmethod
    def read(cls, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and cls.thrift_spec is not None:
            return iprot._fast_decode(None, iprot, [cls, cls.thrift_spec])
        iprot.readStructBegin()
        code = None
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    code = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        return cls(
            code=code,
        )

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('InvalidMcOperation')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.I32, 1)
            oprot.writeI32(self.code)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class mc_node_assoc_attr(object):
    """
    Attributes:
     - is_associated
     - mgrp_hdl
     - xid_valid
     - xid

    """


    def __init__(self, is_associated=None, mgrp_hdl=None, xid_valid=None, xid=None,):
        self.is_associated = is_associated
        self.mgrp_hdl = mgrp_hdl
        self.xid_valid = xid_valid
        self.xid = xid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.is_associated = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.mgrp_hdl = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BYTE:
                    self.xid_valid = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I16:
                    self.xid = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('mc_node_assoc_attr')
        if self.is_associated is not None:
            oprot.writeFieldBegin('is_associated', TType.BOOL, 1)
            oprot.writeBool(self.is_associated)
            oprot.writeFieldEnd()
        if self.mgrp_hdl is not None:
            oprot.writeFieldBegin('mgrp_hdl', TType.I32, 2)
            oprot.writeI32(self.mgrp_hdl)
            oprot.writeFieldEnd()
        if self.xid_valid is not None:
            oprot.writeFieldBegin('xid_valid', TType.BYTE, 3)
            oprot.writeByte(self.xid_valid)
            oprot.writeFieldEnd()
        if self.xid is not None:
            oprot.writeFieldBegin('xid', TType.I16, 4)
            oprot.writeI16(self.xid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class mc_node_attr(object):
    """
    Attributes:
     - rid
     - port_map
     - lag_map

    """


    def __init__(self, rid=None, port_map=None, lag_map=None,):
        self.rid = rid
        self.port_map = port_map
        self.lag_map = lag_map

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.rid = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.port_map = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.lag_map = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('mc_node_attr')
        if self.rid is not None:
            oprot.writeFieldBegin('rid', TType.I16, 1)
            oprot.writeI16(self.rid)
            oprot.writeFieldEnd()
        if self.port_map is not None:
            oprot.writeFieldBegin('port_map', TType.STRING, 2)
            oprot.writeBinary(self.port_map)
            oprot.writeFieldEnd()
        if self.lag_map is not None:
            oprot.writeFieldBegin('lag_map', TType.STRING, 3)
            oprot.writeBinary(self.lag_map)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class mc_node_is_member(object):
    """
    Attributes:
     - is_ecmp_mbr
     - ecmp_hdl

    """


    def __init__(self, is_ecmp_mbr=None, ecmp_hdl=None,):
        self.is_ecmp_mbr = is_ecmp_mbr
        self.ecmp_hdl = ecmp_hdl

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.is_ecmp_mbr = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.ecmp_hdl = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('mc_node_is_member')
        if self.is_ecmp_mbr is not None:
            oprot.writeFieldBegin('is_ecmp_mbr', TType.BOOL, 1)
            oprot.writeBool(self.is_ecmp_mbr)
            oprot.writeFieldEnd()
        if self.ecmp_hdl is not None:
            oprot.writeFieldBegin('ecmp_hdl', TType.I32, 2)
            oprot.writeI32(self.ecmp_hdl)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class mc_ecmp_assoc_attr(object):
    """
    Attributes:
     - xid_valid
     - xid

    """


    def __init__(self, xid_valid=None, xid=None,):
        self.xid_valid = xid_valid
        self.xid = xid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BYTE:
                    self.xid_valid = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I16:
                    self.xid = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('mc_ecmp_assoc_attr')
        if self.xid_valid is not None:
            oprot.writeFieldBegin('xid_valid', TType.BYTE, 1)
            oprot.writeByte(self.xid_valid)
            oprot.writeFieldEnd()
        if self.xid is not None:
            oprot.writeFieldBegin('xid', TType.I16, 2)
            oprot.writeI16(self.xid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class mc_mgrp_attr(object):
    """
    Attributes:
     - mgid

    """


    def __init__(self, mgid=None,):
        self.mgid = mgid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.mgid = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('mc_mgrp_attr')
        if self.mgid is not None:
            oprot.writeFieldBegin('mgid', TType.I16, 1)
            oprot.writeI16(self.mgid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class mc_mgrp_node_mbr(object):
    """
    Attributes:
     - node_hdl
     - xid_valid
     - xid

    """


    def __init__(self, node_hdl=None, xid_valid=None, xid=None,):
        self.node_hdl = node_hdl
        self.xid_valid = xid_valid
        self.xid = xid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.node_hdl = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BYTE:
                    self.xid_valid = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I16:
                    self.xid = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('mc_mgrp_node_mbr')
        if self.node_hdl is not None:
            oprot.writeFieldBegin('node_hdl', TType.I32, 1)
            oprot.writeI32(self.node_hdl)
            oprot.writeFieldEnd()
        if self.xid_valid is not None:
            oprot.writeFieldBegin('xid_valid', TType.BYTE, 2)
            oprot.writeByte(self.xid_valid)
            oprot.writeFieldEnd()
        if self.xid is not None:
            oprot.writeFieldBegin('xid', TType.I16, 3)
            oprot.writeI16(self.xid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class mc_mgrp_ecmp_mbr(object):
    """
    Attributes:
     - ecmp_hdl
     - xid_valid
     - xid

    """


    def __init__(self, ecmp_hdl=None, xid_valid=None, xid=None,):
        self.ecmp_hdl = ecmp_hdl
        self.xid_valid = xid_valid
        self.xid = xid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.ecmp_hdl = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BYTE:
                    self.xid_valid = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I16:
                    self.xid = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('mc_mgrp_ecmp_mbr')
        if self.ecmp_hdl is not None:
            oprot.writeFieldBegin('ecmp_hdl', TType.I32, 1)
            oprot.writeI32(self.ecmp_hdl)
            oprot.writeFieldEnd()
        if self.xid_valid is not None:
            oprot.writeFieldBegin('xid_valid', TType.BYTE, 2)
            oprot.writeByte(self.xid_valid)
            oprot.writeFieldEnd()
        if self.xid is not None:
            oprot.writeFieldBegin('xid', TType.I16, 3)
            oprot.writeI16(self.xid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class mc_ecmp_mbr(object):
    """
    Attributes:
     - node_hdl
     - is_pruned

    """


    def __init__(self, node_hdl=None, is_pruned=None,):
        self.node_hdl = node_hdl
        self.is_pruned = is_pruned

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.node_hdl = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.is_pruned = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('mc_ecmp_mbr')
        if self.node_hdl is not None:
            oprot.writeFieldBegin('node_hdl', TType.I32, 1)
            oprot.writeI32(self.node_hdl)
            oprot.writeFieldEnd()
        if self.is_pruned is not None:
            oprot.writeFieldBegin('is_pruned', TType.BOOL, 2)
            oprot.writeBool(self.is_pruned)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class mc_lag_mbr(object):
    """
    Attributes:
     - port
     - is_pruned

    """


    def __init__(self, port=None, is_pruned=None,):
        self.port = port
        self.is_pruned = is_pruned

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.is_pruned = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('mc_lag_mbr')
        if self.port is not None:
            oprot.writeFieldBegin('port', TType.I32, 1)
            oprot.writeI32(self.port)
            oprot.writeFieldEnd()
        if self.is_pruned is not None:
            oprot.writeFieldBegin('is_pruned', TType.BOOL, 2)
            oprot.writeBool(self.is_pruned)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(InvalidMcOperation)
InvalidMcOperation.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'code', None, None, ),  # 1
)
all_structs.append(mc_node_assoc_attr)
mc_node_assoc_attr.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'is_associated', None, None, ),  # 1
    (2, TType.I32, 'mgrp_hdl', None, None, ),  # 2
    (3, TType.BYTE, 'xid_valid', None, None, ),  # 3
    (4, TType.I16, 'xid', None, None, ),  # 4
)
all_structs.append(mc_node_attr)
mc_node_attr.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'rid', None, None, ),  # 1
    (2, TType.STRING, 'port_map', 'BINARY', None, ),  # 2
    (3, TType.STRING, 'lag_map', 'BINARY', None, ),  # 3
)
all_structs.append(mc_node_is_member)
mc_node_is_member.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'is_ecmp_mbr', None, None, ),  # 1
    (2, TType.I32, 'ecmp_hdl', None, None, ),  # 2
)
all_structs.append(mc_ecmp_assoc_attr)
mc_ecmp_assoc_attr.thrift_spec = (
    None,  # 0
    (1, TType.BYTE, 'xid_valid', None, None, ),  # 1
    (2, TType.I16, 'xid', None, None, ),  # 2
)
all_structs.append(mc_mgrp_attr)
mc_mgrp_attr.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'mgid', None, None, ),  # 1
)
all_structs.append(mc_mgrp_node_mbr)
mc_mgrp_node_mbr.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'node_hdl', None, None, ),  # 1
    (2, TType.BYTE, 'xid_valid', None, None, ),  # 2
    (3, TType.I16, 'xid', None, None, ),  # 3
)
all_structs.append(mc_mgrp_ecmp_mbr)
mc_mgrp_ecmp_mbr.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'ecmp_hdl', None, None, ),  # 1
    (2, TType.BYTE, 'xid_valid', None, None, ),  # 2
    (3, TType.I16, 'xid', None, None, ),  # 3
)
all_structs.append(mc_ecmp_mbr)
mc_ecmp_mbr.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'node_hdl', None, None, ),  # 1
    (2, TType.BOOL, 'is_pruned', None, None, ),  # 2
)
all_structs.append(mc_lag_mbr)
mc_lag_mbr.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'port', None, None, ),  # 1
    (2, TType.BOOL, 'is_pruned', None, None, ),  # 2
)
fix_spec(all_structs)
del all_structs
