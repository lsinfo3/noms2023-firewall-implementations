#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.14.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:package_prefix=controller.thrift_api.
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from mc_pd_rpc import mc
from mc_pd_rpc.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void mc_init()')
    print('  SessionHandle_t mc_create_session()')
    print('  void mc_destroy_session(SessionHandle_t sess_hdl)')
    print('  void mc_complete_operations(SessionHandle_t sess_hdl)')
    print('  void mc_begin_batch(SessionHandle_t sess_hdl)')
    print('  void mc_flush_batch(SessionHandle_t sess_hdl)')
    print('  void mc_end_batch(SessionHandle_t sess_hdl, bool hwSynchronous)')
    print('  McHandle_t mc_mgrp_create(SessionHandle_t sess_hdl, i32 dev_id, i16 mgid)')
    print('  mc_mgrp_attr mc_mgrp_get_attr(SessionHandle_t sess_hdl, i32 dev_id, McHandle_t mgrp_hdl)')
    print('  void mc_mgrp_destroy(SessionHandle_t sess_hdl, i32 dev_id, McHandle_t grp_hdl)')
    print('  McHandle_t mc_mgrp_get_first(SessionHandle_t sess_hdl, i32 dev_id)')
    print('  i32 mc_mgrp_get_count(SessionHandle_t sess_hdl, i32 dev_id)')
    print('   mc_mgrp_get_next_i(SessionHandle_t sess_hdl, i32 dev_id, McHandle_t mgrp_hdl, i32 n)')
    print('  mc_mgrp_node_mbr mc_mgrp_get_first_node_mbr(SessionHandle_t sess_hdl, i32 dev_id, McHandle_t mgrp_hdl)')
    print('  i32 mc_mgrp_get_node_mbr_count(SessionHandle_t sess_hdl, i32 dev_id, McHandle_t mgrp_hdl)')
    print('   mc_mgrp_get_next_i_node_mbr(SessionHandle_t sess_hdl, i32 dev_id, McHandle_t mgrp_hdl, McHandle_t node_hdl, i32 n)')
    print('  mc_mgrp_ecmp_mbr mc_mgrp_get_first_ecmp_mbr(SessionHandle_t sess_hdl, i32 dev_id, McHandle_t mgrp_hdl)')
    print('  i32 mc_mgrp_get_ecmp_mbr_count(SessionHandle_t sess_hdl, i32 dev_id, McHandle_t mgrp_hdl)')
    print('   mc_mgrp_get_next_i_ecmp_mbr(SessionHandle_t sess_hdl, i32 dev_id, McHandle_t mgrp_hdl, McHandle_t ecmp_hdl, i32 n)')
    print('  McHandle_t mc_node_create(SessionHandle_t sess_hdl, i32 dev_id, i16 rid, string port_map, string lag_map)')
    print('  mc_node_attr mc_node_get_attr(SessionHandle_t sess_hdl, i32 dev_id, McHandle_t mgrp_hdl)')
    print('  void mc_node_update(SessionHandle_t sess_hdl, i32 dev_id, McHandle_t l1_hdl, string port_map, string lag_map)')
    print('  void mc_node_destroy(SessionHandle_t sess_hdl, i32 dev_id, McHandle_t l1_hdl)')
    print('  McHandle_t mc_node_get_first(SessionHandle_t sess_hdl, i32 dev_id)')
    print('  i32 mc_node_get_count(SessionHandle_t sess_hdl, i32 dev_id)')
    print('   mc_node_get_next_i(SessionHandle_t sess_hdl, i32 dev_id, McHandle_t node_hdl, i32 n)')
    print('  mc_ecmp_mbr mc_ecmp_get_mbr_from_hash(SessionHandle_t sess_hdl, i32 dev_id, McHandle_t mgrp_hdl, McHandle_t ecmp_hdl, i16 level1_mcast_hash, i16 pkt_xid)')
    print('  mc_node_assoc_attr mc_node_get_association(SessionHandle_t sess_hdl, i32 dev_id, McHandle_t node_hdl)')
    print('  mc_node_is_member mc_node_is_mbr(SessionHandle_t sess_hdl, i32 dev_id, McHandle_t node_hdl)')
    print('  void mc_associate_node(SessionHandle_t sess_hdl, i32 dev_id, McHandle_t grp_hdl, McHandle_t l1_hdl, i16 xid, i8 xid_valid)')
    print('  void mc_dissociate_node(SessionHandle_t sess_hdl, i32 dev_id, McHandle_t grp_hdl, McHandle_t l1_hdl)')
    print('  McHandle_t mc_ecmp_create(SessionHandle_t sess_hdl, i32 dev_id)')
    print('  void mc_ecmp_destroy(SessionHandle_t sess_hdl, i32 dev_id, McHandle_t ecmp_hdl)')
    print('  McHandle_t mc_ecmp_get_first(SessionHandle_t sess_hdl, i32 dev_id)')
    print('  i32 mc_ecmp_get_count(SessionHandle_t sess_hdl, i32 dev_id)')
    print('   mc_ecmp_get_next_i(SessionHandle_t sess_hdl, i32 dev_id, McHandle_t ecmp_hdl, i32 n)')
    print('  void mc_ecmp_mbr_add(SessionHandle_t sess_hdl, i32 dev_id, McHandle_t ecmp_hdl, McHandle_t l1_hdl)')
    print('  void mc_ecmp_mbr_rem(SessionHandle_t sess_hdl, i32 dev_id, McHandle_t ecmp_hdl, McHandle_t l1_hdl)')
    print('  McHandle_t mc_ecmp_get_first_mbr(SessionHandle_t sess_hdl, i32 dev_id, McHandle_t ecmp_hdl)')
    print('  i32 mc_ecmp_get_mbr_count(SessionHandle_t sess_hdl, i32 dev_id, McHandle_t ecmp_hdl)')
    print('   mc_ecmp_get_next_i_mbr(SessionHandle_t sess_hdl, i32 dev_id, McHandle_t ecmp_hdl, McHandle_t node_hdl, i32 n)')
    print('  void mc_associate_ecmp(SessionHandle_t sess_hdl, i32 dev_id, McHandle_t grp_hdl, McHandle_t ecmp_hdl, i16 xid, i8 xid_valid)')
    print('  mc_ecmp_assoc_attr mc_ecmp_get_assoc_attr(SessionHandle_t sess_hdl, i32 dev_id, McHandle_t grp_hdl, McHandle_t ecmp_hdl)')
    print('  void mc_dissociate_ecmp(SessionHandle_t sess_hdl, i32 dev_id, McHandle_t grp_hdl, McHandle_t ecmp_hdl)')
    print('  McHandle_t mc_ecmp_get_first_assoc(SessionHandle_t sess_hdl, i32 dev_id, McHandle_t ecmp_hdl)')
    print('  i32 mc_ecmp_get_assoc_count(SessionHandle_t sess_hdl, i32 dev_id, McHandle_t ecmp_hdl)')
    print('   mc_ecmp_get_next_i_assoc(SessionHandle_t sess_hdl, i32 dev_id, McHandle_t ecmp_hdl, McHandle_t mgrp_hdl, i32 n)')
    print('  void mc_set_lag_membership(SessionHandle_t sess_hdl, i32 dev_id, i8 lag_index, string port_map)')
    print('  string mc_get_lag_membership(SessionHandle_t sess_hdl, i32 dev_id, i8 lag_index)')
    print('  mc_lag_mbr mc_get_lag_member_from_hash(SessionHandle_t sess_hdl, i32 dev_id, McHandle_t l1_hdl, i8 lag_index, i16 level2_mcast_hash, i16 pkt_xid, i16 pkt_yid, i16 pkt_rid)')
    print('  void mc_set_remote_lag_member_count(SessionHandle_t sess_hdl, i32 dev_id, i8 lag_index, i32 left, i32 right)')
    print('  void mc_update_port_prune_table(SessionHandle_t sess_hdl, i32 dev_id, i16 yid, string port_map)')
    print('  string mc_get_port_prune_table(SessionHandle_t sess_hdl, i32 dev_id, i16 yid, bool from_hw)')
    print('  void mc_set_global_rid(SessionHandle_t sess_hdl, i32 dev_id, i16 rid)')
    print('  void mc_set_port_mc_fwd_state(SessionHandle_t sess_hdl, i32 dev_id, i16 port, i8 is_active)')
    print('  void mc_enable_port_ff(SessionHandle_t sess_hdl, i32 dev_id)')
    print('  void mc_disable_port_ff(SessionHandle_t sess_hdl, i32 dev_id)')
    print('  void mc_clr_port_ff_state(SessionHandle_t sess_hdl, i32 dev_id, i16 port)')
    print('  void mc_enable_port_protection(SessionHandle_t sess_hdl, i32 dev_id)')
    print('  void mc_disable_port_protection(SessionHandle_t sess_hdl, i32 dev_id)')
    print('  void mc_set_port_protection(SessionHandle_t sess_hdl, i32 dev_id, i16 pport, i16 bport)')
    print('  void mc_clear_port_protection(SessionHandle_t sess_hdl, i32 dev_id, i16 pport)')
    print('  void mc_set_max_nodes_before_yield(SessionHandle_t sess_hdl, i32 dev_id, i32 count)')
    print('  void mc_set_max_node_threshold(SessionHandle_t sess_hdl, i32 dev_id, i32 node_count, i32 lag_count)')
    print('  i32 mc_get_pipe_vec(SessionHandle_t sess_hdl, i32 dev_id, i16 mgid)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = mc.Client(protocol)
transport.open()

if cmd == 'mc_init':
    if len(args) != 0:
        print('mc_init requires 0 args')
        sys.exit(1)
    pp.pprint(client.mc_init())

elif cmd == 'mc_create_session':
    if len(args) != 0:
        print('mc_create_session requires 0 args')
        sys.exit(1)
    pp.pprint(client.mc_create_session())

elif cmd == 'mc_destroy_session':
    if len(args) != 1:
        print('mc_destroy_session requires 1 args')
        sys.exit(1)
    pp.pprint(client.mc_destroy_session(eval(args[0]),))

elif cmd == 'mc_complete_operations':
    if len(args) != 1:
        print('mc_complete_operations requires 1 args')
        sys.exit(1)
    pp.pprint(client.mc_complete_operations(eval(args[0]),))

elif cmd == 'mc_begin_batch':
    if len(args) != 1:
        print('mc_begin_batch requires 1 args')
        sys.exit(1)
    pp.pprint(client.mc_begin_batch(eval(args[0]),))

elif cmd == 'mc_flush_batch':
    if len(args) != 1:
        print('mc_flush_batch requires 1 args')
        sys.exit(1)
    pp.pprint(client.mc_flush_batch(eval(args[0]),))

elif cmd == 'mc_end_batch':
    if len(args) != 2:
        print('mc_end_batch requires 2 args')
        sys.exit(1)
    pp.pprint(client.mc_end_batch(eval(args[0]), eval(args[1]),))

elif cmd == 'mc_mgrp_create':
    if len(args) != 3:
        print('mc_mgrp_create requires 3 args')
        sys.exit(1)
    pp.pprint(client.mc_mgrp_create(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'mc_mgrp_get_attr':
    if len(args) != 3:
        print('mc_mgrp_get_attr requires 3 args')
        sys.exit(1)
    pp.pprint(client.mc_mgrp_get_attr(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'mc_mgrp_destroy':
    if len(args) != 3:
        print('mc_mgrp_destroy requires 3 args')
        sys.exit(1)
    pp.pprint(client.mc_mgrp_destroy(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'mc_mgrp_get_first':
    if len(args) != 2:
        print('mc_mgrp_get_first requires 2 args')
        sys.exit(1)
    pp.pprint(client.mc_mgrp_get_first(eval(args[0]), eval(args[1]),))

elif cmd == 'mc_mgrp_get_count':
    if len(args) != 2:
        print('mc_mgrp_get_count requires 2 args')
        sys.exit(1)
    pp.pprint(client.mc_mgrp_get_count(eval(args[0]), eval(args[1]),))

elif cmd == 'mc_mgrp_get_next_i':
    if len(args) != 4:
        print('mc_mgrp_get_next_i requires 4 args')
        sys.exit(1)
    pp.pprint(client.mc_mgrp_get_next_i(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'mc_mgrp_get_first_node_mbr':
    if len(args) != 3:
        print('mc_mgrp_get_first_node_mbr requires 3 args')
        sys.exit(1)
    pp.pprint(client.mc_mgrp_get_first_node_mbr(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'mc_mgrp_get_node_mbr_count':
    if len(args) != 3:
        print('mc_mgrp_get_node_mbr_count requires 3 args')
        sys.exit(1)
    pp.pprint(client.mc_mgrp_get_node_mbr_count(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'mc_mgrp_get_next_i_node_mbr':
    if len(args) != 5:
        print('mc_mgrp_get_next_i_node_mbr requires 5 args')
        sys.exit(1)
    pp.pprint(client.mc_mgrp_get_next_i_node_mbr(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'mc_mgrp_get_first_ecmp_mbr':
    if len(args) != 3:
        print('mc_mgrp_get_first_ecmp_mbr requires 3 args')
        sys.exit(1)
    pp.pprint(client.mc_mgrp_get_first_ecmp_mbr(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'mc_mgrp_get_ecmp_mbr_count':
    if len(args) != 3:
        print('mc_mgrp_get_ecmp_mbr_count requires 3 args')
        sys.exit(1)
    pp.pprint(client.mc_mgrp_get_ecmp_mbr_count(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'mc_mgrp_get_next_i_ecmp_mbr':
    if len(args) != 5:
        print('mc_mgrp_get_next_i_ecmp_mbr requires 5 args')
        sys.exit(1)
    pp.pprint(client.mc_mgrp_get_next_i_ecmp_mbr(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'mc_node_create':
    if len(args) != 5:
        print('mc_node_create requires 5 args')
        sys.exit(1)
    pp.pprint(client.mc_node_create(eval(args[0]), eval(args[1]), eval(args[2]), args[3], args[4],))

elif cmd == 'mc_node_get_attr':
    if len(args) != 3:
        print('mc_node_get_attr requires 3 args')
        sys.exit(1)
    pp.pprint(client.mc_node_get_attr(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'mc_node_update':
    if len(args) != 5:
        print('mc_node_update requires 5 args')
        sys.exit(1)
    pp.pprint(client.mc_node_update(eval(args[0]), eval(args[1]), eval(args[2]), args[3], args[4],))

elif cmd == 'mc_node_destroy':
    if len(args) != 3:
        print('mc_node_destroy requires 3 args')
        sys.exit(1)
    pp.pprint(client.mc_node_destroy(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'mc_node_get_first':
    if len(args) != 2:
        print('mc_node_get_first requires 2 args')
        sys.exit(1)
    pp.pprint(client.mc_node_get_first(eval(args[0]), eval(args[1]),))

elif cmd == 'mc_node_get_count':
    if len(args) != 2:
        print('mc_node_get_count requires 2 args')
        sys.exit(1)
    pp.pprint(client.mc_node_get_count(eval(args[0]), eval(args[1]),))

elif cmd == 'mc_node_get_next_i':
    if len(args) != 4:
        print('mc_node_get_next_i requires 4 args')
        sys.exit(1)
    pp.pprint(client.mc_node_get_next_i(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'mc_ecmp_get_mbr_from_hash':
    if len(args) != 6:
        print('mc_ecmp_get_mbr_from_hash requires 6 args')
        sys.exit(1)
    pp.pprint(client.mc_ecmp_get_mbr_from_hash(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]),))

elif cmd == 'mc_node_get_association':
    if len(args) != 3:
        print('mc_node_get_association requires 3 args')
        sys.exit(1)
    pp.pprint(client.mc_node_get_association(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'mc_node_is_mbr':
    if len(args) != 3:
        print('mc_node_is_mbr requires 3 args')
        sys.exit(1)
    pp.pprint(client.mc_node_is_mbr(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'mc_associate_node':
    if len(args) != 6:
        print('mc_associate_node requires 6 args')
        sys.exit(1)
    pp.pprint(client.mc_associate_node(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]),))

elif cmd == 'mc_dissociate_node':
    if len(args) != 4:
        print('mc_dissociate_node requires 4 args')
        sys.exit(1)
    pp.pprint(client.mc_dissociate_node(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'mc_ecmp_create':
    if len(args) != 2:
        print('mc_ecmp_create requires 2 args')
        sys.exit(1)
    pp.pprint(client.mc_ecmp_create(eval(args[0]), eval(args[1]),))

elif cmd == 'mc_ecmp_destroy':
    if len(args) != 3:
        print('mc_ecmp_destroy requires 3 args')
        sys.exit(1)
    pp.pprint(client.mc_ecmp_destroy(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'mc_ecmp_get_first':
    if len(args) != 2:
        print('mc_ecmp_get_first requires 2 args')
        sys.exit(1)
    pp.pprint(client.mc_ecmp_get_first(eval(args[0]), eval(args[1]),))

elif cmd == 'mc_ecmp_get_count':
    if len(args) != 2:
        print('mc_ecmp_get_count requires 2 args')
        sys.exit(1)
    pp.pprint(client.mc_ecmp_get_count(eval(args[0]), eval(args[1]),))

elif cmd == 'mc_ecmp_get_next_i':
    if len(args) != 4:
        print('mc_ecmp_get_next_i requires 4 args')
        sys.exit(1)
    pp.pprint(client.mc_ecmp_get_next_i(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'mc_ecmp_mbr_add':
    if len(args) != 4:
        print('mc_ecmp_mbr_add requires 4 args')
        sys.exit(1)
    pp.pprint(client.mc_ecmp_mbr_add(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'mc_ecmp_mbr_rem':
    if len(args) != 4:
        print('mc_ecmp_mbr_rem requires 4 args')
        sys.exit(1)
    pp.pprint(client.mc_ecmp_mbr_rem(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'mc_ecmp_get_first_mbr':
    if len(args) != 3:
        print('mc_ecmp_get_first_mbr requires 3 args')
        sys.exit(1)
    pp.pprint(client.mc_ecmp_get_first_mbr(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'mc_ecmp_get_mbr_count':
    if len(args) != 3:
        print('mc_ecmp_get_mbr_count requires 3 args')
        sys.exit(1)
    pp.pprint(client.mc_ecmp_get_mbr_count(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'mc_ecmp_get_next_i_mbr':
    if len(args) != 5:
        print('mc_ecmp_get_next_i_mbr requires 5 args')
        sys.exit(1)
    pp.pprint(client.mc_ecmp_get_next_i_mbr(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'mc_associate_ecmp':
    if len(args) != 6:
        print('mc_associate_ecmp requires 6 args')
        sys.exit(1)
    pp.pprint(client.mc_associate_ecmp(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]),))

elif cmd == 'mc_ecmp_get_assoc_attr':
    if len(args) != 4:
        print('mc_ecmp_get_assoc_attr requires 4 args')
        sys.exit(1)
    pp.pprint(client.mc_ecmp_get_assoc_attr(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'mc_dissociate_ecmp':
    if len(args) != 4:
        print('mc_dissociate_ecmp requires 4 args')
        sys.exit(1)
    pp.pprint(client.mc_dissociate_ecmp(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'mc_ecmp_get_first_assoc':
    if len(args) != 3:
        print('mc_ecmp_get_first_assoc requires 3 args')
        sys.exit(1)
    pp.pprint(client.mc_ecmp_get_first_assoc(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'mc_ecmp_get_assoc_count':
    if len(args) != 3:
        print('mc_ecmp_get_assoc_count requires 3 args')
        sys.exit(1)
    pp.pprint(client.mc_ecmp_get_assoc_count(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'mc_ecmp_get_next_i_assoc':
    if len(args) != 5:
        print('mc_ecmp_get_next_i_assoc requires 5 args')
        sys.exit(1)
    pp.pprint(client.mc_ecmp_get_next_i_assoc(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'mc_set_lag_membership':
    if len(args) != 4:
        print('mc_set_lag_membership requires 4 args')
        sys.exit(1)
    pp.pprint(client.mc_set_lag_membership(eval(args[0]), eval(args[1]), eval(args[2]), args[3],))

elif cmd == 'mc_get_lag_membership':
    if len(args) != 3:
        print('mc_get_lag_membership requires 3 args')
        sys.exit(1)
    pp.pprint(client.mc_get_lag_membership(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'mc_get_lag_member_from_hash':
    if len(args) != 8:
        print('mc_get_lag_member_from_hash requires 8 args')
        sys.exit(1)
    pp.pprint(client.mc_get_lag_member_from_hash(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]), eval(args[6]), eval(args[7]),))

elif cmd == 'mc_set_remote_lag_member_count':
    if len(args) != 5:
        print('mc_set_remote_lag_member_count requires 5 args')
        sys.exit(1)
    pp.pprint(client.mc_set_remote_lag_member_count(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'mc_update_port_prune_table':
    if len(args) != 4:
        print('mc_update_port_prune_table requires 4 args')
        sys.exit(1)
    pp.pprint(client.mc_update_port_prune_table(eval(args[0]), eval(args[1]), eval(args[2]), args[3],))

elif cmd == 'mc_get_port_prune_table':
    if len(args) != 4:
        print('mc_get_port_prune_table requires 4 args')
        sys.exit(1)
    pp.pprint(client.mc_get_port_prune_table(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'mc_set_global_rid':
    if len(args) != 3:
        print('mc_set_global_rid requires 3 args')
        sys.exit(1)
    pp.pprint(client.mc_set_global_rid(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'mc_set_port_mc_fwd_state':
    if len(args) != 4:
        print('mc_set_port_mc_fwd_state requires 4 args')
        sys.exit(1)
    pp.pprint(client.mc_set_port_mc_fwd_state(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'mc_enable_port_ff':
    if len(args) != 2:
        print('mc_enable_port_ff requires 2 args')
        sys.exit(1)
    pp.pprint(client.mc_enable_port_ff(eval(args[0]), eval(args[1]),))

elif cmd == 'mc_disable_port_ff':
    if len(args) != 2:
        print('mc_disable_port_ff requires 2 args')
        sys.exit(1)
    pp.pprint(client.mc_disable_port_ff(eval(args[0]), eval(args[1]),))

elif cmd == 'mc_clr_port_ff_state':
    if len(args) != 3:
        print('mc_clr_port_ff_state requires 3 args')
        sys.exit(1)
    pp.pprint(client.mc_clr_port_ff_state(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'mc_enable_port_protection':
    if len(args) != 2:
        print('mc_enable_port_protection requires 2 args')
        sys.exit(1)
    pp.pprint(client.mc_enable_port_protection(eval(args[0]), eval(args[1]),))

elif cmd == 'mc_disable_port_protection':
    if len(args) != 2:
        print('mc_disable_port_protection requires 2 args')
        sys.exit(1)
    pp.pprint(client.mc_disable_port_protection(eval(args[0]), eval(args[1]),))

elif cmd == 'mc_set_port_protection':
    if len(args) != 4:
        print('mc_set_port_protection requires 4 args')
        sys.exit(1)
    pp.pprint(client.mc_set_port_protection(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'mc_clear_port_protection':
    if len(args) != 3:
        print('mc_clear_port_protection requires 3 args')
        sys.exit(1)
    pp.pprint(client.mc_clear_port_protection(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'mc_set_max_nodes_before_yield':
    if len(args) != 3:
        print('mc_set_max_nodes_before_yield requires 3 args')
        sys.exit(1)
    pp.pprint(client.mc_set_max_nodes_before_yield(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'mc_set_max_node_threshold':
    if len(args) != 4:
        print('mc_set_max_node_threshold requires 4 args')
        sys.exit(1)
    pp.pprint(client.mc_set_max_node_threshold(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'mc_get_pipe_vec':
    if len(args) != 3:
        print('mc_get_pipe_vec requires 3 args')
        sys.exit(1)
    pp.pprint(client.mc_get_pipe_vec(eval(args[0]), eval(args[1]), eval(args[2]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
